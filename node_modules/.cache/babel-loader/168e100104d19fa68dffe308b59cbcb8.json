{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar encoding_1 = require(\"@iov/encoding\");\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar enigmautils_1 = __importDefault(require(\"./enigmautils\"));\n\nfunction normalizeArray(backend) {\n  return backend || [];\n}\n/**\n * The mode used to send transaction\n *\n * @see https://cosmos.network/rpc/#/Transactions/post_txs\n */\n\n\nvar BroadcastMode;\n\n(function (BroadcastMode) {\n  /** Return after tx commit */\n  BroadcastMode[\"Block\"] = \"block\";\n  /** Return afer CheckTx */\n\n  BroadcastMode[\"Sync\"] = \"sync\";\n  /** Return right away */\n\n  BroadcastMode[\"Async\"] = \"async\";\n})(BroadcastMode = exports.BroadcastMode || (exports.BroadcastMode = {}));\n\nfunction isWasmError(resp) {\n  return resp.error !== undefined;\n}\n\nfunction unwrapWasmResponse(response) {\n  if (isWasmError(response)) {\n    throw new Error(response.error);\n  }\n\n  return response.result;\n} // We want to get message data from 500 errors\n// https://stackoverflow.com/questions/56577124/how-to-handle-500-error-message-with-axios\n// this should be chained to catch one error and throw a more informative one\n\n\nfunction parseAxiosError(err) {\n  var _a; // use the error message sent from server, not default 500 msg\n\n\n  if ((_a = err.response) === null || _a === void 0 ? void 0 : _a.data) {\n    var errorText;\n    var data = err.response.data; // expect { error: string }, but otherwise dump\n\n    if (data.error && typeof data.error === \"string\") {\n      errorText = data.error;\n    } else if (typeof data === \"string\") {\n      errorText = data;\n    } else {\n      errorText = JSON.stringify(data);\n    }\n\n    throw new Error(\"\".concat(errorText, \" (HTTP \").concat(err.response.status, \")\"));\n  } else {\n    throw err;\n  }\n}\n\nvar RestClient = /*#__PURE__*/function () {\n  /**\n   * Creates a new client to interact with a Cosmos SDK light client daemon.\n   * This class tries to be a direct mapping onto the API. Some basic decoding and normalizatin is done\n   * but things like caching are done at a higher level.\n   *\n   * When building apps, you should not need to use this class directly. If you do, this indicates a missing feature\n   * in higher level components. Feel free to raise an issue in this case.\n   *\n   * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n   * @param broadcastMode Defines at which point of the transaction processing the postTx method (i.e. transaction broadcasting) returns\n   * @param seed - The seed used to generate sender TX encryption key. If empty will generate random new one\n   */\n  function RestClient(apiUrl) {\n    var broadcastMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BroadcastMode.Block;\n    var seed = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, RestClient);\n\n    var headers = {\n      post: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    this.client = axios_1.default.create({\n      baseURL: apiUrl,\n      headers: headers\n    });\n    this.broadcastMode = broadcastMode;\n    this.enigmautils = new enigmautils_1.default(apiUrl, seed);\n    this.codeHashCache = new Map();\n  }\n\n  _createClass(RestClient, [{\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n        var _yield$this$client$ge, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.client.get(path).catch(parseAxiosError);\n\n              case 2:\n                _yield$this$client$ge = _context.sent;\n                data = _yield$this$client$ge.data;\n\n                if (!(data === null)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Received null response from server\");\n\n              case 6:\n                return _context.abrupt(\"return\", data);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"post\",\n    value: function () {\n      var _post = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(path, params) {\n        var _yield$this$client$po, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (encoding_1.isNonNullObject(params)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Got unexpected type of params. Expected object.\");\n\n              case 2:\n                _context2.next = 4;\n                return this.client.post(path, params).catch(parseAxiosError);\n\n              case 4:\n                _yield$this$client$po = _context2.sent;\n                data = _yield$this$client$po.data;\n\n                if (!(data === null)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Received null response from server\");\n\n              case 8:\n                return _context2.abrupt(\"return\", data);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function post(_x2, _x3) {\n        return _post.apply(this, arguments);\n      }\n\n      return post;\n    }() // The /auth endpoints\n\n  }, {\n    key: \"authAccounts\",\n    value: function () {\n      var _authAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(address) {\n        var path, responseData;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                path = \"/auth/accounts/\".concat(address);\n                _context3.next = 3;\n                return this.get(path);\n\n              case 3:\n                responseData = _context3.sent;\n\n                if (!(responseData.result.type !== \"cosmos-sdk/Account\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 6:\n                return _context3.abrupt(\"return\", responseData);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function authAccounts(_x4) {\n        return _authAccounts.apply(this, arguments);\n      }\n\n      return authAccounts;\n    }() // The /blocks endpoints\n\n  }, {\n    key: \"blocksLatest\",\n    value: function () {\n      var _blocksLatest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var responseData;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.get(\"/blocks/latest\");\n\n              case 2:\n                responseData = _context4.sent;\n\n                if (responseData.block) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 5:\n                return _context4.abrupt(\"return\", responseData);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function blocksLatest() {\n        return _blocksLatest.apply(this, arguments);\n      }\n\n      return blocksLatest;\n    }()\n  }, {\n    key: \"blocks\",\n    value: function () {\n      var _blocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(height) {\n        var responseData;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.get(\"/blocks/\".concat(height));\n\n              case 2:\n                responseData = _context5.sent;\n\n                if (responseData.block) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 5:\n                return _context5.abrupt(\"return\", responseData);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function blocks(_x5) {\n        return _blocks.apply(this, arguments);\n      }\n\n      return blocks;\n    }() // The /node_info endpoint\n\n  }, {\n    key: \"nodeInfo\",\n    value: function () {\n      var _nodeInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var responseData;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.get(\"/node_info\");\n\n              case 2:\n                responseData = _context6.sent;\n\n                if (responseData.node_info) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 5:\n                return _context6.abrupt(\"return\", responseData);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function nodeInfo() {\n        return _nodeInfo.apply(this, arguments);\n      }\n\n      return nodeInfo;\n    }() // The /txs endpoints\n\n  }, {\n    key: \"txById\",\n    value: function () {\n      var _txById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id) {\n        var tryToDecrypt,\n            responseData,\n            _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                tryToDecrypt = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : true;\n                _context7.next = 3;\n                return this.get(\"/txs/\".concat(id));\n\n              case 3:\n                responseData = _context7.sent;\n\n                if (responseData.tx) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 6:\n                if (!tryToDecrypt) {\n                  _context7.next = 10;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", this.decryptTxsResponse(responseData));\n\n              case 10:\n                return _context7.abrupt(\"return\", responseData);\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function txById(_x6) {\n        return _txById.apply(this, arguments);\n      }\n\n      return txById;\n    }()\n  }, {\n    key: \"txsQuery\",\n    value: function () {\n      var _txsQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(query) {\n        var responseData, resp, i;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.get(\"/txs?\".concat(query));\n\n              case 2:\n                responseData = _context8.sent;\n\n                if (responseData.txs) {\n                  _context8.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 5:\n                resp = responseData;\n                i = 0;\n\n              case 7:\n                if (!(i < resp.txs.length)) {\n                  _context8.next = 14;\n                  break;\n                }\n\n                _context8.next = 10;\n                return this.decryptTxsResponse(resp.txs[i]);\n\n              case 10:\n                resp.txs[i] = _context8.sent;\n\n              case 11:\n                i++;\n                _context8.next = 7;\n                break;\n\n              case 14:\n                return _context8.abrupt(\"return\", resp);\n\n              case 15:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function txsQuery(_x7) {\n        return _txsQuery.apply(this, arguments);\n      }\n\n      return txsQuery;\n    }()\n    /** returns the amino-encoding of the transaction performed by the server */\n\n  }, {\n    key: \"encodeTx\",\n    value: function () {\n      var _encodeTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(tx) {\n        var responseData;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.post(\"/txs/encode\", tx);\n\n              case 2:\n                responseData = _context9.sent;\n\n                if (responseData.tx) {\n                  _context9.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 5:\n                return _context9.abrupt(\"return\", encoding_1.Encoding.fromBase64(responseData.tx));\n\n              case 6:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function encodeTx(_x8) {\n        return _encodeTx.apply(this, arguments);\n      }\n\n      return encodeTx;\n    }()\n    /**\n     * Broadcasts a signed transaction to into the transaction pool.\n     * Depending on the RestClient's broadcast mode, this might or might\n     * wait for checkTx or deliverTx to be executed before returning.\n     *\n     * @param tx a signed transaction as StdTx (i.e. not wrapped in type/value container)\n     */\n\n  }, {\n    key: \"postTx\",\n    value: function () {\n      var _postTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(tx) {\n        var params, responseData;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                params = {\n                  tx: tx,\n                  mode: this.broadcastMode\n                };\n                _context10.next = 3;\n                return this.post(\"/txs\", params);\n\n              case 3:\n                responseData = _context10.sent;\n\n                if (responseData.txhash) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Unexpected response data format\");\n\n              case 6:\n                return _context10.abrupt(\"return\", responseData);\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function postTx(_x9) {\n        return _postTx.apply(this, arguments);\n      }\n\n      return postTx;\n    }() // The /wasm endpoints\n    // wasm rest queries are listed here: https://github.com/cosmwasm/wasmd/blob/master/x/wasm/client/rest/query.go#L19-L27\n\n  }, {\n    key: \"listCodeInfo\",\n    value: function () {\n      var _listCodeInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var path, responseData;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                path = \"/wasm/code\";\n                _context11.next = 3;\n                return this.get(path);\n\n              case 3:\n                responseData = _context11.sent;\n                _context11.t0 = normalizeArray;\n                _context11.next = 7;\n                return unwrapWasmResponse(responseData);\n\n              case 7:\n                _context11.t1 = _context11.sent;\n                return _context11.abrupt(\"return\", (0, _context11.t0)(_context11.t1));\n\n              case 9:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function listCodeInfo() {\n        return _listCodeInfo.apply(this, arguments);\n      }\n\n      return listCodeInfo;\n    }() // this will download the original wasm bytecode by code id\n    // throws error if no code with this id\n\n  }, {\n    key: \"getCode\",\n    value: function () {\n      var _getCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(id) {\n        var path, responseData;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                path = \"/wasm/code/\".concat(id);\n                _context12.next = 3;\n                return this.get(path);\n\n              case 3:\n                responseData = _context12.sent;\n                _context12.next = 6;\n                return unwrapWasmResponse(responseData);\n\n              case 6:\n                return _context12.abrupt(\"return\", _context12.sent);\n\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getCode(_x10) {\n        return _getCode.apply(this, arguments);\n      }\n\n      return getCode;\n    }()\n  }, {\n    key: \"listContractsByCodeId\",\n    value: function () {\n      var _listContractsByCodeId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(id) {\n        var path, responseData;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                path = \"/wasm/code/\".concat(id, \"/contracts\");\n                _context13.next = 3;\n                return this.get(path);\n\n              case 3:\n                responseData = _context13.sent;\n                _context13.t0 = normalizeArray;\n                _context13.next = 7;\n                return unwrapWasmResponse(responseData);\n\n              case 7:\n                _context13.t1 = _context13.sent;\n                return _context13.abrupt(\"return\", (0, _context13.t0)(_context13.t1));\n\n              case 9:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function listContractsByCodeId(_x11) {\n        return _listContractsByCodeId.apply(this, arguments);\n      }\n\n      return listContractsByCodeId;\n    }()\n  }, {\n    key: \"getCodeHashByCodeId\",\n    value: function () {\n      var _getCodeHashByCodeId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(id) {\n        var codeHashFromCache, path, responseData;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                codeHashFromCache = this.codeHashCache.get(id);\n\n                if (!(typeof codeHashFromCache === \"string\")) {\n                  _context14.next = 3;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\", codeHashFromCache);\n\n              case 3:\n                path = \"/wasm/code/\".concat(id, \"/hash\");\n                _context14.next = 6;\n                return this.get(path);\n\n              case 6:\n                responseData = _context14.sent;\n                this.codeHashCache.set(id, responseData.result);\n                return _context14.abrupt(\"return\", responseData.result);\n\n              case 9:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getCodeHashByCodeId(_x12) {\n        return _getCodeHashByCodeId.apply(this, arguments);\n      }\n\n      return getCodeHashByCodeId;\n    }()\n  }, {\n    key: \"getCodeHashByContractAddr\",\n    value: function () {\n      var _getCodeHashByContractAddr = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(addr) {\n        var codeHashFromCache, path, responseData;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                codeHashFromCache = this.codeHashCache.get(addr);\n\n                if (!(typeof codeHashFromCache === \"string\")) {\n                  _context15.next = 3;\n                  break;\n                }\n\n                return _context15.abrupt(\"return\", codeHashFromCache);\n\n              case 3:\n                path = \"/wasm/contract/\".concat(addr, \"/code-hash\");\n                _context15.next = 6;\n                return this.get(path);\n\n              case 6:\n                responseData = _context15.sent;\n                this.codeHashCache.set(addr, responseData.result);\n                return _context15.abrupt(\"return\", responseData.result);\n\n              case 9:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getCodeHashByContractAddr(_x13) {\n        return _getCodeHashByContractAddr.apply(this, arguments);\n      }\n\n      return getCodeHashByContractAddr;\n    }()\n    /**\n     * Returns null when contract was not found at this address.\n     */\n\n  }, {\n    key: \"getContractInfo\",\n    value: function () {\n      var _getContractInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(address) {\n        var path, response;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                path = \"/wasm/contract/\".concat(address);\n                _context16.next = 3;\n                return this.get(path);\n\n              case 3:\n                response = _context16.sent;\n                _context16.next = 6;\n                return unwrapWasmResponse(response);\n\n              case 6:\n                return _context16.abrupt(\"return\", _context16.sent);\n\n              case 7:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getContractInfo(_x14) {\n        return _getContractInfo.apply(this, arguments);\n      }\n\n      return getContractInfo;\n    }()\n    /**\n     * Makes a smart query on the contract and parses the reponse as JSON.\n     * Throws error if no such contract exists, the query format is invalid or the response is invalid.\n     */\n\n  }, {\n    key: \"queryContractSmart\",\n    value: function () {\n      var _queryContractSmart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(contractAddress, query, addedParams, contractCodeHash) {\n        var encrypted, nonce, encoded, paramString, path, responseData, errorMessageRgx, rgxMatches, errorCipherB64, errorCipherBz, errorPlainBz;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                if (contractCodeHash) {\n                  _context17.next = 6;\n                  break;\n                }\n\n                _context17.next = 3;\n                return this.getCodeHashByContractAddr(contractAddress);\n\n              case 3:\n                contractCodeHash = _context17.sent;\n                _context17.next = 7;\n                break;\n\n              case 6:\n                this.codeHashCache.set(contractAddress, contractCodeHash);\n\n              case 7:\n                _context17.next = 9;\n                return this.enigmautils.encrypt(contractCodeHash, query);\n\n              case 9:\n                encrypted = _context17.sent;\n                nonce = encrypted.slice(0, 32);\n                encoded = encoding_1.Encoding.toHex(encoding_1.Encoding.toUtf8(encoding_1.Encoding.toBase64(encrypted))); // @ts-ignore\n\n                paramString = new URLSearchParams(addedParams).toString();\n                path = \"/wasm/contract/\".concat(contractAddress, \"/query/\").concat(encoded, \"?encoding=hex&\").concat(paramString);\n                _context17.prev = 14;\n                _context17.next = 17;\n                return this.get(path);\n\n              case 17:\n                responseData = _context17.sent;\n                _context17.next = 39;\n                break;\n\n              case 20:\n                _context17.prev = 20;\n                _context17.t0 = _context17[\"catch\"](14);\n                _context17.prev = 22;\n                errorMessageRgx = /contract failed: encrypted: (.+?) \\(HTTP 500\\)/g;\n                rgxMatches = errorMessageRgx.exec(_context17.t0.message);\n\n                if (!(rgxMatches == null || rgxMatches.length != 2)) {\n                  _context17.next = 27;\n                  break;\n                }\n\n                throw _context17.t0;\n\n              case 27:\n                errorCipherB64 = rgxMatches[1];\n                errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n                _context17.next = 31;\n                return this.enigmautils.decrypt(errorCipherBz, nonce);\n\n              case 31:\n                errorPlainBz = _context17.sent;\n                _context17.t0.message = _context17.t0.message.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n                _context17.next = 38;\n                break;\n\n              case 35:\n                _context17.prev = 35;\n                _context17.t1 = _context17[\"catch\"](22);\n                throw new Error(\"Failed to decrypt the following error message: \".concat(_context17.t0.message, \".\"));\n\n              case 38:\n                throw _context17.t0;\n\n              case 39:\n                if (!isWasmError(responseData)) {\n                  _context17.next = 47;\n                  break;\n                }\n\n                _context17.t2 = Error;\n                _context17.t3 = JSON;\n                _context17.next = 44;\n                return this.enigmautils.decrypt(encoding_1.Encoding.fromBase64(responseData.error), nonce);\n\n              case 44:\n                _context17.t4 = _context17.sent;\n                _context17.t5 = _context17.t3.stringify.call(_context17.t3, _context17.t4);\n                throw new _context17.t2(_context17.t5);\n\n              case 47:\n                _context17.t6 = JSON;\n                _context17.t7 = encoding_1.Encoding;\n                _context17.t8 = encoding_1.Encoding;\n                _context17.t9 = encoding_1.Encoding;\n                _context17.next = 53;\n                return this.enigmautils.decrypt(encoding_1.Encoding.fromBase64(responseData.result.smart), nonce);\n\n              case 53:\n                _context17.t10 = _context17.sent;\n                _context17.t11 = _context17.t9.fromUtf8.call(_context17.t9, _context17.t10);\n                _context17.t12 = _context17.t8.fromBase64.call(_context17.t8, _context17.t11);\n                _context17.t13 = _context17.t7.fromUtf8.call(_context17.t7, _context17.t12);\n                return _context17.abrupt(\"return\", _context17.t6.parse.call(_context17.t6, _context17.t13));\n\n              case 58:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this, [[14, 20], [22, 35]]);\n      }));\n\n      function queryContractSmart(_x15, _x16, _x17, _x18) {\n        return _queryContractSmart.apply(this, arguments);\n      }\n\n      return queryContractSmart;\n    }()\n    /**\n     * Get the consensus keypair for IO encryption\n     */\n\n  }, {\n    key: \"getMasterCerts\",\n    value: function () {\n      var _getMasterCerts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(address, query) {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                return _context18.abrupt(\"return\", this.get(\"/register/master-cert\"));\n\n              case 1:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function getMasterCerts(_x19, _x20) {\n        return _getMasterCerts.apply(this, arguments);\n      }\n\n      return getMasterCerts;\n    }()\n  }, {\n    key: \"decryptDataField\",\n    value: function () {\n      var _decryptDataField = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n        var dataField,\n            nonces,\n            wasmOutputDataCipherBz,\n            error,\n            _iterator,\n            _step,\n            nonce,\n            data,\n            _args19 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                dataField = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : \"\";\n                nonces = _args19.length > 1 ? _args19[1] : undefined;\n                wasmOutputDataCipherBz = encoding_1.Encoding.fromHex(dataField);\n                _iterator = _createForOfIteratorHelper(nonces);\n                _context19.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context19.next = 24;\n                  break;\n                }\n\n                nonce = _step.value;\n                _context19.prev = 8;\n                _context19.t0 = encoding_1.Encoding;\n                _context19.t1 = encoding_1.Encoding;\n                _context19.next = 13;\n                return this.enigmautils.decrypt(wasmOutputDataCipherBz, nonce);\n\n              case 13:\n                _context19.t2 = _context19.sent;\n                _context19.t3 = _context19.t1.fromUtf8.call(_context19.t1, _context19.t2);\n                data = _context19.t0.fromBase64.call(_context19.t0, _context19.t3);\n                return _context19.abrupt(\"return\", data);\n\n              case 19:\n                _context19.prev = 19;\n                _context19.t4 = _context19[\"catch\"](8);\n                error = _context19.t4;\n\n              case 22:\n                _context19.next = 6;\n                break;\n\n              case 24:\n                _context19.next = 29;\n                break;\n\n              case 26:\n                _context19.prev = 26;\n                _context19.t5 = _context19[\"catch\"](4);\n\n                _iterator.e(_context19.t5);\n\n              case 29:\n                _context19.prev = 29;\n\n                _iterator.f();\n\n                return _context19.finish(29);\n\n              case 32:\n                throw error;\n\n              case 33:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this, [[4, 26, 29, 32], [8, 19]]);\n      }));\n\n      function decryptDataField() {\n        return _decryptDataField.apply(this, arguments);\n      }\n\n      return decryptDataField;\n    }()\n  }, {\n    key: \"decryptLogs\",\n    value: function () {\n      var _decryptLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(logs, nonces) {\n        var _iterator2, _step2, l, _iterator3, _step3, e, _iterator4, _step4, nonce, nonceOk, _iterator5, _step5, a;\n\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _iterator2 = _createForOfIteratorHelper(logs);\n                _context20.prev = 1;\n\n                _iterator2.s();\n\n              case 3:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context20.next = 78;\n                  break;\n                }\n\n                l = _step2.value;\n                _iterator3 = _createForOfIteratorHelper(l.events);\n                _context20.prev = 6;\n\n                _iterator3.s();\n\n              case 8:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context20.next = 68;\n                  break;\n                }\n\n                e = _step3.value;\n\n                if (!(e.type === \"wasm\")) {\n                  _context20.next = 66;\n                  break;\n                }\n\n                _iterator4 = _createForOfIteratorHelper(nonces);\n                _context20.prev = 12;\n\n                _iterator4.s();\n\n              case 14:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context20.next = 58;\n                  break;\n                }\n\n                nonce = _step4.value;\n                nonceOk = false;\n                _iterator5 = _createForOfIteratorHelper(e.attributes);\n                _context20.prev = 18;\n\n                _iterator5.s();\n\n              case 20:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context20.next = 46;\n                  break;\n                }\n\n                a = _step5.value;\n                _context20.prev = 22;\n                _context20.t0 = encoding_1.Encoding;\n                _context20.next = 26;\n                return this.enigmautils.decrypt(encoding_1.Encoding.fromBase64(a.key), nonce);\n\n              case 26:\n                _context20.t1 = _context20.sent;\n                a.key = _context20.t0.fromUtf8.call(_context20.t0, _context20.t1);\n                nonceOk = true;\n                _context20.next = 33;\n                break;\n\n              case 31:\n                _context20.prev = 31;\n                _context20.t2 = _context20[\"catch\"](22);\n\n              case 33:\n                _context20.prev = 33;\n                _context20.t3 = encoding_1.Encoding;\n                _context20.next = 37;\n                return this.enigmautils.decrypt(encoding_1.Encoding.fromBase64(a.value), nonce);\n\n              case 37:\n                _context20.t4 = _context20.sent;\n                a.value = _context20.t3.fromUtf8.call(_context20.t3, _context20.t4);\n                nonceOk = true;\n                _context20.next = 44;\n                break;\n\n              case 42:\n                _context20.prev = 42;\n                _context20.t5 = _context20[\"catch\"](33);\n\n              case 44:\n                _context20.next = 20;\n                break;\n\n              case 46:\n                _context20.next = 51;\n                break;\n\n              case 48:\n                _context20.prev = 48;\n                _context20.t6 = _context20[\"catch\"](18);\n\n                _iterator5.e(_context20.t6);\n\n              case 51:\n                _context20.prev = 51;\n\n                _iterator5.f();\n\n                return _context20.finish(51);\n\n              case 54:\n                if (!nonceOk) {\n                  _context20.next = 56;\n                  break;\n                }\n\n                return _context20.abrupt(\"continue\", 56);\n\n              case 56:\n                _context20.next = 14;\n                break;\n\n              case 58:\n                _context20.next = 63;\n                break;\n\n              case 60:\n                _context20.prev = 60;\n                _context20.t7 = _context20[\"catch\"](12);\n\n                _iterator4.e(_context20.t7);\n\n              case 63:\n                _context20.prev = 63;\n\n                _iterator4.f();\n\n                return _context20.finish(63);\n\n              case 66:\n                _context20.next = 8;\n                break;\n\n              case 68:\n                _context20.next = 73;\n                break;\n\n              case 70:\n                _context20.prev = 70;\n                _context20.t8 = _context20[\"catch\"](6);\n\n                _iterator3.e(_context20.t8);\n\n              case 73:\n                _context20.prev = 73;\n\n                _iterator3.f();\n\n                return _context20.finish(73);\n\n              case 76:\n                _context20.next = 3;\n                break;\n\n              case 78:\n                _context20.next = 83;\n                break;\n\n              case 80:\n                _context20.prev = 80;\n                _context20.t9 = _context20[\"catch\"](1);\n\n                _iterator2.e(_context20.t9);\n\n              case 83:\n                _context20.prev = 83;\n\n                _iterator2.f();\n\n                return _context20.finish(83);\n\n              case 86:\n                return _context20.abrupt(\"return\", logs);\n\n              case 87:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this, [[1, 80, 83, 86], [6, 70, 73, 76], [12, 60, 63, 66], [18, 48, 51, 54], [22, 31], [33, 42]]);\n      }));\n\n      function decryptLogs(_x21, _x22) {\n        return _decryptLogs.apply(this, arguments);\n      }\n\n      return decryptLogs;\n    }()\n  }, {\n    key: \"decryptTxsResponse\",\n    value: function () {\n      var _decryptTxsResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(txsResponse) {\n        var i, msg, inputMsgEncrypted, inputMsgPubkey, nonce, inputMsg, logs, errorMessageRgx, rgxMatches, errorCipherB64, errorCipherBz, errorPlainBz;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                i = 0;\n\n              case 1:\n                if (!(i < txsResponse.tx.value.msg.length)) {\n                  _context21.next = 54;\n                  break;\n                }\n\n                msg = txsResponse.tx.value.msg[i];\n                inputMsgEncrypted = void 0;\n\n                if (!(msg.type === \"wasm/MsgExecuteContract\")) {\n                  _context21.next = 8;\n                  break;\n                }\n\n                inputMsgEncrypted = encoding_1.Encoding.fromBase64(msg.value.msg);\n                _context21.next = 13;\n                break;\n\n              case 8:\n                if (!(msg.type === \"wasm/MsgInstantiateContract\")) {\n                  _context21.next = 12;\n                  break;\n                }\n\n                inputMsgEncrypted = encoding_1.Encoding.fromBase64(msg.value.init_msg);\n                _context21.next = 13;\n                break;\n\n              case 12:\n                return _context21.abrupt(\"continue\", 51);\n\n              case 13:\n                inputMsgPubkey = inputMsgEncrypted.slice(32, 64);\n                _context21.t0 = encoding_1.Encoding;\n                _context21.next = 17;\n                return this.enigmautils.getPubkey();\n\n              case 17:\n                _context21.t1 = _context21.sent;\n                _context21.t2 = _context21.t0.toBase64.call(_context21.t0, _context21.t1);\n                _context21.t3 = encoding_1.Encoding.toBase64(inputMsgPubkey);\n\n                if (!(_context21.t2 === _context21.t3)) {\n                  _context21.next = 51;\n                  break;\n                }\n\n                // my pubkey, can decrypt\n                nonce = inputMsgEncrypted.slice(0, 32); // decrypt input\n\n                _context21.t4 = encoding_1.Encoding;\n                _context21.next = 25;\n                return this.enigmautils.decrypt(inputMsgEncrypted.slice(64), nonce);\n\n              case 25:\n                _context21.t5 = _context21.sent;\n                inputMsg = _context21.t4.fromUtf8.call(_context21.t4, _context21.t5);\n\n                if (!(msg.type === \"wasm/MsgExecuteContract\")) {\n                  _context21.next = 35;\n                  break;\n                }\n\n                // decrypt input\n                txsResponse.tx.value.msg[i].value.msg = inputMsg; // decrypt output\n                // stupid workaround because only 1st message data is returned\n\n                if (!(i == 0 && txsResponse.data)) {\n                  _context21.next = 33;\n                  break;\n                }\n\n                _context21.next = 32;\n                return this.decryptDataField(txsResponse.data, [nonce]);\n\n              case 32:\n                txsResponse.data = _context21.sent;\n\n              case 33:\n                _context21.next = 36;\n                break;\n\n              case 35:\n                if (msg.type === \"wasm/MsgInstantiateContract\") {\n                  // decrypt input\n                  txsResponse.tx.value.msg[i].value.init_msg = inputMsg;\n                }\n\n              case 36:\n                // decrypt output logs\n                logs = void 0;\n\n                if (!txsResponse.logs) {\n                  _context21.next = 42;\n                  break;\n                }\n\n                _context21.next = 40;\n                return this.decryptLogs(txsResponse.logs, [nonce]);\n\n              case 40:\n                logs = _context21.sent;\n                txsResponse = Object.assign({}, txsResponse, {\n                  logs: logs\n                });\n\n              case 42:\n                // decrypt error\n                errorMessageRgx = /contract failed: encrypted: (.+?): failed to execute message/g;\n                rgxMatches = errorMessageRgx.exec(txsResponse.raw_log);\n\n                if (!(Array.isArray(rgxMatches) && rgxMatches.length === 2)) {\n                  _context21.next = 51;\n                  break;\n                }\n\n                errorCipherB64 = rgxMatches[1];\n                errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n                _context21.next = 49;\n                return this.enigmautils.decrypt(errorCipherBz, nonce);\n\n              case 49:\n                errorPlainBz = _context21.sent;\n                txsResponse.raw_log = txsResponse.raw_log.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n\n              case 51:\n                i++;\n                _context21.next = 1;\n                break;\n\n              case 54:\n                return _context21.abrupt(\"return\", txsResponse);\n\n              case 55:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function decryptTxsResponse(_x23) {\n        return _decryptTxsResponse.apply(this, arguments);\n      }\n\n      return decryptTxsResponse;\n    }()\n  }]);\n\n  return RestClient;\n}();\n\nexports.RestClient = RestClient;","map":{"version":3,"sources":["../src/restclient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst encoding_1 = require(\"@iov/encoding\");\nconst axios_1 = __importDefault(require(\"axios\"));\nconst enigmautils_1 = __importDefault(require(\"./enigmautils\"));\nfunction normalizeArray(backend) {\n    return backend || [];\n}\n/**\n * The mode used to send transaction\n *\n * @see https://cosmos.network/rpc/#/Transactions/post_txs\n */\nvar BroadcastMode;\n(function (BroadcastMode) {\n    /** Return after tx commit */\n    BroadcastMode[\"Block\"] = \"block\";\n    /** Return afer CheckTx */\n    BroadcastMode[\"Sync\"] = \"sync\";\n    /** Return right away */\n    BroadcastMode[\"Async\"] = \"async\";\n})(BroadcastMode = exports.BroadcastMode || (exports.BroadcastMode = {}));\nfunction isWasmError(resp) {\n    return resp.error !== undefined;\n}\nfunction unwrapWasmResponse(response) {\n    if (isWasmError(response)) {\n        throw new Error(response.error);\n    }\n    return response.result;\n}\n// We want to get message data from 500 errors\n// https://stackoverflow.com/questions/56577124/how-to-handle-500-error-message-with-axios\n// this should be chained to catch one error and throw a more informative one\nfunction parseAxiosError(err) {\n    var _a;\n    // use the error message sent from server, not default 500 msg\n    if ((_a = err.response) === null || _a === void 0 ? void 0 : _a.data) {\n        let errorText;\n        const data = err.response.data;\n        // expect { error: string }, but otherwise dump\n        if (data.error && typeof data.error === \"string\") {\n            errorText = data.error;\n        }\n        else if (typeof data === \"string\") {\n            errorText = data;\n        }\n        else {\n            errorText = JSON.stringify(data);\n        }\n        throw new Error(`${errorText} (HTTP ${err.response.status})`);\n    }\n    else {\n        throw err;\n    }\n}\nclass RestClient {\n    /**\n     * Creates a new client to interact with a Cosmos SDK light client daemon.\n     * This class tries to be a direct mapping onto the API. Some basic decoding and normalizatin is done\n     * but things like caching are done at a higher level.\n     *\n     * When building apps, you should not need to use this class directly. If you do, this indicates a missing feature\n     * in higher level components. Feel free to raise an issue in this case.\n     *\n     * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n     * @param broadcastMode Defines at which point of the transaction processing the postTx method (i.e. transaction broadcasting) returns\n     * @param seed - The seed used to generate sender TX encryption key. If empty will generate random new one\n     */\n    constructor(apiUrl, broadcastMode = BroadcastMode.Block, seed) {\n        const headers = {\n            post: { \"Content-Type\": \"application/json\" },\n        };\n        this.client = axios_1.default.create({\n            baseURL: apiUrl,\n            headers: headers,\n        });\n        this.broadcastMode = broadcastMode;\n        this.enigmautils = new enigmautils_1.default(apiUrl, seed);\n        this.codeHashCache = new Map();\n    }\n    async get(path) {\n        const { data } = await this.client.get(path).catch(parseAxiosError);\n        if (data === null) {\n            throw new Error(\"Received null response from server\");\n        }\n        return data;\n    }\n    async post(path, params) {\n        if (!encoding_1.isNonNullObject(params))\n            throw new Error(\"Got unexpected type of params. Expected object.\");\n        const { data } = await this.client.post(path, params).catch(parseAxiosError);\n        if (data === null) {\n            throw new Error(\"Received null response from server\");\n        }\n        return data;\n    }\n    // The /auth endpoints\n    async authAccounts(address) {\n        const path = `/auth/accounts/${address}`;\n        const responseData = await this.get(path);\n        if (responseData.result.type !== \"cosmos-sdk/Account\") {\n            throw new Error(\"Unexpected response data format\");\n        }\n        return responseData;\n    }\n    // The /blocks endpoints\n    async blocksLatest() {\n        const responseData = await this.get(\"/blocks/latest\");\n        if (!responseData.block) {\n            throw new Error(\"Unexpected response data format\");\n        }\n        return responseData;\n    }\n    async blocks(height) {\n        const responseData = await this.get(`/blocks/${height}`);\n        if (!responseData.block) {\n            throw new Error(\"Unexpected response data format\");\n        }\n        return responseData;\n    }\n    // The /node_info endpoint\n    async nodeInfo() {\n        const responseData = await this.get(\"/node_info\");\n        if (!responseData.node_info) {\n            throw new Error(\"Unexpected response data format\");\n        }\n        return responseData;\n    }\n    // The /txs endpoints\n    async txById(id, tryToDecrypt = true) {\n        const responseData = await this.get(`/txs/${id}`);\n        if (!responseData.tx) {\n            throw new Error(\"Unexpected response data format\");\n        }\n        if (tryToDecrypt) {\n            return this.decryptTxsResponse(responseData);\n        }\n        else {\n            return responseData;\n        }\n    }\n    async txsQuery(query) {\n        const responseData = await this.get(`/txs?${query}`);\n        if (!responseData.txs) {\n            throw new Error(\"Unexpected response data format\");\n        }\n        const resp = responseData;\n        for (let i = 0; i < resp.txs.length; i++) {\n            resp.txs[i] = await this.decryptTxsResponse(resp.txs[i]);\n        }\n        return resp;\n    }\n    /** returns the amino-encoding of the transaction performed by the server */\n    async encodeTx(tx) {\n        const responseData = await this.post(\"/txs/encode\", tx);\n        if (!responseData.tx) {\n            throw new Error(\"Unexpected response data format\");\n        }\n        return encoding_1.Encoding.fromBase64(responseData.tx);\n    }\n    /**\n     * Broadcasts a signed transaction to into the transaction pool.\n     * Depending on the RestClient's broadcast mode, this might or might\n     * wait for checkTx or deliverTx to be executed before returning.\n     *\n     * @param tx a signed transaction as StdTx (i.e. not wrapped in type/value container)\n     */\n    async postTx(tx) {\n        const params = {\n            tx: tx,\n            mode: this.broadcastMode,\n        };\n        const responseData = await this.post(\"/txs\", params);\n        if (!responseData.txhash) {\n            throw new Error(\"Unexpected response data format\");\n        }\n        return responseData;\n    }\n    // The /wasm endpoints\n    // wasm rest queries are listed here: https://github.com/cosmwasm/wasmd/blob/master/x/wasm/client/rest/query.go#L19-L27\n    async listCodeInfo() {\n        const path = `/wasm/code`;\n        const responseData = (await this.get(path));\n        return normalizeArray(await unwrapWasmResponse(responseData));\n    }\n    // this will download the original wasm bytecode by code id\n    // throws error if no code with this id\n    async getCode(id) {\n        const path = `/wasm/code/${id}`;\n        const responseData = (await this.get(path));\n        return await unwrapWasmResponse(responseData);\n    }\n    async listContractsByCodeId(id) {\n        const path = `/wasm/code/${id}/contracts`;\n        const responseData = (await this.get(path));\n        return normalizeArray(await unwrapWasmResponse(responseData));\n    }\n    async getCodeHashByCodeId(id) {\n        const codeHashFromCache = this.codeHashCache.get(id);\n        if (typeof codeHashFromCache === \"string\") {\n            return codeHashFromCache;\n        }\n        const path = `/wasm/code/${id}/hash`;\n        const responseData = (await this.get(path));\n        this.codeHashCache.set(id, responseData.result);\n        return responseData.result;\n    }\n    async getCodeHashByContractAddr(addr) {\n        const codeHashFromCache = this.codeHashCache.get(addr);\n        if (typeof codeHashFromCache === \"string\") {\n            return codeHashFromCache;\n        }\n        const path = `/wasm/contract/${addr}/code-hash`;\n        const responseData = (await this.get(path));\n        this.codeHashCache.set(addr, responseData.result);\n        return responseData.result;\n    }\n    /**\n     * Returns null when contract was not found at this address.\n     */\n    async getContractInfo(address) {\n        const path = `/wasm/contract/${address}`;\n        const response = (await this.get(path));\n        return await unwrapWasmResponse(response);\n    }\n    /**\n     * Makes a smart query on the contract and parses the reponse as JSON.\n     * Throws error if no such contract exists, the query format is invalid or the response is invalid.\n     */\n    async queryContractSmart(contractAddress, query, addedParams, contractCodeHash) {\n        if (!contractCodeHash) {\n            contractCodeHash = await this.getCodeHashByContractAddr(contractAddress);\n        }\n        else {\n            this.codeHashCache.set(contractAddress, contractCodeHash);\n        }\n        const encrypted = await this.enigmautils.encrypt(contractCodeHash, query);\n        const nonce = encrypted.slice(0, 32);\n        const encoded = encoding_1.Encoding.toHex(encoding_1.Encoding.toUtf8(encoding_1.Encoding.toBase64(encrypted)));\n        // @ts-ignore\n        const paramString = new URLSearchParams(addedParams).toString();\n        const path = `/wasm/contract/${contractAddress}/query/${encoded}?encoding=hex&${paramString}`;\n        let responseData;\n        try {\n            responseData = (await this.get(path));\n        }\n        catch (err) {\n            try {\n                const errorMessageRgx = /contract failed: encrypted: (.+?) \\(HTTP 500\\)/g;\n                const rgxMatches = errorMessageRgx.exec(err.message);\n                if (rgxMatches == null || rgxMatches.length != 2) {\n                    throw err;\n                }\n                const errorCipherB64 = rgxMatches[1];\n                const errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n                const errorPlainBz = await this.enigmautils.decrypt(errorCipherBz, nonce);\n                err.message = err.message.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n            }\n            catch (decryptionError) {\n                throw new Error(`Failed to decrypt the following error message: ${err.message}.`);\n            }\n            throw err;\n        }\n        if (isWasmError(responseData)) {\n            throw new Error(JSON.stringify(await this.enigmautils.decrypt(encoding_1.Encoding.fromBase64(responseData.error), nonce)));\n        }\n        // By convention, smart queries must return a valid JSON document (see https://github.com/CosmWasm/cosmwasm/issues/144)\n        return JSON.parse(encoding_1.Encoding.fromUtf8(encoding_1.Encoding.fromBase64(encoding_1.Encoding.fromUtf8(await this.enigmautils.decrypt(encoding_1.Encoding.fromBase64(responseData.result.smart), nonce)))));\n    }\n    /**\n     * Get the consensus keypair for IO encryption\n     */\n    async getMasterCerts(address, query) {\n        return this.get(\"/register/master-cert\");\n    }\n    async decryptDataField(dataField = \"\", nonces) {\n        const wasmOutputDataCipherBz = encoding_1.Encoding.fromHex(dataField);\n        let error;\n        for (const nonce of nonces) {\n            try {\n                const data = encoding_1.Encoding.fromBase64(encoding_1.Encoding.fromUtf8(await this.enigmautils.decrypt(wasmOutputDataCipherBz, nonce)));\n                return data;\n            }\n            catch (e) {\n                error = e;\n            }\n        }\n        throw error;\n    }\n    async decryptLogs(logs, nonces) {\n        for (const l of logs) {\n            for (const e of l.events) {\n                if (e.type === \"wasm\") {\n                    for (const nonce of nonces) {\n                        let nonceOk = false;\n                        for (const a of e.attributes) {\n                            try {\n                                a.key = encoding_1.Encoding.fromUtf8(await this.enigmautils.decrypt(encoding_1.Encoding.fromBase64(a.key), nonce));\n                                nonceOk = true;\n                            }\n                            catch (e) { }\n                            try {\n                                a.value = encoding_1.Encoding.fromUtf8(await this.enigmautils.decrypt(encoding_1.Encoding.fromBase64(a.value), nonce));\n                                nonceOk = true;\n                            }\n                            catch (e) { }\n                        }\n                        if (nonceOk) {\n                            continue;\n                        }\n                    }\n                }\n            }\n        }\n        return logs;\n    }\n    async decryptTxsResponse(txsResponse) {\n        for (let i = 0; i < txsResponse.tx.value.msg.length; i++) {\n            const msg = txsResponse.tx.value.msg[i];\n            let inputMsgEncrypted;\n            if (msg.type === \"wasm/MsgExecuteContract\") {\n                inputMsgEncrypted = encoding_1.Encoding.fromBase64(msg.value.msg);\n            }\n            else if (msg.type === \"wasm/MsgInstantiateContract\") {\n                inputMsgEncrypted = encoding_1.Encoding.fromBase64(msg.value.init_msg);\n            }\n            else {\n                continue;\n            }\n            const inputMsgPubkey = inputMsgEncrypted.slice(32, 64);\n            if (encoding_1.Encoding.toBase64(await this.enigmautils.getPubkey()) === encoding_1.Encoding.toBase64(inputMsgPubkey)) {\n                // my pubkey, can decrypt\n                const nonce = inputMsgEncrypted.slice(0, 32);\n                // decrypt input\n                const inputMsg = encoding_1.Encoding.fromUtf8(await this.enigmautils.decrypt(inputMsgEncrypted.slice(64), nonce));\n                if (msg.type === \"wasm/MsgExecuteContract\") {\n                    // decrypt input\n                    txsResponse.tx.value.msg[i].value.msg = inputMsg;\n                    // decrypt output\n                    // stupid workaround because only 1st message data is returned\n                    if (i == 0 && txsResponse.data) {\n                        txsResponse.data = await this.decryptDataField(txsResponse.data, [nonce]);\n                    }\n                }\n                else if (msg.type === \"wasm/MsgInstantiateContract\") {\n                    // decrypt input\n                    txsResponse.tx.value.msg[i].value.init_msg = inputMsg;\n                }\n                // decrypt output logs\n                let logs;\n                if (txsResponse.logs) {\n                    logs = await this.decryptLogs(txsResponse.logs, [nonce]);\n                    txsResponse = Object.assign({}, txsResponse, { logs: logs });\n                }\n                // decrypt error\n                const errorMessageRgx = /contract failed: encrypted: (.+?): failed to execute message/g;\n                const rgxMatches = errorMessageRgx.exec(txsResponse.raw_log);\n                if (Array.isArray(rgxMatches) && rgxMatches.length === 2) {\n                    const errorCipherB64 = rgxMatches[1];\n                    const errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n                    const errorPlainBz = await this.enigmautils.decrypt(errorCipherBz, nonce);\n                    txsResponse.raw_log = txsResponse.raw_log.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n                }\n            }\n        }\n        return txsResponse;\n    }\n}\nexports.RestClient = RestClient;\n//# sourceMappingURL=restclient.js.map"]},"metadata":{},"sourceType":"script"}