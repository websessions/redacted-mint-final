{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _toConsumableArray = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar crypto_1 = require(\"@iov/crypto\");\n\nvar signature_1 = require(\"./signature\");\n\nfunction prehash(bytes, type) {\n  switch (type) {\n    case null:\n      return new Uint8Array(_toConsumableArray(bytes));\n\n    case \"sha256\":\n      return new crypto_1.Sha256(bytes).digest();\n\n    case \"sha512\":\n      return new crypto_1.Sha512(bytes).digest();\n\n    default:\n      throw new Error(\"Unknown prehash type\");\n  }\n}\n/**\n * The Cosmoshub derivation path in the form `m/44'/118'/0'/0/a`\n * with 0-based account index `a`.\n * The Secret Network derivation path in the form `m/44'/529'/0'/0/a`\n * with 0-based account index `a`.\n */\n\n\nfunction makeSecretNetworkPath(a) {\n  return [crypto_1.Slip10RawIndex.hardened(44), crypto_1.Slip10RawIndex.hardened(529), crypto_1.Slip10RawIndex.hardened(0), crypto_1.Slip10RawIndex.normal(0), crypto_1.Slip10RawIndex.normal(a)];\n}\n\nexports.makeSecretNetworkPath = makeSecretNetworkPath;\n\nvar Secp256k1Pen = /*#__PURE__*/function () {\n  function Secp256k1Pen(privkey, pubkey) {\n    _classCallCheck(this, Secp256k1Pen);\n\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n\n  _createClass(Secp256k1Pen, [{\n    key: \"sign\",\n    value:\n    /**\n     * Creates and returns a signature\n     */\n    function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signBytes) {\n        var prehashType,\n            message,\n            signature,\n            fixedLengthSignature,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                prehashType = _args.length > 1 && _args[1] !== undefined ? _args[1] : \"sha256\";\n                message = prehash(signBytes, prehashType);\n                _context.next = 4;\n                return crypto_1.Secp256k1.createSignature(message, this.privkey);\n\n              case 4:\n                signature = _context.sent;\n                fixedLengthSignature = new Uint8Array([].concat(_toConsumableArray(signature.r(32)), _toConsumableArray(signature.s(32))));\n                return _context.abrupt(\"return\", signature_1.encodeSecp256k1Signature(this.pubkey, fixedLengthSignature));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function sign(_x) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }], [{\n    key: \"fromMnemonic\",\n    value: function () {\n      var _fromMnemonic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(mnemonic) {\n        var hdPath,\n            seed,\n            _crypto_1$Slip10$deri,\n            privkey,\n            uncompressed,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                hdPath = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : makeSecretNetworkPath(0);\n                _context2.next = 3;\n                return crypto_1.Bip39.mnemonicToSeed(new crypto_1.EnglishMnemonic(mnemonic));\n\n              case 3:\n                seed = _context2.sent;\n                _crypto_1$Slip10$deri = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, seed, hdPath), privkey = _crypto_1$Slip10$deri.privkey;\n                _context2.next = 7;\n                return crypto_1.Secp256k1.makeKeypair(privkey);\n\n              case 7:\n                uncompressed = _context2.sent.pubkey;\n                return _context2.abrupt(\"return\", new Secp256k1Pen(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed)));\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function fromMnemonic(_x2) {\n        return _fromMnemonic.apply(this, arguments);\n      }\n\n      return fromMnemonic;\n    }()\n  }]);\n\n  return Secp256k1Pen;\n}();\n\nexports.Secp256k1Pen = Secp256k1Pen;","map":{"version":3,"sources":["../src/pen.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAWA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAoBA,SAAS,OAAT,CAAiB,KAAjB,EAAoC,IAApC,EAAqD;AACnD,UAAQ,IAAR;AACE,SAAK,IAAL;AACE,aAAO,IAAI,UAAJ,oBAAmB,KAAnB,EAAP;;AACF,SAAK,QAAL;AACE,aAAO,IAAI,QAAA,CAAA,MAAJ,CAAW,KAAX,EAAkB,MAAlB,EAAP;;AACF,SAAK,QAAL;AACE,aAAO,IAAI,QAAA,CAAA,MAAJ,CAAW,KAAX,EAAkB,MAAlB,EAAP;;AACF;AACE,YAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AARJ;AAUD;AAED;;;;;AAKG;;;AACH,SAAgB,qBAAhB,CAAsC,CAAtC,EAA+C;AAC7C,SAAO,CACL,QAAA,CAAA,cAAA,CAAe,QAAf,CAAwB,EAAxB,CADK,EAEL,QAAA,CAAA,cAAA,CAAe,QAAf,CAAwB,GAAxB,CAFK,EAGL,QAAA,CAAA,cAAA,CAAe,QAAf,CAAwB,CAAxB,CAHK,EAIL,QAAA,CAAA,cAAA,CAAe,MAAf,CAAsB,CAAtB,CAJK,EAKL,QAAA,CAAA,cAAA,CAAe,MAAf,CAAsB,CAAtB,CALK,CAAP;AAOD;;AARD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;IAUa,Y;AAcX,wBAAoB,OAApB,EAAyC,MAAzC,EAA2D;AAAA;;AACzD,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;;;;AAED;;AAEG;;2EACI,iBAAW,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC,gBAAA,WAAlC,2DAA6D,QAA7D;AACC,gBAAA,OADD,GACW,OAAO,CAAC,SAAD,EAAY,WAAZ,CADlB;AAAA;AAAA,uBAEmB,QAAA,CAAA,SAAA,CAAU,eAAV,CAA0B,OAA1B,EAAmC,KAAK,OAAxC,CAFnB;;AAAA;AAEC,gBAAA,SAFD;AAGC,gBAAA,oBAHD,GAGwB,IAAI,UAAJ,8BAAmB,SAAS,CAAC,CAAV,CAAY,EAAZ,CAAnB,sBAAuC,SAAS,CAAC,CAAV,CAAY,EAAZ,CAAvC,GAHxB;AAAA,iDAIE,WAAA,CAAA,wBAAA,CAAyB,KAAK,MAA9B,EAAsC,oBAAtC,CAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;mFArBA,kBACL,QADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEL,gBAAA,MAFK,8DAE+B,qBAAqB,CAAC,CAAD,CAFpD;AAAA;AAAA,uBAIc,QAAA,CAAA,KAAA,CAAM,cAAN,CAAqB,IAAI,QAAA,CAAA,eAAJ,CAAoB,QAApB,CAArB,CAJd;;AAAA;AAIC,gBAAA,IAJD;AAAA,wCAKe,QAAA,CAAA,MAAA,CAAO,UAAP,CAAkB,QAAA,CAAA,WAAA,CAAY,SAA9B,EAAyC,IAAzC,EAA+C,MAA/C,CALf,EAKG,OALH,yBAKG,OALH;AAAA;AAAA,uBAMuB,QAAA,CAAA,SAAA,CAAU,WAAV,CAAsB,OAAtB,CANvB;;AAAA;AAMC,gBAAA,YAND,kBAMuD,MANvD;AAAA,kDAOE,IAAI,YAAJ,CAAiB,OAAjB,EAA0B,QAAA,CAAA,SAAA,CAAU,cAAV,CAAyB,YAAzB,CAA1B,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AADT,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"@iov/crypto\");\nconst signature_1 = require(\"./signature\");\nfunction prehash(bytes, type) {\n    switch (type) {\n        case null:\n            return new Uint8Array([...bytes]);\n        case \"sha256\":\n            return new crypto_1.Sha256(bytes).digest();\n        case \"sha512\":\n            return new crypto_1.Sha512(bytes).digest();\n        default:\n            throw new Error(\"Unknown prehash type\");\n    }\n}\n/**\n * The Cosmoshub derivation path in the form `m/44'/118'/0'/0/a`\n * with 0-based account index `a`.\n * The Secret Network derivation path in the form `m/44'/529'/0'/0/a`\n * with 0-based account index `a`.\n */\nfunction makeSecretNetworkPath(a) {\n    return [\n        crypto_1.Slip10RawIndex.hardened(44),\n        crypto_1.Slip10RawIndex.hardened(529),\n        crypto_1.Slip10RawIndex.hardened(0),\n        crypto_1.Slip10RawIndex.normal(0),\n        crypto_1.Slip10RawIndex.normal(a),\n    ];\n}\nexports.makeSecretNetworkPath = makeSecretNetworkPath;\nclass Secp256k1Pen {\n    constructor(privkey, pubkey) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n    }\n    static async fromMnemonic(mnemonic, hdPath = makeSecretNetworkPath(0)) {\n        const seed = await crypto_1.Bip39.mnemonicToSeed(new crypto_1.EnglishMnemonic(mnemonic));\n        const { privkey } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, seed, hdPath);\n        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n        return new Secp256k1Pen(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed));\n    }\n    /**\n     * Creates and returns a signature\n     */\n    async sign(signBytes, prehashType = \"sha256\") {\n        const message = prehash(signBytes, prehashType);\n        const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n        const fixedLengthSignature = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        return signature_1.encodeSecp256k1Signature(this.pubkey, fixedLengthSignature);\n    }\n}\nexports.Secp256k1Pen = Secp256k1Pen;\n//# sourceMappingURL=pen.js.map"]},"metadata":{},"sourceType":"script"}