{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar miscreant = require(\"miscreant\");\n\nvar curve25519_js_1 = require(\"curve25519-js\");\n\nvar encoding_1 = require(\"@iov/encoding\");\n\nvar secureRandom = require(\"secure-random\");\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar hkdf = require(\"js-crypto-hkdf\");\n\nvar cryptoProvider = new miscreant.PolyfillCryptoProvider();\nvar hkdfSalt = Uint8Array.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4b, 0xea, 0xd8, 0xdf, 0x69, 0x99, 0x08, 0x52, 0xc2, 0x02, 0xdb, 0x0e, 0x00, 0x97, 0xc1, 0xa1, 0x2e, 0xa6, 0x37, 0xd7, 0xe9, 0x6d]);\n\nvar EnigmaUtils = /*#__PURE__*/function () {\n  function EnigmaUtils(apiUrl, seed) {\n    _classCallCheck(this, EnigmaUtils);\n\n    this.consensusIoPubKey = new Uint8Array(); // cache\n\n    this.apiUrl = apiUrl;\n\n    if (!seed) {\n      this.seed = EnigmaUtils.GenerateNewSeed();\n    } else {\n      this.seed = seed;\n    }\n\n    var _EnigmaUtils$Generate = EnigmaUtils.GenerateNewKeyPairFromSeed(this.seed),\n        privkey = _EnigmaUtils$Generate.privkey,\n        pubkey = _EnigmaUtils$Generate.pubkey;\n\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n\n  _createClass(EnigmaUtils, [{\n    key: \"getConsensusIoPubKey\",\n    value: function () {\n      var _getConsensusIoPubKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$axios_1$defaul, ioExchPubkey;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.consensusIoPubKey.length === 32)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.consensusIoPubKey);\n\n              case 2:\n                _context.next = 4;\n                return axios_1.default.get(this.apiUrl + \"/reg/consensus-io-exch-pubkey\", {\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  }\n                });\n\n              case 4:\n                _yield$axios_1$defaul = _context.sent;\n                ioExchPubkey = _yield$axios_1$defaul.data.result.ioExchPubkey;\n                this.consensusIoPubKey = encoding_1.Encoding.fromBase64(ioExchPubkey);\n                return _context.abrupt(\"return\", this.consensusIoPubKey);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getConsensusIoPubKey() {\n        return _getConsensusIoPubKey.apply(this, arguments);\n      }\n\n      return getConsensusIoPubKey;\n    }()\n  }, {\n    key: \"getTxEncryptionKey\",\n    value: function () {\n      var _getTxEncryptionKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(nonce) {\n        var consensusIoPubKey, txEncryptionIkm, _yield$hkdf$compute, txEncryptionKey;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getConsensusIoPubKey();\n\n              case 2:\n                consensusIoPubKey = _context2.sent;\n                txEncryptionIkm = curve25519_js_1.sharedKey(this.privkey, consensusIoPubKey);\n                _context2.next = 6;\n                return hkdf.compute(Uint8Array.from([].concat(_toConsumableArray(txEncryptionIkm), _toConsumableArray(nonce))), \"SHA-256\", 32, \"\", hkdfSalt);\n\n              case 6:\n                _yield$hkdf$compute = _context2.sent;\n                txEncryptionKey = _yield$hkdf$compute.key;\n                return _context2.abrupt(\"return\", txEncryptionKey);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getTxEncryptionKey(_x) {\n        return _getTxEncryptionKey.apply(this, arguments);\n      }\n\n      return getTxEncryptionKey;\n    }()\n  }, {\n    key: \"encrypt\",\n    value: function () {\n      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(contractCodeHash, msg) {\n        var nonce, txEncryptionKey, siv, plaintext, ciphertext;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                nonce = secureRandom(32, {\n                  type: \"Uint8Array\"\n                });\n                _context3.next = 3;\n                return this.getTxEncryptionKey(nonce);\n\n              case 3:\n                txEncryptionKey = _context3.sent;\n                _context3.next = 6;\n                return miscreant.SIV.importKey(txEncryptionKey, \"AES-SIV\", cryptoProvider);\n\n              case 6:\n                siv = _context3.sent;\n                plaintext = encoding_1.Encoding.toUtf8(contractCodeHash + JSON.stringify(msg));\n                _context3.next = 10;\n                return siv.seal(plaintext, [new Uint8Array()]);\n\n              case 10:\n                ciphertext = _context3.sent;\n                return _context3.abrupt(\"return\", Uint8Array.from([].concat(_toConsumableArray(nonce), _toConsumableArray(this.pubkey), _toConsumableArray(ciphertext))));\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function encrypt(_x2, _x3) {\n        return _encrypt.apply(this, arguments);\n      }\n\n      return encrypt;\n    }()\n  }, {\n    key: \"decrypt\",\n    value: function () {\n      var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ciphertext, nonce) {\n        var txEncryptionKey, siv, plaintext;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(ciphertext.length === 0)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", new Uint8Array());\n\n              case 2:\n                _context4.next = 4;\n                return this.getTxEncryptionKey(nonce);\n\n              case 4:\n                txEncryptionKey = _context4.sent;\n                _context4.next = 7;\n                return miscreant.SIV.importKey(txEncryptionKey, \"AES-SIV\", cryptoProvider);\n\n              case 7:\n                siv = _context4.sent;\n                _context4.next = 10;\n                return siv.open(ciphertext, [new Uint8Array()]);\n\n              case 10:\n                plaintext = _context4.sent;\n                return _context4.abrupt(\"return\", plaintext);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function decrypt(_x4, _x5) {\n        return _decrypt.apply(this, arguments);\n      }\n\n      return decrypt;\n    }()\n  }, {\n    key: \"getPubkey\",\n    value: function getPubkey() {\n      return Promise.resolve(this.pubkey);\n    }\n  }], [{\n    key: \"GenerateNewKeyPair\",\n    value: function GenerateNewKeyPair() {\n      return EnigmaUtils.GenerateNewKeyPairFromSeed(EnigmaUtils.GenerateNewSeed());\n    }\n  }, {\n    key: \"GenerateNewSeed\",\n    value: function GenerateNewSeed() {\n      return secureRandom(32, {\n        type: \"Uint8Array\"\n      });\n    }\n  }, {\n    key: \"GenerateNewKeyPairFromSeed\",\n    value: function GenerateNewKeyPairFromSeed(seed) {\n      var _curve25519_js_1$gene = curve25519_js_1.generateKeyPair(seed),\n          privkey = _curve25519_js_1$gene.private,\n          pubkey = _curve25519_js_1$gene.public;\n\n      return {\n        privkey: privkey,\n        pubkey: pubkey\n      };\n    }\n  }]);\n\n  return EnigmaUtils;\n}();\n\nexports.default = EnigmaUtils;\nmodule.exports = EnigmaUtils;","map":{"version":3,"sources":["../src/enigmautils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst miscreant = require(\"miscreant\");\nconst curve25519_js_1 = require(\"curve25519-js\");\nconst encoding_1 = require(\"@iov/encoding\");\nconst secureRandom = require(\"secure-random\");\nconst axios_1 = __importDefault(require(\"axios\"));\nconst hkdf = require(\"js-crypto-hkdf\");\nconst cryptoProvider = new miscreant.PolyfillCryptoProvider();\nconst hkdfSalt = Uint8Array.from([\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x02,\n    0x4b,\n    0xea,\n    0xd8,\n    0xdf,\n    0x69,\n    0x99,\n    0x08,\n    0x52,\n    0xc2,\n    0x02,\n    0xdb,\n    0x0e,\n    0x00,\n    0x97,\n    0xc1,\n    0xa1,\n    0x2e,\n    0xa6,\n    0x37,\n    0xd7,\n    0xe9,\n    0x6d,\n]);\nclass EnigmaUtils {\n    constructor(apiUrl, seed) {\n        this.consensusIoPubKey = new Uint8Array(); // cache\n        this.apiUrl = apiUrl;\n        if (!seed) {\n            this.seed = EnigmaUtils.GenerateNewSeed();\n        }\n        else {\n            this.seed = seed;\n        }\n        const { privkey, pubkey } = EnigmaUtils.GenerateNewKeyPairFromSeed(this.seed);\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n    }\n    static GenerateNewKeyPair() {\n        return EnigmaUtils.GenerateNewKeyPairFromSeed(EnigmaUtils.GenerateNewSeed());\n    }\n    static GenerateNewSeed() {\n        return secureRandom(32, { type: \"Uint8Array\" });\n    }\n    static GenerateNewKeyPairFromSeed(seed) {\n        const { private: privkey, public: pubkey } = curve25519_js_1.generateKeyPair(seed);\n        return { privkey, pubkey };\n    }\n    async getConsensusIoPubKey() {\n        if (this.consensusIoPubKey.length === 32) {\n            return this.consensusIoPubKey;\n        }\n        const { data: { result: { ioExchPubkey }, }, } = await axios_1.default.get(this.apiUrl + \"/reg/consensus-io-exch-pubkey\", {\n            headers: { \"Content-Type\": \"application/json\" },\n        });\n        this.consensusIoPubKey = encoding_1.Encoding.fromBase64(ioExchPubkey);\n        return this.consensusIoPubKey;\n    }\n    async getTxEncryptionKey(nonce) {\n        const consensusIoPubKey = await this.getConsensusIoPubKey();\n        const txEncryptionIkm = curve25519_js_1.sharedKey(this.privkey, consensusIoPubKey);\n        const { key: txEncryptionKey } = await hkdf.compute(Uint8Array.from([...txEncryptionIkm, ...nonce]), \"SHA-256\", 32, \"\", hkdfSalt);\n        return txEncryptionKey;\n    }\n    async encrypt(contractCodeHash, msg) {\n        const nonce = secureRandom(32, {\n            type: \"Uint8Array\",\n        });\n        const txEncryptionKey = await this.getTxEncryptionKey(nonce);\n        const siv = await miscreant.SIV.importKey(txEncryptionKey, \"AES-SIV\", cryptoProvider);\n        const plaintext = encoding_1.Encoding.toUtf8(contractCodeHash + JSON.stringify(msg));\n        const ciphertext = await siv.seal(plaintext, [new Uint8Array()]);\n        // ciphertext = nonce(32) || wallet_pubkey(32) || ciphertext\n        return Uint8Array.from([...nonce, ...this.pubkey, ...ciphertext]);\n    }\n    async decrypt(ciphertext, nonce) {\n        if (ciphertext.length === 0) {\n            return new Uint8Array();\n        }\n        const txEncryptionKey = await this.getTxEncryptionKey(nonce);\n        const siv = await miscreant.SIV.importKey(txEncryptionKey, \"AES-SIV\", cryptoProvider);\n        const plaintext = await siv.open(ciphertext, [new Uint8Array()]);\n        return plaintext;\n    }\n    getPubkey() {\n        return Promise.resolve(this.pubkey);\n    }\n}\nexports.default = EnigmaUtils;\nmodule.exports = EnigmaUtils;\n//# sourceMappingURL=enigmautils.js.map"]},"metadata":{},"sourceType":"script"}