{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * AES-CTR using a WebCrypto (or similar) API\n */\n\nclass WebCryptoAesCtr {\n  constructor(key, crypto) {\n    this.key = key;\n    this.crypto = crypto;\n  }\n\n  static importKey(crypto, keyData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Only AES-128 and AES-256 supported. AES-192 is not.\n      if (keyData.length !== 16 && keyData.length !== 32) {\n        throw new Error(`Miscreant: invalid key length: ${keyData.length} (expected 16 or 32 bytes)`);\n      }\n\n      const key = yield crypto.subtle.importKey(\"raw\", keyData, \"AES-CTR\", false, [\"encrypt\"]);\n      return new WebCryptoAesCtr(key, crypto);\n    });\n  }\n\n  encryptCtr(iv, plaintext) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const ciphertext = yield this.crypto.subtle.encrypt({\n        name: \"AES-CTR\",\n        counter: iv,\n        length: 16\n      }, this.key, plaintext);\n      return new Uint8Array(ciphertext);\n    });\n  }\n\n  clear() {\n    // TODO: actually clear something. Do we need to?\n    return this;\n  }\n\n}\n\nexports.default = WebCryptoAesCtr;","map":{"version":3,"sources":["/Users/aidansalzmann/redacted-mint/node_modules/miscreant/release/providers/webcrypto/aes_ctr.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","WebCryptoAesCtr","constructor","key","crypto","importKey","keyData","length","Error","subtle","encryptCtr","iv","plaintext","ciphertext","encrypt","name","counter","Uint8Array","clear","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * AES-CTR using a WebCrypto (or similar) API\n */\nclass WebCryptoAesCtr {\n    constructor(key, crypto) {\n        this.key = key;\n        this.crypto = crypto;\n    }\n    static importKey(crypto, keyData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Only AES-128 and AES-256 supported. AES-192 is not.\n            if (keyData.length !== 16 && keyData.length !== 32) {\n                throw new Error(`Miscreant: invalid key length: ${keyData.length} (expected 16 or 32 bytes)`);\n            }\n            const key = yield crypto.subtle.importKey(\"raw\", keyData, \"AES-CTR\", false, [\"encrypt\"]);\n            return new WebCryptoAesCtr(key, crypto);\n        });\n    }\n    encryptCtr(iv, plaintext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ciphertext = yield this.crypto.subtle.encrypt({ name: \"AES-CTR\", counter: iv, length: 16 }, this.key, plaintext);\n            return new Uint8Array(ciphertext);\n        });\n    }\n    clear() {\n        // TODO: actually clear something. Do we need to?\n        return this;\n    }\n}\nexports.default = WebCryptoAesCtr;\n"]},"metadata":{},"sourceType":"script"}