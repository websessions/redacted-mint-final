{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst bech32 = __importStar(require(\"bech32\"));\n\nclass Bech32 {\n  static encode(prefix, data) {\n    const address = bech32.encode(prefix, bech32.toWords(data));\n    return address;\n  }\n\n  static decode(address) {\n    const decodedAddress = bech32.decode(address);\n    return {\n      prefix: decodedAddress.prefix,\n      data: new Uint8Array(bech32.fromWords(decodedAddress.words))\n    };\n  }\n\n}\n\nexports.Bech32 = Bech32;","map":{"version":3,"sources":["../src/bech32.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAEA,MAAa,MAAb,CAAmB;AACG,SAAN,MAAM,CAAC,MAAD,EAAiB,IAAjB,EAAiC;AACnD,UAAM,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,MAAM,CAAC,OAAP,CAAe,IAAf,CAAtB,CAAhB;AACA,WAAO,OAAP;AACD;;AAEmB,SAAN,MAAM,CAAC,OAAD,EAAgB;AAClC,UAAM,cAAc,GAAG,MAAM,CAAC,MAAP,CAAc,OAAd,CAAvB;AACA,WAAO;AACL,MAAA,MAAM,EAAE,cAAc,CAAC,MADlB;AAEL,MAAA,IAAI,EAAE,IAAI,UAAJ,CAAe,MAAM,CAAC,SAAP,CAAiB,cAAc,CAAC,KAAhC,CAAf;AAFD,KAAP;AAID;;AAZgB;;AAAnB,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bech32 = __importStar(require(\"bech32\"));\nclass Bech32 {\n    static encode(prefix, data) {\n        const address = bech32.encode(prefix, bech32.toWords(data));\n        return address;\n    }\n    static decode(address) {\n        const decodedAddress = bech32.decode(address);\n        return {\n            prefix: decodedAddress.prefix,\n            data: new Uint8Array(bech32.fromWords(decodedAddress.words)),\n        };\n    }\n}\nexports.Bech32 = Bech32;\n//# sourceMappingURL=bech32.js.map"]},"metadata":{},"sourceType":"script"}