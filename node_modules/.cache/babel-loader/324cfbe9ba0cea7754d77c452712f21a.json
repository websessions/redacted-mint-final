{"ast":null,"code":"\"use strict\"; // Copyright (C) 2017-2018 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst constant_time_1 = require(\"./internals/constant-time\");\n\nconst wipe_1 = require(\"./internals/wipe\");\n\nconst xor_1 = require(\"./internals/xor\");\n\nconst exceptions_1 = require(\"./exceptions\");\n\nconst block_1 = require(\"./internals/block\");\n\nconst cmac_1 = require(\"./mac/cmac\");\n\nconst pmac_1 = require(\"./mac/pmac\");\n\nconst webcrypto_1 = require(\"./providers/webcrypto\");\n/** Maximum number of associated data items */\n\n\nexports.MAX_ASSOCIATED_DATA = 126;\n/** The AES-SIV mode of authenticated encryption */\n\nclass SIV {\n  /** Create a new AES-SIV instance with the given 32-byte or 64-byte key */\n  static importKey(keyData, alg, provider = new webcrypto_1.WebCryptoProvider()) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // We only support AES-128 and AES-256. AES-SIV needs a key 2X as long the intended security level\n      if (keyData.length !== 32 && keyData.length !== 64) {\n        throw new Error(`AES-SIV: key must be 32 or 64-bytes (got ${keyData.length}`);\n      }\n\n      const macKey = keyData.subarray(0, keyData.length / 2 | 0);\n      const encKey = keyData.subarray(keyData.length / 2 | 0);\n      let mac;\n\n      switch (alg) {\n        case \"AES-SIV\":\n          mac = yield cmac_1.CMAC.importKey(provider, macKey);\n          break;\n\n        case \"AES-CMAC-SIV\":\n          mac = yield cmac_1.CMAC.importKey(provider, macKey);\n          break;\n\n        case \"AES-PMAC-SIV\":\n          mac = yield pmac_1.PMAC.importKey(provider, macKey);\n          break;\n\n        default:\n          throw new exceptions_1.NotImplementedError(`Miscreant: algorithm not supported: ${alg}`);\n      }\n\n      const ctr = yield provider.importCTRKey(encKey);\n      return new SIV(mac, ctr);\n    });\n  }\n\n  constructor(mac, ctr) {\n    this._mac = mac;\n    this._ctr = ctr;\n    this._tmp1 = new block_1.default();\n    this._tmp2 = new block_1.default();\n  }\n  /** Encrypt and authenticate data using AES-SIV */\n\n\n  seal(plaintext, associatedData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (associatedData.length > exports.MAX_ASSOCIATED_DATA) {\n        throw new Error(\"AES-SIV: too many associated data items\");\n      } // Allocate space for sealed ciphertext.\n\n\n      const resultLength = block_1.default.SIZE + plaintext.length;\n      const result = new Uint8Array(resultLength); // Authenticate.\n\n      const iv = yield this._s2v(associatedData, plaintext);\n      result.set(iv); // Encrypt.\n\n      zeroIVBits(iv);\n      result.set(yield this._ctr.encryptCtr(iv, plaintext), iv.length);\n      return result;\n    });\n  }\n  /** Decrypt and authenticate data using AES-SIV */\n\n\n  open(sealed, associatedData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (associatedData.length > exports.MAX_ASSOCIATED_DATA) {\n        throw new Error(\"AES-SIV: too many associated data items\");\n      }\n\n      if (sealed.length < block_1.default.SIZE) {\n        throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext is truncated\");\n      } // Decrypt.\n\n\n      const tag = sealed.subarray(0, block_1.default.SIZE);\n      const iv = this._tmp1.data;\n      iv.set(tag);\n      zeroIVBits(iv); // NOTE: \"encryptCtr\" is intentional. CTR encryption/decryption are the same\n\n      const result = yield this._ctr.encryptCtr(iv, sealed.subarray(block_1.default.SIZE)); // Authenticate.\n\n      const expectedTag = yield this._s2v(associatedData, result);\n\n      if (!constant_time_1.equal(expectedTag, tag)) {\n        wipe_1.wipe(result);\n        throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext verification failure!\");\n      }\n\n      return result;\n    });\n  }\n  /** Make a best effort to wipe memory used by this instance */\n\n\n  clear() {\n    this._tmp1.clear();\n\n    this._tmp2.clear();\n\n    this._ctr.clear();\n\n    this._mac.clear();\n\n    return this;\n  }\n  /**\n   * The S2V operation consists of the doubling and XORing of the outputs\n   * of the pseudo-random function CMAC (or PMAC in the case of AES-PMAC-SIV).\n   *\n   * See Section 2.4 of RFC 5297 for more information\n   */\n\n\n  _s2v(associated_data, plaintext) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._mac.reset();\n\n      this._tmp1.clear(); // Note: the standalone S2V returns CMAC(1) if the number of passed\n      // vectors is zero, however in SIV construction this case is never\n      // triggered, since we always pass plaintext as the last vector (even\n      // if it's zero-length), so we omit this case.\n\n\n      yield this._mac.update(this._tmp1.data);\n\n      this._tmp2.clear();\n\n      this._tmp2.data.set(yield this._mac.finish());\n\n      this._mac.reset();\n\n      for (const ad of associated_data) {\n        yield this._mac.update(ad);\n\n        this._tmp1.clear();\n\n        this._tmp1.data.set(yield this._mac.finish());\n\n        this._mac.reset();\n\n        this._tmp2.dbl();\n\n        xor_1.xor(this._tmp2.data, this._tmp1.data);\n      }\n\n      this._tmp1.clear();\n\n      if (plaintext.length >= block_1.default.SIZE) {\n        const n = plaintext.length - block_1.default.SIZE;\n\n        this._tmp1.data.set(plaintext.subarray(n));\n\n        yield this._mac.update(plaintext.subarray(0, n));\n      } else {\n        this._tmp1.data.set(plaintext);\n\n        this._tmp1.data[plaintext.length] = 0x80;\n\n        this._tmp2.dbl();\n      }\n\n      xor_1.xor(this._tmp1.data, this._tmp2.data);\n      yield this._mac.update(this._tmp1.data);\n      return this._mac.finish();\n    });\n  }\n\n}\n\nexports.SIV = SIV;\n/** Zero out the top bits in the last 32-bit words of the IV */\n\nfunction zeroIVBits(iv) {\n  // \"We zero-out the top bit in each of the last two 32-bit words\n  // of the IV before assigning it to Ctr\"\n  //  â€” http://web.cs.ucdavis.edu/~rogaway/papers/siv.pdf\n  iv[iv.length - 8] &= 0x7f;\n  iv[iv.length - 4] &= 0x7f;\n}","map":{"version":3,"sources":["/Users/aidansalzmann/button-minter/6_wallets/reactjs_keplr/secret-dapp/node_modules/miscreant/release/siv.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","constant_time_1","require","wipe_1","xor_1","exceptions_1","block_1","cmac_1","pmac_1","webcrypto_1","MAX_ASSOCIATED_DATA","SIV","importKey","keyData","alg","provider","WebCryptoProvider","length","Error","macKey","subarray","encKey","mac","CMAC","PMAC","NotImplementedError","ctr","importCTRKey","constructor","_mac","_ctr","_tmp1","default","_tmp2","seal","plaintext","associatedData","resultLength","SIZE","Uint8Array","iv","_s2v","set","zeroIVBits","encryptCtr","open","sealed","IntegrityError","tag","data","expectedTag","equal","wipe","clear","associated_data","reset","update","finish","ad","dbl","xor","n"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (C) 2017-2018 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constant_time_1 = require(\"./internals/constant-time\");\nconst wipe_1 = require(\"./internals/wipe\");\nconst xor_1 = require(\"./internals/xor\");\nconst exceptions_1 = require(\"./exceptions\");\nconst block_1 = require(\"./internals/block\");\nconst cmac_1 = require(\"./mac/cmac\");\nconst pmac_1 = require(\"./mac/pmac\");\nconst webcrypto_1 = require(\"./providers/webcrypto\");\n/** Maximum number of associated data items */\nexports.MAX_ASSOCIATED_DATA = 126;\n/** The AES-SIV mode of authenticated encryption */\nclass SIV {\n    /** Create a new AES-SIV instance with the given 32-byte or 64-byte key */\n    static importKey(keyData, alg, provider = new webcrypto_1.WebCryptoProvider()) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // We only support AES-128 and AES-256. AES-SIV needs a key 2X as long the intended security level\n            if (keyData.length !== 32 && keyData.length !== 64) {\n                throw new Error(`AES-SIV: key must be 32 or 64-bytes (got ${keyData.length}`);\n            }\n            const macKey = keyData.subarray(0, keyData.length / 2 | 0);\n            const encKey = keyData.subarray(keyData.length / 2 | 0);\n            let mac;\n            switch (alg) {\n                case \"AES-SIV\":\n                    mac = yield cmac_1.CMAC.importKey(provider, macKey);\n                    break;\n                case \"AES-CMAC-SIV\":\n                    mac = yield cmac_1.CMAC.importKey(provider, macKey);\n                    break;\n                case \"AES-PMAC-SIV\":\n                    mac = yield pmac_1.PMAC.importKey(provider, macKey);\n                    break;\n                default:\n                    throw new exceptions_1.NotImplementedError(`Miscreant: algorithm not supported: ${alg}`);\n            }\n            const ctr = yield provider.importCTRKey(encKey);\n            return new SIV(mac, ctr);\n        });\n    }\n    constructor(mac, ctr) {\n        this._mac = mac;\n        this._ctr = ctr;\n        this._tmp1 = new block_1.default();\n        this._tmp2 = new block_1.default();\n    }\n    /** Encrypt and authenticate data using AES-SIV */\n    seal(plaintext, associatedData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (associatedData.length > exports.MAX_ASSOCIATED_DATA) {\n                throw new Error(\"AES-SIV: too many associated data items\");\n            }\n            // Allocate space for sealed ciphertext.\n            const resultLength = block_1.default.SIZE + plaintext.length;\n            const result = new Uint8Array(resultLength);\n            // Authenticate.\n            const iv = yield this._s2v(associatedData, plaintext);\n            result.set(iv);\n            // Encrypt.\n            zeroIVBits(iv);\n            result.set(yield this._ctr.encryptCtr(iv, plaintext), iv.length);\n            return result;\n        });\n    }\n    /** Decrypt and authenticate data using AES-SIV */\n    open(sealed, associatedData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (associatedData.length > exports.MAX_ASSOCIATED_DATA) {\n                throw new Error(\"AES-SIV: too many associated data items\");\n            }\n            if (sealed.length < block_1.default.SIZE) {\n                throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext is truncated\");\n            }\n            // Decrypt.\n            const tag = sealed.subarray(0, block_1.default.SIZE);\n            const iv = this._tmp1.data;\n            iv.set(tag);\n            zeroIVBits(iv);\n            // NOTE: \"encryptCtr\" is intentional. CTR encryption/decryption are the same\n            const result = yield this._ctr.encryptCtr(iv, sealed.subarray(block_1.default.SIZE));\n            // Authenticate.\n            const expectedTag = yield this._s2v(associatedData, result);\n            if (!constant_time_1.equal(expectedTag, tag)) {\n                wipe_1.wipe(result);\n                throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext verification failure!\");\n            }\n            return result;\n        });\n    }\n    /** Make a best effort to wipe memory used by this instance */\n    clear() {\n        this._tmp1.clear();\n        this._tmp2.clear();\n        this._ctr.clear();\n        this._mac.clear();\n        return this;\n    }\n    /**\n     * The S2V operation consists of the doubling and XORing of the outputs\n     * of the pseudo-random function CMAC (or PMAC in the case of AES-PMAC-SIV).\n     *\n     * See Section 2.4 of RFC 5297 for more information\n     */\n    _s2v(associated_data, plaintext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._mac.reset();\n            this._tmp1.clear();\n            // Note: the standalone S2V returns CMAC(1) if the number of passed\n            // vectors is zero, however in SIV construction this case is never\n            // triggered, since we always pass plaintext as the last vector (even\n            // if it's zero-length), so we omit this case.\n            yield this._mac.update(this._tmp1.data);\n            this._tmp2.clear();\n            this._tmp2.data.set(yield this._mac.finish());\n            this._mac.reset();\n            for (const ad of associated_data) {\n                yield this._mac.update(ad);\n                this._tmp1.clear();\n                this._tmp1.data.set(yield this._mac.finish());\n                this._mac.reset();\n                this._tmp2.dbl();\n                xor_1.xor(this._tmp2.data, this._tmp1.data);\n            }\n            this._tmp1.clear();\n            if (plaintext.length >= block_1.default.SIZE) {\n                const n = plaintext.length - block_1.default.SIZE;\n                this._tmp1.data.set(plaintext.subarray(n));\n                yield this._mac.update(plaintext.subarray(0, n));\n            }\n            else {\n                this._tmp1.data.set(plaintext);\n                this._tmp1.data[plaintext.length] = 0x80;\n                this._tmp2.dbl();\n            }\n            xor_1.xor(this._tmp1.data, this._tmp2.data);\n            yield this._mac.update(this._tmp1.data);\n            return this._mac.finish();\n        });\n    }\n}\nexports.SIV = SIV;\n/** Zero out the top bits in the last 32-bit words of the IV */\nfunction zeroIVBits(iv) {\n    // \"We zero-out the top bit in each of the last two 32-bit words\n    // of the IV before assigning it to Ctr\"\n    //  â€” http://web.cs.ucdavis.edu/~rogaway/papers/siv.pdf\n    iv[iv.length - 8] &= 0x7f;\n    iv[iv.length - 4] &= 0x7f;\n}\n"]},"metadata":{},"sourceType":"script"}