{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst encoding_1 = require(\"@iov/encoding\");\n\nconst {\n  fromBase64,\n  fromHex\n} = encoding_1.Encoding;\n\nfunction isStdTx(txValue) {\n  const {\n    memo,\n    msg,\n    fee,\n    signatures\n  } = txValue;\n  return typeof memo === \"string\" && Array.isArray(msg) && typeof fee === \"object\" && Array.isArray(signatures);\n}\n\nexports.isStdTx = isStdTx;\n\nfunction isMsgSend(msg) {\n  return msg.type === \"cosmos-sdk/MsgSend\";\n}\n\nexports.isMsgSend = isMsgSend;\n\nfunction isMsgStoreCode(msg) {\n  return msg.type === \"wasm/MsgStoreCode\";\n}\n\nexports.isMsgStoreCode = isMsgStoreCode;\n\nfunction isMsgInstantiateContract(msg) {\n  return msg.type === \"wasm/MsgInstantiateContract\";\n}\n\nexports.isMsgInstantiateContract = isMsgInstantiateContract;\n\nfunction isMsgExecuteContract(msg) {\n  return msg.type === \"wasm/MsgExecuteContract\";\n}\n\nexports.isMsgExecuteContract = isMsgExecuteContract;\n\nfunction extractContractMsg(msg) {\n  if (msg.type === \"wasm/MsgExecuteContract\") {\n    return encoding_1.Encoding.fromBase64(msg.value.msg);\n  }\n  /*  if (msg.type === \"wasm/MsgInstantiateContract\")  */\n  else {\n      return encoding_1.Encoding.fromBase64(msg.value.init_msg);\n    }\n}\n\nexports.extractContractMsg = extractContractMsg;\nexports.pubkeyType = {\n  /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/ed25519/ed25519.go#L22 */\n  secp256k1: \"tendermint/PubKeySecp256k1\",\n\n  /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/secp256k1/secp256k1.go#L23 */\n  ed25519: \"tendermint/PubKeyEd25519\",\n\n  /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/sr25519/codec.go#L12 */\n  sr25519: \"tendermint/PubKeySr25519\"\n};\nexports.pubkeyTypes = [exports.pubkeyType.secp256k1, exports.pubkeyType.ed25519, exports.pubkeyType.sr25519];\n\nfunction parseWasmData({\n  key,\n  val\n}) {\n  return {\n    key: fromHex(key),\n    val: fromBase64(val)\n  };\n}\n\nexports.parseWasmData = parseWasmData;","map":{"version":3,"sources":["../src/types.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,MAAM;AAAE,EAAA,UAAF;AAAc,EAAA;AAAd,IAA0B,UAAA,CAAA,QAAhC;;AAUA,SAAgB,OAAhB,CAAwB,OAAxB,EAAwC;AACtC,QAAM;AAAE,IAAA,IAAF;AAAQ,IAAA,GAAR;AAAa,IAAA,GAAb;AAAkB,IAAA;AAAlB,MAAiC,OAAvC;AACA,SACE,OAAO,IAAP,KAAgB,QAAhB,IAA4B,KAAK,CAAC,OAAN,CAAc,GAAd,CAA5B,IAAkD,OAAO,GAAP,KAAe,QAAjE,IAA6E,KAAK,CAAC,OAAN,CAAc,UAAd,CAD/E;AAGD;;AALD,OAAA,CAAA,OAAA,GAAA,OAAA;;AA8FA,SAAgB,SAAhB,CAA0B,GAA1B,EAAkC;AAChC,SAAQ,GAAe,CAAC,IAAhB,KAAyB,oBAAjC;AACD;;AAFD,OAAA,CAAA,SAAA,GAAA,SAAA;;AAIA,SAAgB,cAAhB,CAA+B,GAA/B,EAAuC;AACrC,SAAQ,GAAoB,CAAC,IAArB,KAA8B,mBAAtC;AACD;;AAFD,OAAA,CAAA,cAAA,GAAA,cAAA;;AAIA,SAAgB,wBAAhB,CAAyC,GAAzC,EAAiD;AAC/C,SAAQ,GAA8B,CAAC,IAA/B,KAAwC,6BAAhD;AACD;;AAFD,OAAA,CAAA,wBAAA,GAAA,wBAAA;;AAIA,SAAgB,oBAAhB,CAAqC,GAArC,EAA6C;AAC3C,SAAQ,GAA0B,CAAC,IAA3B,KAAoC,yBAA5C;AACD;;AAFD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAIA,SAAgB,kBAAhB,CAAmC,GAAnC,EAAmF;AACjF,MAAI,GAAG,CAAC,IAAJ,KAAa,yBAAjB,EAA4C;AAC1C,WAAO,UAAA,CAAA,QAAA,CAAS,UAAT,CAAqB,GAA0B,CAAC,KAA3B,CAAiC,GAAtD,CAAP;AACD;AAAC;AAFF,OAE+D;AAC7D,aAAO,UAAA,CAAA,QAAA,CAAS,UAAT,CAAqB,GAA8B,CAAC,KAA/B,CAAqC,QAA1D,CAAP;AACD;AACF;;AAND,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAiCa,OAAA,CAAA,UAAA,GAAa;AACxB;AACA,EAAA,SAAS,EAAE,4BAFa;;AAGxB;AACA,EAAA,OAAO,EAAE,0BAJe;;AAKxB;AACA,EAAA,OAAO,EAAE;AANe,CAAb;AASA,OAAA,CAAA,WAAA,GAAiC,CAAC,OAAA,CAAA,UAAA,CAAW,SAAZ,EAAuB,OAAA,CAAA,UAAA,CAAW,OAAlC,EAA2C,OAAA,CAAA,UAAA,CAAW,OAAtD,CAAjC;;AAeb,SAAgB,aAAhB,CAA8B;AAAE,EAAA,GAAF;AAAO,EAAA;AAAP,CAA9B,EAAoD;AAClD,SAAO;AACL,IAAA,GAAG,EAAE,OAAO,CAAC,GAAD,CADP;AAEL,IAAA,GAAG,EAAE,UAAU,CAAC,GAAD;AAFV,GAAP;AAID;;AALD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst encoding_1 = require(\"@iov/encoding\");\nconst { fromBase64, fromHex } = encoding_1.Encoding;\nfunction isStdTx(txValue) {\n    const { memo, msg, fee, signatures } = txValue;\n    return (typeof memo === \"string\" && Array.isArray(msg) && typeof fee === \"object\" && Array.isArray(signatures));\n}\nexports.isStdTx = isStdTx;\nfunction isMsgSend(msg) {\n    return msg.type === \"cosmos-sdk/MsgSend\";\n}\nexports.isMsgSend = isMsgSend;\nfunction isMsgStoreCode(msg) {\n    return msg.type === \"wasm/MsgStoreCode\";\n}\nexports.isMsgStoreCode = isMsgStoreCode;\nfunction isMsgInstantiateContract(msg) {\n    return msg.type === \"wasm/MsgInstantiateContract\";\n}\nexports.isMsgInstantiateContract = isMsgInstantiateContract;\nfunction isMsgExecuteContract(msg) {\n    return msg.type === \"wasm/MsgExecuteContract\";\n}\nexports.isMsgExecuteContract = isMsgExecuteContract;\nfunction extractContractMsg(msg) {\n    if (msg.type === \"wasm/MsgExecuteContract\") {\n        return encoding_1.Encoding.fromBase64(msg.value.msg);\n    } /*  if (msg.type === \"wasm/MsgInstantiateContract\")  */\n    else {\n        return encoding_1.Encoding.fromBase64(msg.value.init_msg);\n    }\n}\nexports.extractContractMsg = extractContractMsg;\nexports.pubkeyType = {\n    /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/ed25519/ed25519.go#L22 */\n    secp256k1: \"tendermint/PubKeySecp256k1\",\n    /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/secp256k1/secp256k1.go#L23 */\n    ed25519: \"tendermint/PubKeyEd25519\",\n    /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/sr25519/codec.go#L12 */\n    sr25519: \"tendermint/PubKeySr25519\",\n};\nexports.pubkeyTypes = [exports.pubkeyType.secp256k1, exports.pubkeyType.ed25519, exports.pubkeyType.sr25519];\nfunction parseWasmData({ key, val }) {\n    return {\n        key: fromHex(key),\n        val: fromBase64(val),\n    };\n}\nexports.parseWasmData = parseWasmData;\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"script"}