{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar encoding_1 = require(\"@iov/encoding\");\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar elliptic_1 = __importDefault(require(\"elliptic\"));\n\nvar secp256k1signature_1 = require(\"./secp256k1signature\");\n\nvar secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\nvar secp256k1N = new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", \"hex\");\n\nvar Secp256k1 = /*#__PURE__*/function () {\n  function Secp256k1() {\n    _classCallCheck(this, Secp256k1);\n  }\n\n  _createClass(Secp256k1, null, [{\n    key: \"makeKeypair\",\n    value: function () {\n      var _makeKeypair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(privkey) {\n        var keypair, privkeyAsBigInteger, out;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(privkey.length !== 32)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"input data is not a valid secp256k1 private key\");\n\n              case 2:\n                keypair = secp256k1.keyFromPrivate(privkey);\n\n                if (!(keypair.validate().result !== true)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"input data is not a valid secp256k1 private key\");\n\n              case 5:\n                // range test that is not part of the elliptic implementation\n                privkeyAsBigInteger = new bn_js_1.default(privkey);\n\n                if (!privkeyAsBigInteger.gte(secp256k1N)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error(\"input data is not a valid secp256k1 private key\");\n\n              case 8:\n                out = {\n                  privkey: encoding_1.Encoding.fromHex(keypair.getPrivate(\"hex\")),\n                  // encodes uncompressed as\n                  // - 1-byte prefix \"04\"\n                  // - 32-byte x coordinate\n                  // - 32-byte y coordinate\n                  pubkey: encoding_1.Encoding.fromHex(keypair.getPublic().encode(\"hex\"))\n                };\n                return _context.abrupt(\"return\", out);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function makeKeypair(_x) {\n        return _makeKeypair.apply(this, arguments);\n      }\n\n      return makeKeypair;\n    }() // Creates a signature that is\n    // - deterministic (RFC 6979)\n    // - lowS signature\n    // - DER encoded\n\n  }, {\n    key: \"createSignature\",\n    value: function () {\n      var _createSignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(messageHash, privkey) {\n        var keypair, signature;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(messageHash.length === 0)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Message hash must not be empty\");\n\n              case 2:\n                if (!(messageHash.length > 32)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Message hash length must not exceed 32 bytes\");\n\n              case 4:\n                keypair = secp256k1.keyFromPrivate(privkey); // the `canonical` option ensures creation of lowS signature representations\n\n                signature = keypair.sign(messageHash, {\n                  canonical: true\n                });\n                return _context2.abrupt(\"return\", new secp256k1signature_1.ExtendedSecp256k1Signature(Uint8Array.from(signature.r.toArray()), Uint8Array.from(signature.s.toArray()), signature.recoveryParam));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createSignature(_x2, _x3) {\n        return _createSignature.apply(this, arguments);\n      }\n\n      return createSignature;\n    }()\n  }, {\n    key: \"verifySignature\",\n    value: function () {\n      var _verifySignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(signature, messageHash, pubkey) {\n        var keypair;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(messageHash.length === 0)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Message hash must not be empty\");\n\n              case 2:\n                if (!(messageHash.length > 32)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Message hash length must not exceed 32 bytes\");\n\n              case 4:\n                keypair = secp256k1.keyFromPublic(pubkey); // From https://github.com/indutny/elliptic:\n                //\n                //     Sign the message's hash (input must be an array, or a hex-string)\n                //\n                //     Signature MUST be either:\n                //     1) DER-encoded signature as hex-string; or\n                //     2) DER-encoded signature as buffer; or\n                //     3) object with two hex-string properties (r and s); or\n                //     4) object with two buffer properties (r and s)\n                //\n                // Uint8Array is not a Buffer, but elliptic seems to be happy with the interface\n                // common to both types. Uint8Array is not an array of ints but the interface is\n                // similar\n\n                _context3.prev = 5;\n                return _context3.abrupt(\"return\", keypair.verify(messageHash, signature.toDer()));\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](5);\n                return _context3.abrupt(\"return\", false);\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[5, 9]]);\n      }));\n\n      function verifySignature(_x4, _x5, _x6) {\n        return _verifySignature.apply(this, arguments);\n      }\n\n      return verifySignature;\n    }()\n  }, {\n    key: \"recoverPubkey\",\n    value: function recoverPubkey(signature, messageHash) {\n      var signatureForElliptic = {\n        r: encoding_1.Encoding.toHex(signature.r()),\n        s: encoding_1.Encoding.toHex(signature.s())\n      };\n      var point = secp256k1.recoverPubKey(messageHash, signatureForElliptic, signature.recovery);\n      var keypair = secp256k1.keyFromPublic(point);\n      return encoding_1.Encoding.fromHex(keypair.getPublic(false, \"hex\"));\n    }\n  }, {\n    key: \"compressPubkey\",\n    value: function compressPubkey(pubkey) {\n      switch (pubkey.length) {\n        case 33:\n          return pubkey;\n\n        case 65:\n          return Uint8Array.from(secp256k1.keyFromPublic(pubkey).pub.encodeCompressed());\n\n        default:\n          throw new Error(\"Invalid pubkey length\");\n      }\n    }\n  }, {\n    key: \"trimRecoveryByte\",\n    value: function trimRecoveryByte(signature) {\n      switch (signature.length) {\n        case 64:\n          return signature;\n\n        case 65:\n          return signature.slice(0, 64);\n\n        default:\n          throw new Error(\"Invalid signature length\");\n      }\n    }\n  }]);\n\n  return Secp256k1;\n}();\n\nexports.Secp256k1 = Secp256k1;","map":{"version":3,"sources":["../src/secp256k1.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst encoding_1 = require(\"@iov/encoding\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst elliptic_1 = __importDefault(require(\"elliptic\"));\nconst secp256k1signature_1 = require(\"./secp256k1signature\");\nconst secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\nconst secp256k1N = new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", \"hex\");\nclass Secp256k1 {\n    static async makeKeypair(privkey) {\n        if (privkey.length !== 32) {\n            // is this check missing in secp256k1.validatePrivateKey?\n            // https://github.com/bitjson/bitcoin-ts/issues/4\n            throw new Error(\"input data is not a valid secp256k1 private key\");\n        }\n        const keypair = secp256k1.keyFromPrivate(privkey);\n        if (keypair.validate().result !== true) {\n            throw new Error(\"input data is not a valid secp256k1 private key\");\n        }\n        // range test that is not part of the elliptic implementation\n        const privkeyAsBigInteger = new bn_js_1.default(privkey);\n        if (privkeyAsBigInteger.gte(secp256k1N)) {\n            // not strictly smaller than N\n            throw new Error(\"input data is not a valid secp256k1 private key\");\n        }\n        const out = {\n            privkey: encoding_1.Encoding.fromHex(keypair.getPrivate(\"hex\")),\n            // encodes uncompressed as\n            // - 1-byte prefix \"04\"\n            // - 32-byte x coordinate\n            // - 32-byte y coordinate\n            pubkey: encoding_1.Encoding.fromHex(keypair.getPublic().encode(\"hex\")),\n        };\n        return out;\n    }\n    // Creates a signature that is\n    // - deterministic (RFC 6979)\n    // - lowS signature\n    // - DER encoded\n    static async createSignature(messageHash, privkey) {\n        if (messageHash.length === 0) {\n            throw new Error(\"Message hash must not be empty\");\n        }\n        if (messageHash.length > 32) {\n            throw new Error(\"Message hash length must not exceed 32 bytes\");\n        }\n        const keypair = secp256k1.keyFromPrivate(privkey);\n        // the `canonical` option ensures creation of lowS signature representations\n        const signature = keypair.sign(messageHash, { canonical: true });\n        return new secp256k1signature_1.ExtendedSecp256k1Signature(Uint8Array.from(signature.r.toArray()), Uint8Array.from(signature.s.toArray()), signature.recoveryParam);\n    }\n    static async verifySignature(signature, messageHash, pubkey) {\n        if (messageHash.length === 0) {\n            throw new Error(\"Message hash must not be empty\");\n        }\n        if (messageHash.length > 32) {\n            throw new Error(\"Message hash length must not exceed 32 bytes\");\n        }\n        const keypair = secp256k1.keyFromPublic(pubkey);\n        // From https://github.com/indutny/elliptic:\n        //\n        //     Sign the message's hash (input must be an array, or a hex-string)\n        //\n        //     Signature MUST be either:\n        //     1) DER-encoded signature as hex-string; or\n        //     2) DER-encoded signature as buffer; or\n        //     3) object with two hex-string properties (r and s); or\n        //     4) object with two buffer properties (r and s)\n        //\n        // Uint8Array is not a Buffer, but elliptic seems to be happy with the interface\n        // common to both types. Uint8Array is not an array of ints but the interface is\n        // similar\n        try {\n            return keypair.verify(messageHash, signature.toDer());\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    static recoverPubkey(signature, messageHash) {\n        const signatureForElliptic = { r: encoding_1.Encoding.toHex(signature.r()), s: encoding_1.Encoding.toHex(signature.s()) };\n        const point = secp256k1.recoverPubKey(messageHash, signatureForElliptic, signature.recovery);\n        const keypair = secp256k1.keyFromPublic(point);\n        return encoding_1.Encoding.fromHex(keypair.getPublic(false, \"hex\"));\n    }\n    static compressPubkey(pubkey) {\n        switch (pubkey.length) {\n            case 33:\n                return pubkey;\n            case 65:\n                return Uint8Array.from(secp256k1.keyFromPublic(pubkey).pub.encodeCompressed());\n            default:\n                throw new Error(\"Invalid pubkey length\");\n        }\n    }\n    static trimRecoveryByte(signature) {\n        switch (signature.length) {\n            case 64:\n                return signature;\n            case 65:\n                return signature.slice(0, 64);\n            default:\n                throw new Error(\"Invalid signature length\");\n        }\n    }\n}\nexports.Secp256k1 = Secp256k1;\n//# sourceMappingURL=secp256k1.js.map"]},"metadata":{},"sourceType":"script"}