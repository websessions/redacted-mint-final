{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bip39 = __importStar(require(\"bip39\"));\n\nvar EnglishMnemonic = /*#__PURE__*/function () {\n  function EnglishMnemonic(mnemonic) {\n    _classCallCheck(this, EnglishMnemonic);\n\n    if (!EnglishMnemonic.mnemonicMatcher.test(mnemonic)) {\n      throw new Error(\"Invalid mnemonic format\");\n    }\n\n    var words = mnemonic.split(\" \");\n    var allowedWordsLengths = [12, 15, 18, 21, 24];\n\n    if (allowedWordsLengths.indexOf(words.length) === -1) {\n      throw new Error(\"Invalid word count in mnemonic (allowed: \".concat(allowedWordsLengths, \" got: \").concat(words.length, \")\"));\n    }\n\n    var _iterator = _createForOfIteratorHelper(words),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var word = _step.value;\n\n        if (EnglishMnemonic.wordlist.indexOf(word) === -1) {\n          throw new Error(\"Mnemonic contains invalid word\");\n        }\n      } // Throws with informative error message if mnemonic is not valid\n      // tslint:disable-next-line:no-unused-expression\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    bip39.mnemonicToEntropy(mnemonic);\n    this.data = mnemonic;\n  }\n\n  _createClass(EnglishMnemonic, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.data;\n    }\n  }]);\n\n  return EnglishMnemonic;\n}();\n\nexports.EnglishMnemonic = EnglishMnemonic;\nEnglishMnemonic.wordlist = bip39.wordlists.english; // list of space separated lower case words (1 or more)\n\nEnglishMnemonic.mnemonicMatcher = /^[a-z]+( [a-z]+)*$/;","map":{"version":3,"sources":["../src/englishmnemonic.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;IAEa,e;AAQX,2BAAmB,QAAnB,EAAmC;AAAA;;AACjC,QAAI,CAAC,eAAe,CAAC,eAAhB,CAAgC,IAAhC,CAAqC,QAArC,CAAL,EAAqD;AACnD,YAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,QAAM,KAAK,GAAG,QAAQ,CAAC,KAAT,CAAe,GAAf,CAAd;AACA,QAAM,mBAAmB,GAAsB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAA/C;;AACA,QAAI,mBAAmB,CAAC,OAApB,CAA4B,KAAK,CAAC,MAAlC,MAA8C,CAAC,CAAnD,EAAsD;AACpD,YAAM,IAAI,KAAJ,oDACwC,mBADxC,mBACoE,KAAK,CAAC,MAD1E,OAAN;AAGD;;AAXgC,+CAad,KAbc;AAAA;;AAAA;AAajC,0DAA0B;AAAA,YAAf,IAAe;;AACxB,YAAI,eAAe,CAAC,QAAhB,CAAyB,OAAzB,CAAiC,IAAjC,MAA2C,CAAC,CAAhD,EAAmD;AACjD,gBAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;AACF,OAjBgC,CAmBjC;AACA;;AApBiC;AAAA;AAAA;AAAA;AAAA;;AAqBjC,IAAA,KAAK,CAAC,iBAAN,CAAwB,QAAxB;AAEA,SAAK,IAAL,GAAY,QAAZ;AACD;;;;WAEM,oBAAQ;AACb,aAAO,KAAK,IAAZ;AACD;;;;;;AApCH,OAAA,CAAA,eAAA,GAAA,eAAA;AACyB,eAAA,CAAA,QAAA,GAA8B,KAAK,CAAC,SAAN,CAAgB,OAA9C,C,CAEvB;;AACwB,eAAA,CAAA,eAAA,GAAkB,oBAAlB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bip39 = __importStar(require(\"bip39\"));\nclass EnglishMnemonic {\n    constructor(mnemonic) {\n        if (!EnglishMnemonic.mnemonicMatcher.test(mnemonic)) {\n            throw new Error(\"Invalid mnemonic format\");\n        }\n        const words = mnemonic.split(\" \");\n        const allowedWordsLengths = [12, 15, 18, 21, 24];\n        if (allowedWordsLengths.indexOf(words.length) === -1) {\n            throw new Error(`Invalid word count in mnemonic (allowed: ${allowedWordsLengths} got: ${words.length})`);\n        }\n        for (const word of words) {\n            if (EnglishMnemonic.wordlist.indexOf(word) === -1) {\n                throw new Error(\"Mnemonic contains invalid word\");\n            }\n        }\n        // Throws with informative error message if mnemonic is not valid\n        // tslint:disable-next-line:no-unused-expression\n        bip39.mnemonicToEntropy(mnemonic);\n        this.data = mnemonic;\n    }\n    toString() {\n        return this.data;\n    }\n}\nexports.EnglishMnemonic = EnglishMnemonic;\nEnglishMnemonic.wordlist = bip39.wordlists.english;\n// list of space separated lower case words (1 or more)\nEnglishMnemonic.mnemonicMatcher = /^[a-z]+( [a-z]+)*$/;\n//# sourceMappingURL=englishmnemonic.js.map"]},"metadata":{},"sourceType":"script"}