{"ast":null,"code":"var _jsxFileName = \"/Users/aidansalzmann/redacted-mint/src/App.js\";\nimport React from \"react\";\nimport { SigningCosmWasmClient } from \"secretjs\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport rabbit from \"./rabbit.png\";\nimport logo from \"./logo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MintButton = styled(Button)`\n  align-items: center;\n  justify-content: center;\n  background: #808080 !important;\n`; // TODO: this needs to be a wallet connector\n\n_c = MintButton;\nconst ConnectButton = styled(Button)`\n  display: flex;\n  height: 50px;\n  align-items: center;\n  justify-content: center;\n`;\nconst CounterText = styled.span``; // add your styles here m8\n\n_c2 = CounterText;\nconst MintRoot = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  margin: auto;\n  align-items: center;\n  justify-content: center;\n  background: #ffffff;\n  text-align: center;\n`;\n_c3 = MintRoot;\nconst MintButtonText = styled.div`\n  padding: 5px 50px;\n`;\n_c4 = MintButtonText;\nconst Spacer = styled.div`\n  padding: 5rem;\n`;\n_c5 = Spacer;\nconst SmallSpacer = styled.div`\n  padding: 0.75rem;\n`; // TODO: fix border-radius\n\n_c6 = SmallSpacer;\nconst ImageContainer = styled.img`\n  max-width: 200px;\n  max-height: 200px;\n  border-radius: 25px;\n  padding: 0.75rem;\n`;\nconst Samples = styled.div`\n  display: flex;\n  flex-direction: row;\n  @media only screen and (max-width: 600px) {\n    flex-direction: column;\n  }\n`;\nconst Logo = styled.img`\n  max-width: 400px;\n  max-height: 400px;\n  @media only screen and (max-width: 600px) {\n    max-width: 250px;\n    max-height: 250px;\n  }\n`;\n_c7 = Logo;\nconst Text = styled.div`\n  max-width: 500px;\n`;\n_c8 = Text;\nconst CHAIN_ID = \"supernova-2\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keplrReady: false,\n      account: null\n    };\n  } // TODO: do we want to display the user's account number and balance?\n  // if so, we'll need to implement this properly. currently it doesn't work\n  // because account can only be initialized after the wallet is connected (which\n  // isn't necessarily after the base component mounts)\n\n\n  async componentDidMount() {\n    // await this.setupKeplr();\n    const account = \"test\"; //await this.secretjs.getAccount(this.state.account.address);\n\n    this.setState({\n      account\n    });\n  }\n\n  async setupKeplr() {\n    // Define sleep\n    const sleep = ms => new Promise(accept => setTimeout(accept, ms)); // Wait for Keplr to be injected to the page\n\n\n    while (!window.keplr && !window.getOfflineSigner && !window.getEnigmaUtils) {\n      await sleep(2);\n    } // TODO: stop using experimental chain\n    // Use a custom chain with Keplr.\n    // On mainnet we don't need this (`experimentalSuggestChain`).\n    // This works well with `enigmampc/secret-network-sw-dev`:\n    //     - https://hub.docker.com/r/enigmampc/secret-network-sw-dev\n    //     - Run a local chain: `docker run -it --rm -p 26657:26657 -p 26656:26656 -p 1337:1337 -v $(shell pwd):/root/code --name secretdev enigmampc/secret-network-sw-dev`\n    //     - `alias secretcli='docker exec -it secretdev secretcli'`\n    //     - Store a contract: `docker exec -it secretdev secretcli tx compute store /root/code/contract.wasm.gz --from a --gas 10000000 -b block -y`\n    // On holodeck, set:\n    //     1. CHAIN_ID = \"holodeck-2\"\n    //     2. rpc = \"ttp://chainofsecrets.secrettestnet.io:26657\"\n    //     3. rest = \"https://chainofsecrets.secrettestnet.io\"\n    //     4. chainName = Whatever you like\n    // For more examples, go to: https://github.com/chainapsis/keplr-example/blob/master/src/main.js\n\n\n    await window.keplr.experimentalSuggestChain({\n      chainId: CHAIN_ID,\n      chainName: \"supernova-2\",\n      rpc: \"tcp://bootstrap.supernova.enigma.co:26657\",\n      rest: \"http://bootstrap.supernova.enigma.co:1317/\",\n      bip44: {\n        coinType: 529\n      },\n      coinType: 529,\n      stakeCurrency: {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6\n      },\n      bech32Config: {\n        bech32PrefixAccAddr: \"secret\",\n        bech32PrefixAccPub: \"secretpub\",\n        bech32PrefixValAddr: \"secretvaloper\",\n        bech32PrefixValPub: \"secretvaloperpub\",\n        bech32PrefixConsAddr: \"secretvalcons\",\n        bech32PrefixConsPub: \"secretvalconspub\"\n      },\n      currencies: [{\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6\n      }],\n      feeCurrencies: [{\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6\n      }],\n      gasPriceStep: {\n        low: 0.1,\n        average: 0.25,\n        high: 0.4\n      },\n      features: [\"secretwasm\"]\n    }); // Enable Keplr.\n    // This pops-up a window for the user to allow keplr access to the webpage.\n\n    await window.keplr.enable(CHAIN_ID); // Setup SecrtJS with Keplr's OfflineSigner\n    // This pops-up a window for the user to sign on each tx we sent\n\n    this.keplrOfflineSigner = window.getOfflineSigner(CHAIN_ID);\n    const accounts = await this.keplrOfflineSigner.getAccounts();\n    this.secretjs = new SigningCosmWasmClient( // TODO: use an env variable here\n    \"http://bootstrap.supernova.enigma.co:1317/\", // holodeck - https://chainofsecrets.secrettestnet.io; mainnet - user your LCD/REST provider local http://localhost:1337, supernova-2 http://bootstrap.supernova.enigma.co:1317\n    accounts[0].address, this.keplrOfflineSigner, window.getEnigmaUtils(CHAIN_ID), {\n      // 300k - Max gas units we're willing to use for init\n      init: {\n        amount: [{\n          amount: \"300000\",\n          denom: \"uscrt\"\n        }],\n        gas: \"300000\"\n      },\n      // 300k - Max gas units we're willing to use for exec\n      exec: {\n        amount: [{\n          amount: \"300000\",\n          denom: \"uscrt\"\n        }],\n        gas: \"300000\"\n      }\n    });\n    this.setState({\n      keplrReady: true,\n      account: accounts[0]\n    });\n  }\n\n  async onMint() {\n    try {\n      // 1. Define your metadata\n      const publicMetadata = \"No secrets here!\";\n      const privateMetadata = \"Ssshhhhhhh....\"; // 2. Mint a new token to yourself\n\n      const handleMsg = {\n        mint_nft: {\n          owner: this.address,\n          public_metadata: {\n            name: publicMetadata\n          },\n          private_metadata: {\n            name: privateMetadata\n          }\n        }\n      };\n\n      (async () => {\n        await window.keplr.enable(CHAIN_ID);\n        console.log(\"Minting yourself a nft\"); // TODO: use env variable for the contract address, like so\n        // .execute(process.env.SECRET_NFT_CONTRACT, handleMsg)\n\n        const response = await this.secretjs.execute(\"secret16pk4n6x5xy9qsfsprhc5a2r08l8kc3yeg29x6s\", handleMsg) // supernova-2\n        // .execute(\"secret1gwlhghp6a3pwc4a5nsw0ltua7mmqwdh4qy23qp\", handleMsg) // holodeck-2\n        .catch(err => {\n          throw new Error(`Could not execute contract: ${err}`);\n        });\n        console.log(\"response: \", response);\n\n        if (response.code !== undefined && response.code !== 0) {\n          alert(\"Failed to mint NFT: \" + response.log || response.rawLog);\n        } else {\n          alert(\"NFT successfully minted: https://explorer.secrettestnet.io/transactions/\" + response.transactionHash);\n        }\n      })();\n    } catch (error) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n    }\n  }\n\n  render() {\n    const isSoldOut = false;\n    const isMobile = false;\n    const wallet = this.state.keplrReady;\n    const isMinting = false;\n    const isActive = true;\n    const startDate = 1635213600000;\n    const mintsRemaining = 100;\n\n    let account = /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Account: unknown\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 19\n    }, this);\n\n    if (this.state.account) {\n      account = /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Account: \", this.state.account.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this);\n    }\n\n    let renderCounter = ({\n      days,\n      hours,\n      minutes,\n      seconds,\n      completed\n    }) => {\n      return /*#__PURE__*/_jsxDEV(CounterText, {\n        children: [days, \" days, \", hours, \" hours, \", minutes, \" minutes, \", seconds, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this);\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(MintRoot, {\n        children: [/*#__PURE__*/_jsxDEV(SmallSpacer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), !isMobile ? /*#__PURE__*/_jsxDEV(Logo, {\n          src: logo,\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Logo, {\n          src: logo,\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this), !isSoldOut ? /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"font-link\",\n          children: \"Mints Live on Dec 4, 2021 5 PM UTC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"font-link\",\n          children: \"Minting is over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-link\",\n            children: \"1337 unique generative Redacted Rabbits.Secured by the SCRT network, stored on Arweave, implemented with the SNIP-721 standard.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MintButton, {\n          disabled: true,\n          onClick: async () => {\n            await this.onMint();\n          },\n          variant: \"contained\",\n          children: /*#__PURE__*/_jsxDEV(MintButtonText, {\n            className: \"font-link\",\n            children: \"MINT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"MintButton\");\n$RefreshReg$(_c2, \"CounterText\");\n$RefreshReg$(_c3, \"MintRoot\");\n$RefreshReg$(_c4, \"MintButtonText\");\n$RefreshReg$(_c5, \"Spacer\");\n$RefreshReg$(_c6, \"SmallSpacer\");\n$RefreshReg$(_c7, \"Logo\");\n$RefreshReg$(_c8, \"Text\");","map":{"version":3,"sources":["/Users/aidansalzmann/redacted-mint/src/App.js"],"names":["React","SigningCosmWasmClient","useEffect","useState","styled","Countdown","Button","CircularProgress","Snackbar","Alert","rabbit","MintButton","ConnectButton","CounterText","span","MintRoot","div","MintButtonText","Spacer","SmallSpacer","ImageContainer","img","Samples","Logo","Text","CHAIN_ID","App","Component","constructor","props","state","keplrReady","account","componentDidMount","setState","setupKeplr","sleep","ms","Promise","accept","setTimeout","window","keplr","getOfflineSigner","getEnigmaUtils","experimentalSuggestChain","chainId","chainName","rpc","rest","bip44","coinType","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","gasPriceStep","low","average","high","features","enable","keplrOfflineSigner","accounts","getAccounts","secretjs","address","init","amount","denom","gas","exec","onMint","publicMetadata","privateMetadata","handleMsg","mint_nft","owner","public_metadata","name","private_metadata","console","log","response","execute","catch","err","Error","code","undefined","alert","rawLog","transactionHash","error","message","msg","render","isSoldOut","isMobile","wallet","isMinting","isActive","startDate","mintsRemaining","renderCounter","days","hours","minutes","seconds","completed","logo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { SigningCosmWasmClient } from \"secretjs\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport rabbit from \"./rabbit.png\";\nimport logo from \"./logo.svg\";\n\nconst MintButton = styled(Button)`\n  align-items: center;\n  justify-content: center;\n  background: #808080 !important;\n`;\n\n// TODO: this needs to be a wallet connector\nconst ConnectButton = styled(Button)`\n  display: flex;\n  height: 50px;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst CounterText = styled.span``; // add your styles here m8\n\nconst MintRoot = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  margin: auto;\n  align-items: center;\n  justify-content: center;\n  background: #ffffff;\n  text-align: center;\n`;\n\nconst MintButtonText = styled.div`\n  padding: 5px 50px;\n`;\n\nconst Spacer = styled.div`\n  padding: 5rem;\n`;\n\nconst SmallSpacer = styled.div`\n  padding: 0.75rem;\n`;\n\n// TODO: fix border-radius\nconst ImageContainer = styled.img`\n  max-width: 200px;\n  max-height: 200px;\n  border-radius: 25px;\n  padding: 0.75rem;\n`;\n\nconst Samples = styled.div`\n  display: flex;\n  flex-direction: row;\n  @media only screen and (max-width: 600px) {\n    flex-direction: column;\n  }\n`;\n\nconst Logo = styled.img`\n  max-width: 400px;\n  max-height: 400px;\n  @media only screen and (max-width: 600px) {\n    max-width: 250px;\n    max-height: 250px;\n  }\n`;\n\nconst Text = styled.div`\n  max-width: 500px;\n`;\n\nconst CHAIN_ID = \"supernova-2\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { keplrReady: false, account: null };\n  }\n\n  // TODO: do we want to display the user's account number and balance?\n  // if so, we'll need to implement this properly. currently it doesn't work\n  // because account can only be initialized after the wallet is connected (which\n  // isn't necessarily after the base component mounts)\n  async componentDidMount() {\n    // await this.setupKeplr();\n\n    const account = \"test\"; //await this.secretjs.getAccount(this.state.account.address);\n    this.setState({ account });\n  }\n\n  async setupKeplr() {\n    // Define sleep\n    const sleep = (ms) => new Promise((accept) => setTimeout(accept, ms));\n\n    // Wait for Keplr to be injected to the page\n    while (\n      !window.keplr &&\n      !window.getOfflineSigner &&\n      !window.getEnigmaUtils\n    ) {\n      await sleep(2);\n    }\n\n    // TODO: stop using experimental chain\n    // Use a custom chain with Keplr.\n    // On mainnet we don't need this (`experimentalSuggestChain`).\n    // This works well with `enigmampc/secret-network-sw-dev`:\n    //     - https://hub.docker.com/r/enigmampc/secret-network-sw-dev\n    //     - Run a local chain: `docker run -it --rm -p 26657:26657 -p 26656:26656 -p 1337:1337 -v $(shell pwd):/root/code --name secretdev enigmampc/secret-network-sw-dev`\n    //     - `alias secretcli='docker exec -it secretdev secretcli'`\n    //     - Store a contract: `docker exec -it secretdev secretcli tx compute store /root/code/contract.wasm.gz --from a --gas 10000000 -b block -y`\n    // On holodeck, set:\n    //     1. CHAIN_ID = \"holodeck-2\"\n    //     2. rpc = \"ttp://chainofsecrets.secrettestnet.io:26657\"\n    //     3. rest = \"https://chainofsecrets.secrettestnet.io\"\n    //     4. chainName = Whatever you like\n    // For more examples, go to: https://github.com/chainapsis/keplr-example/blob/master/src/main.js\n    await window.keplr.experimentalSuggestChain({\n      chainId: CHAIN_ID,\n      chainName: \"supernova-2\",\n      rpc: \"tcp://bootstrap.supernova.enigma.co:26657\",\n      rest: \"http://bootstrap.supernova.enigma.co:1317/\",\n      bip44: {\n        coinType: 529,\n      },\n      coinType: 529,\n      stakeCurrency: {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6,\n      },\n      bech32Config: {\n        bech32PrefixAccAddr: \"secret\",\n        bech32PrefixAccPub: \"secretpub\",\n        bech32PrefixValAddr: \"secretvaloper\",\n        bech32PrefixValPub: \"secretvaloperpub\",\n        bech32PrefixConsAddr: \"secretvalcons\",\n        bech32PrefixConsPub: \"secretvalconspub\",\n      },\n      currencies: [\n        {\n          coinDenom: \"SCRT\",\n          coinMinimalDenom: \"uscrt\",\n          coinDecimals: 6,\n        },\n      ],\n      feeCurrencies: [\n        {\n          coinDenom: \"SCRT\",\n          coinMinimalDenom: \"uscrt\",\n          coinDecimals: 6,\n        },\n      ],\n      gasPriceStep: {\n        low: 0.1,\n        average: 0.25,\n        high: 0.4,\n      },\n      features: [\"secretwasm\"],\n    });\n\n    // Enable Keplr.\n    // This pops-up a window for the user to allow keplr access to the webpage.\n    await window.keplr.enable(CHAIN_ID);\n\n    // Setup SecrtJS with Keplr's OfflineSigner\n    // This pops-up a window for the user to sign on each tx we sent\n    this.keplrOfflineSigner = window.getOfflineSigner(CHAIN_ID);\n    const accounts = await this.keplrOfflineSigner.getAccounts();\n\n    this.secretjs = new SigningCosmWasmClient(\n      // TODO: use an env variable here\n      \"http://bootstrap.supernova.enigma.co:1317/\", // holodeck - https://chainofsecrets.secrettestnet.io; mainnet - user your LCD/REST provider local http://localhost:1337, supernova-2 http://bootstrap.supernova.enigma.co:1317\n      accounts[0].address,\n      this.keplrOfflineSigner,\n      window.getEnigmaUtils(CHAIN_ID),\n      {\n        // 300k - Max gas units we're willing to use for init\n        init: {\n          amount: [{ amount: \"300000\", denom: \"uscrt\" }],\n          gas: \"300000\",\n        },\n        // 300k - Max gas units we're willing to use for exec\n        exec: {\n          amount: [{ amount: \"300000\", denom: \"uscrt\" }],\n          gas: \"300000\",\n        },\n      }\n    );\n\n    this.setState({ keplrReady: true, account: accounts[0] });\n  }\n\n  async onMint() {\n    try {\n      // 1. Define your metadata\n      const publicMetadata = \"No secrets here!\";\n      const privateMetadata = \"Ssshhhhhhh....\";\n\n      // 2. Mint a new token to yourself\n      const handleMsg = {\n        mint_nft: {\n          owner: this.address,\n          public_metadata: {\n            name: publicMetadata,\n          },\n          private_metadata: {\n            name: privateMetadata,\n          },\n        },\n      };\n      (async () => {\n        await window.keplr.enable(CHAIN_ID);\n        console.log(\"Minting yourself a nft\");\n        // TODO: use env variable for the contract address, like so\n        // .execute(process.env.SECRET_NFT_CONTRACT, handleMsg)\n        const response = await this.secretjs\n          .execute(\"secret16pk4n6x5xy9qsfsprhc5a2r08l8kc3yeg29x6s\", handleMsg) // supernova-2\n          // .execute(\"secret1gwlhghp6a3pwc4a5nsw0ltua7mmqwdh4qy23qp\", handleMsg) // holodeck-2\n          .catch((err) => {\n            throw new Error(`Could not execute contract: ${err}`);\n          });\n        console.log(\"response: \", response);\n\n        if (response.code !== undefined && response.code !== 0) {\n          alert(\"Failed to mint NFT: \" + response.log || response.rawLog);\n        } else {\n          alert(\n            \"NFT successfully minted: https://explorer.secrettestnet.io/transactions/\" +\n              response.transactionHash\n          );\n        }\n      })();\n    } catch (error) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n    }\n  }\n\n  render() {\n    const isSoldOut = false;\n    const isMobile = false;\n    const wallet = this.state.keplrReady;\n    const isMinting = false;\n    const isActive = true;\n    const startDate = 1635213600000;\n    const mintsRemaining = 100;\n\n\n    let account = <h1>Account: unknown</h1>;\n    if (this.state.account) {\n      account = <h1>Account: {this.state.account.address}</h1>;\n    }\n\n    let renderCounter = ({ days, hours, minutes, seconds, completed }) => {\n      return (\n        <CounterText>\n          {days} days, {hours} hours, {minutes} minutes, {seconds} seconds\n        </CounterText>\n      );\n    };\n\n    return (\n      <>\n        <MintRoot>\n          <SmallSpacer />\n          {!isMobile ? (\n            <Logo src={logo} alt=\"logo\" />\n          ) : (\n            <Logo src={logo} alt=\"logo\" />\n          )}\n          {!isSoldOut ? (\n            <h1 className=\"font-link\">Mints Live on Dec 4, 2021 5 PM UTC</h1>\n          ) : (\n            <h1 className=\"font-link\">Minting is over</h1>\n          )}\n          <Text>\n            <p className=\"font-link\">\n              1337 unique generative Redacted Rabbits.Secured by the SCRT\n              network, stored on Arweave, implemented with the SNIP-721\n              standard.\n            </p>\n          </Text>\n\n          <MintButton\n              disabled={true}\n              onClick={async () => {\n                await this.onMint();\n              }}\n              variant=\"contained\"\n            >\n              {<MintButtonText className=\"font-link\">MINT</MintButtonText>}\n            </MintButton>\n          <Spacer />\n        </MintRoot>\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}