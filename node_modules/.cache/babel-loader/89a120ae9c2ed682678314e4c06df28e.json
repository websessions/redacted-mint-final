{"ast":null,"code":"\"use strict\"; // Copyright (C) 2017-2018 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\n\nvar _createForOfIteratorHelper = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar constant_time_1 = require(\"./internals/constant-time\");\n\nvar wipe_1 = require(\"./internals/wipe\");\n\nvar xor_1 = require(\"./internals/xor\");\n\nvar exceptions_1 = require(\"./exceptions\");\n\nvar block_1 = require(\"./internals/block\");\n\nvar cmac_1 = require(\"./mac/cmac\");\n\nvar pmac_1 = require(\"./mac/pmac\");\n\nvar webcrypto_1 = require(\"./providers/webcrypto\");\n/** Maximum number of associated data items */\n\n\nexports.MAX_ASSOCIATED_DATA = 126;\n/** The AES-SIV mode of authenticated encryption */\n\nvar SIV = /*#__PURE__*/function () {\n  function SIV(mac, ctr) {\n    _classCallCheck(this, SIV);\n\n    this._mac = mac;\n    this._ctr = ctr;\n    this._tmp1 = new block_1.default();\n    this._tmp2 = new block_1.default();\n  }\n  /** Encrypt and authenticate data using AES-SIV */\n\n\n  _createClass(SIV, [{\n    key: \"seal\",\n    value: function seal(plaintext, associatedData) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var resultLength, result, iv;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(associatedData.length > exports.MAX_ASSOCIATED_DATA)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"AES-SIV: too many associated data items\");\n\n              case 2:\n                // Allocate space for sealed ciphertext.\n                resultLength = block_1.default.SIZE + plaintext.length;\n                result = new Uint8Array(resultLength); // Authenticate.\n\n                _context.next = 6;\n                return this._s2v(associatedData, plaintext);\n\n              case 6:\n                iv = _context.sent;\n                result.set(iv); // Encrypt.\n\n                zeroIVBits(iv);\n                _context.t0 = result;\n                _context.next = 12;\n                return this._ctr.encryptCtr(iv, plaintext);\n\n              case 12:\n                _context.t1 = _context.sent;\n                _context.t2 = iv.length;\n\n                _context.t0.set.call(_context.t0, _context.t1, _context.t2);\n\n                return _context.abrupt(\"return\", result);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /** Decrypt and authenticate data using AES-SIV */\n\n  }, {\n    key: \"open\",\n    value: function open(sealed, associatedData) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var tag, iv, result, expectedTag;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(associatedData.length > exports.MAX_ASSOCIATED_DATA)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"AES-SIV: too many associated data items\");\n\n              case 2:\n                if (!(sealed.length < block_1.default.SIZE)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext is truncated\");\n\n              case 4:\n                // Decrypt.\n                tag = sealed.subarray(0, block_1.default.SIZE);\n                iv = this._tmp1.data;\n                iv.set(tag);\n                zeroIVBits(iv); // NOTE: \"encryptCtr\" is intentional. CTR encryption/decryption are the same\n\n                _context2.next = 10;\n                return this._ctr.encryptCtr(iv, sealed.subarray(block_1.default.SIZE));\n\n              case 10:\n                result = _context2.sent;\n                _context2.next = 13;\n                return this._s2v(associatedData, result);\n\n              case 13:\n                expectedTag = _context2.sent;\n\n                if (constant_time_1.equal(expectedTag, tag)) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                wipe_1.wipe(result);\n                throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext verification failure!\");\n\n              case 17:\n                return _context2.abrupt(\"return\", result);\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /** Make a best effort to wipe memory used by this instance */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._tmp1.clear();\n\n      this._tmp2.clear();\n\n      this._ctr.clear();\n\n      this._mac.clear();\n\n      return this;\n    }\n    /**\n     * The S2V operation consists of the doubling and XORing of the outputs\n     * of the pseudo-random function CMAC (or PMAC in the case of AES-PMAC-SIV).\n     *\n     * See Section 2.4 of RFC 5297 for more information\n     */\n\n  }, {\n    key: \"_s2v\",\n    value: function _s2v(associated_data, plaintext) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _iterator, _step, ad, n;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._mac.reset();\n\n                this._tmp1.clear(); // Note: the standalone S2V returns CMAC(1) if the number of passed\n                // vectors is zero, however in SIV construction this case is never\n                // triggered, since we always pass plaintext as the last vector (even\n                // if it's zero-length), so we omit this case.\n\n\n                _context3.next = 4;\n                return this._mac.update(this._tmp1.data);\n\n              case 4:\n                this._tmp2.clear();\n\n                _context3.t0 = this._tmp2.data;\n                _context3.next = 8;\n                return this._mac.finish();\n\n              case 8:\n                _context3.t1 = _context3.sent;\n\n                _context3.t0.set.call(_context3.t0, _context3.t1);\n\n                this._mac.reset();\n\n                _iterator = _createForOfIteratorHelper(associated_data);\n                _context3.prev = 12;\n\n                _iterator.s();\n\n              case 14:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                ad = _step.value;\n                _context3.next = 18;\n                return this._mac.update(ad);\n\n              case 18:\n                this._tmp1.clear();\n\n                _context3.t2 = this._tmp1.data;\n                _context3.next = 22;\n                return this._mac.finish();\n\n              case 22:\n                _context3.t3 = _context3.sent;\n\n                _context3.t2.set.call(_context3.t2, _context3.t3);\n\n                this._mac.reset();\n\n                this._tmp2.dbl();\n\n                xor_1.xor(this._tmp2.data, this._tmp1.data);\n\n              case 27:\n                _context3.next = 14;\n                break;\n\n              case 29:\n                _context3.next = 34;\n                break;\n\n              case 31:\n                _context3.prev = 31;\n                _context3.t4 = _context3[\"catch\"](12);\n\n                _iterator.e(_context3.t4);\n\n              case 34:\n                _context3.prev = 34;\n\n                _iterator.f();\n\n                return _context3.finish(34);\n\n              case 37:\n                this._tmp1.clear();\n\n                if (!(plaintext.length >= block_1.default.SIZE)) {\n                  _context3.next = 45;\n                  break;\n                }\n\n                n = plaintext.length - block_1.default.SIZE;\n\n                this._tmp1.data.set(plaintext.subarray(n));\n\n                _context3.next = 43;\n                return this._mac.update(plaintext.subarray(0, n));\n\n              case 43:\n                _context3.next = 48;\n                break;\n\n              case 45:\n                this._tmp1.data.set(plaintext);\n\n                this._tmp1.data[plaintext.length] = 0x80;\n\n                this._tmp2.dbl();\n\n              case 48:\n                xor_1.xor(this._tmp1.data, this._tmp2.data);\n                _context3.next = 51;\n                return this._mac.update(this._tmp1.data);\n\n              case 51:\n                return _context3.abrupt(\"return\", this._mac.finish());\n\n              case 52:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[12, 31, 34, 37]]);\n      }));\n    }\n  }], [{\n    key: \"importKey\",\n    value:\n    /** Create a new AES-SIV instance with the given 32-byte or 64-byte key */\n    function importKey(keyData, alg) {\n      var provider = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new webcrypto_1.WebCryptoProvider();\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var macKey, encKey, mac, ctr;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(keyData.length !== 32 && keyData.length !== 64)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error(\"AES-SIV: key must be 32 or 64-bytes (got \".concat(keyData.length));\n\n              case 2:\n                macKey = keyData.subarray(0, keyData.length / 2 | 0);\n                encKey = keyData.subarray(keyData.length / 2 | 0);\n                _context4.t0 = alg;\n                _context4.next = _context4.t0 === \"AES-SIV\" ? 7 : _context4.t0 === \"AES-CMAC-SIV\" ? 11 : _context4.t0 === \"AES-PMAC-SIV\" ? 15 : 19;\n                break;\n\n              case 7:\n                _context4.next = 9;\n                return cmac_1.CMAC.importKey(provider, macKey);\n\n              case 9:\n                mac = _context4.sent;\n                return _context4.abrupt(\"break\", 20);\n\n              case 11:\n                _context4.next = 13;\n                return cmac_1.CMAC.importKey(provider, macKey);\n\n              case 13:\n                mac = _context4.sent;\n                return _context4.abrupt(\"break\", 20);\n\n              case 15:\n                _context4.next = 17;\n                return pmac_1.PMAC.importKey(provider, macKey);\n\n              case 17:\n                mac = _context4.sent;\n                return _context4.abrupt(\"break\", 20);\n\n              case 19:\n                throw new exceptions_1.NotImplementedError(\"Miscreant: algorithm not supported: \".concat(alg));\n\n              case 20:\n                _context4.next = 22;\n                return provider.importCTRKey(encKey);\n\n              case 22:\n                ctr = _context4.sent;\n                return _context4.abrupt(\"return\", new SIV(mac, ctr));\n\n              case 24:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n    }\n  }]);\n\n  return SIV;\n}();\n\nexports.SIV = SIV;\n/** Zero out the top bits in the last 32-bit words of the IV */\n\nfunction zeroIVBits(iv) {\n  // \"We zero-out the top bit in each of the last two 32-bit words\n  // of the IV before assigning it to Ctr\"\n  //  — http://web.cs.ucdavis.edu/~rogaway/papers/siv.pdf\n  iv[iv.length - 8] &= 0x7f;\n  iv[iv.length - 4] &= 0x7f;\n}","map":{"version":3,"sources":["/Users/aidansalzmann/redacted-mint/node_modules/miscreant/release/siv.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","constant_time_1","require","wipe_1","xor_1","exceptions_1","block_1","cmac_1","pmac_1","webcrypto_1","MAX_ASSOCIATED_DATA","SIV","mac","ctr","_mac","_ctr","_tmp1","default","_tmp2","plaintext","associatedData","length","Error","resultLength","SIZE","Uint8Array","_s2v","iv","set","zeroIVBits","encryptCtr","sealed","IntegrityError","tag","subarray","data","expectedTag","equal","wipe","clear","associated_data","reset","update","finish","ad","dbl","xor","n","keyData","alg","provider","WebCryptoProvider","macKey","encKey","CMAC","importKey","PMAC","NotImplementedError","importCTRKey"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (C) 2017-2018 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constant_time_1 = require(\"./internals/constant-time\");\nconst wipe_1 = require(\"./internals/wipe\");\nconst xor_1 = require(\"./internals/xor\");\nconst exceptions_1 = require(\"./exceptions\");\nconst block_1 = require(\"./internals/block\");\nconst cmac_1 = require(\"./mac/cmac\");\nconst pmac_1 = require(\"./mac/pmac\");\nconst webcrypto_1 = require(\"./providers/webcrypto\");\n/** Maximum number of associated data items */\nexports.MAX_ASSOCIATED_DATA = 126;\n/** The AES-SIV mode of authenticated encryption */\nclass SIV {\n    /** Create a new AES-SIV instance with the given 32-byte or 64-byte key */\n    static importKey(keyData, alg, provider = new webcrypto_1.WebCryptoProvider()) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // We only support AES-128 and AES-256. AES-SIV needs a key 2X as long the intended security level\n            if (keyData.length !== 32 && keyData.length !== 64) {\n                throw new Error(`AES-SIV: key must be 32 or 64-bytes (got ${keyData.length}`);\n            }\n            const macKey = keyData.subarray(0, keyData.length / 2 | 0);\n            const encKey = keyData.subarray(keyData.length / 2 | 0);\n            let mac;\n            switch (alg) {\n                case \"AES-SIV\":\n                    mac = yield cmac_1.CMAC.importKey(provider, macKey);\n                    break;\n                case \"AES-CMAC-SIV\":\n                    mac = yield cmac_1.CMAC.importKey(provider, macKey);\n                    break;\n                case \"AES-PMAC-SIV\":\n                    mac = yield pmac_1.PMAC.importKey(provider, macKey);\n                    break;\n                default:\n                    throw new exceptions_1.NotImplementedError(`Miscreant: algorithm not supported: ${alg}`);\n            }\n            const ctr = yield provider.importCTRKey(encKey);\n            return new SIV(mac, ctr);\n        });\n    }\n    constructor(mac, ctr) {\n        this._mac = mac;\n        this._ctr = ctr;\n        this._tmp1 = new block_1.default();\n        this._tmp2 = new block_1.default();\n    }\n    /** Encrypt and authenticate data using AES-SIV */\n    seal(plaintext, associatedData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (associatedData.length > exports.MAX_ASSOCIATED_DATA) {\n                throw new Error(\"AES-SIV: too many associated data items\");\n            }\n            // Allocate space for sealed ciphertext.\n            const resultLength = block_1.default.SIZE + plaintext.length;\n            const result = new Uint8Array(resultLength);\n            // Authenticate.\n            const iv = yield this._s2v(associatedData, plaintext);\n            result.set(iv);\n            // Encrypt.\n            zeroIVBits(iv);\n            result.set(yield this._ctr.encryptCtr(iv, plaintext), iv.length);\n            return result;\n        });\n    }\n    /** Decrypt and authenticate data using AES-SIV */\n    open(sealed, associatedData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (associatedData.length > exports.MAX_ASSOCIATED_DATA) {\n                throw new Error(\"AES-SIV: too many associated data items\");\n            }\n            if (sealed.length < block_1.default.SIZE) {\n                throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext is truncated\");\n            }\n            // Decrypt.\n            const tag = sealed.subarray(0, block_1.default.SIZE);\n            const iv = this._tmp1.data;\n            iv.set(tag);\n            zeroIVBits(iv);\n            // NOTE: \"encryptCtr\" is intentional. CTR encryption/decryption are the same\n            const result = yield this._ctr.encryptCtr(iv, sealed.subarray(block_1.default.SIZE));\n            // Authenticate.\n            const expectedTag = yield this._s2v(associatedData, result);\n            if (!constant_time_1.equal(expectedTag, tag)) {\n                wipe_1.wipe(result);\n                throw new exceptions_1.IntegrityError(\"AES-SIV: ciphertext verification failure!\");\n            }\n            return result;\n        });\n    }\n    /** Make a best effort to wipe memory used by this instance */\n    clear() {\n        this._tmp1.clear();\n        this._tmp2.clear();\n        this._ctr.clear();\n        this._mac.clear();\n        return this;\n    }\n    /**\n     * The S2V operation consists of the doubling and XORing of the outputs\n     * of the pseudo-random function CMAC (or PMAC in the case of AES-PMAC-SIV).\n     *\n     * See Section 2.4 of RFC 5297 for more information\n     */\n    _s2v(associated_data, plaintext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._mac.reset();\n            this._tmp1.clear();\n            // Note: the standalone S2V returns CMAC(1) if the number of passed\n            // vectors is zero, however in SIV construction this case is never\n            // triggered, since we always pass plaintext as the last vector (even\n            // if it's zero-length), so we omit this case.\n            yield this._mac.update(this._tmp1.data);\n            this._tmp2.clear();\n            this._tmp2.data.set(yield this._mac.finish());\n            this._mac.reset();\n            for (const ad of associated_data) {\n                yield this._mac.update(ad);\n                this._tmp1.clear();\n                this._tmp1.data.set(yield this._mac.finish());\n                this._mac.reset();\n                this._tmp2.dbl();\n                xor_1.xor(this._tmp2.data, this._tmp1.data);\n            }\n            this._tmp1.clear();\n            if (plaintext.length >= block_1.default.SIZE) {\n                const n = plaintext.length - block_1.default.SIZE;\n                this._tmp1.data.set(plaintext.subarray(n));\n                yield this._mac.update(plaintext.subarray(0, n));\n            }\n            else {\n                this._tmp1.data.set(plaintext);\n                this._tmp1.data[plaintext.length] = 0x80;\n                this._tmp2.dbl();\n            }\n            xor_1.xor(this._tmp1.data, this._tmp2.data);\n            yield this._mac.update(this._tmp1.data);\n            return this._mac.finish();\n        });\n    }\n}\nexports.SIV = SIV;\n/** Zero out the top bits in the last 32-bit words of the IV */\nfunction zeroIVBits(iv) {\n    // \"We zero-out the top bit in each of the last two 32-bit words\n    // of the IV before assigning it to Ctr\"\n    //  — http://web.cs.ucdavis.edu/~rogaway/papers/siv.pdf\n    iv[iv.length - 8] &= 0x7f;\n    iv[iv.length - 4] &= 0x7f;\n}\n"]},"metadata":{},"sourceType":"script"}