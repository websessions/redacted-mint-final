{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Decimal = void 0;\n\nvar bn_js_1 = __importDefault(require(\"bn.js\")); // Too large values lead to massive memory usage. Limit to something sensible.\n// The largest value we need is 18 (Ether).\n\n\nvar maxFractionalDigits = 100;\n/**\n * A type for arbitrary precision, non-negative decimals.\n *\n * Instances of this class are immutable.\n */\n\nvar Decimal = /*#__PURE__*/function () {\n  function Decimal(atomics, fractionalDigits) {\n    _classCallCheck(this, Decimal);\n\n    this.data = {\n      atomics: new bn_js_1.default(atomics),\n      fractionalDigits: fractionalDigits\n    };\n  }\n\n  _createClass(Decimal, [{\n    key: \"atomics\",\n    get: function get() {\n      return this.data.atomics.toString();\n    }\n  }, {\n    key: \"fractionalDigits\",\n    get: function get() {\n      return this.data.fractionalDigits;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var factor = new bn_js_1.default(10).pow(new bn_js_1.default(this.data.fractionalDigits));\n      var whole = this.data.atomics.div(factor);\n      var fractional = this.data.atomics.mod(factor);\n\n      if (fractional.isZero()) {\n        return whole.toString();\n      } else {\n        var fullFractionalPart = fractional.toString().padStart(this.data.fractionalDigits, \"0\");\n        var trimmedFractionalPart = fullFractionalPart.replace(/0+$/, \"\");\n        return \"\".concat(whole.toString(), \".\").concat(trimmedFractionalPart);\n      }\n    }\n    /**\n     * Returns an approximation as a float type. Only use this if no\n     * exact calculation is required.\n     */\n\n  }, {\n    key: \"toFloatApproximation\",\n    value: function toFloatApproximation() {\n      var out = Number(this.toString());\n      if (Number.isNaN(out)) throw new Error(\"Conversion to number failed\");\n      return out;\n    }\n    /**\n     * a.plus(b) returns a+b.\n     *\n     * Both values need to have the same fractional digits.\n     */\n\n  }, {\n    key: \"plus\",\n    value: function plus(b) {\n      if (this.fractionalDigits !== b.fractionalDigits) throw new Error(\"Fractional digits do not match\");\n      var sum = this.data.atomics.add(new bn_js_1.default(b.atomics));\n      return new Decimal(sum.toString(), this.fractionalDigits);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(b) {\n      return Decimal.compare(this, b) === 0;\n    }\n  }, {\n    key: \"isLessThan\",\n    value: function isLessThan(b) {\n      return Decimal.compare(this, b) < 0;\n    }\n  }, {\n    key: \"isLessThanOrEqual\",\n    value: function isLessThanOrEqual(b) {\n      return Decimal.compare(this, b) <= 0;\n    }\n  }, {\n    key: \"isGreaterThan\",\n    value: function isGreaterThan(b) {\n      return Decimal.compare(this, b) > 0;\n    }\n  }, {\n    key: \"isGreaterThanOrEqual\",\n    value: function isGreaterThanOrEqual(b) {\n      return Decimal.compare(this, b) >= 0;\n    }\n  }], [{\n    key: \"fromUserInput\",\n    value: function fromUserInput(input, fractionalDigits) {\n      Decimal.verifyFractionalDigits(fractionalDigits);\n      var badCharacter = input.match(/[^0-9.]/);\n\n      if (badCharacter) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        throw new Error(\"Invalid character at position \".concat(badCharacter.index + 1));\n      }\n\n      var whole;\n      var fractional;\n\n      if (input.search(/\\./) === -1) {\n        // integer format, no separator\n        whole = input;\n        fractional = \"\";\n      } else {\n        var parts = input.split(\".\");\n\n        switch (parts.length) {\n          case 0:\n          case 1:\n            throw new Error(\"Fewer than two elements in split result. This must not happen here.\");\n\n          case 2:\n            if (!parts[1]) throw new Error(\"Fractional part missing\");\n            whole = parts[0];\n            fractional = parts[1].replace(/0+$/, \"\");\n            break;\n\n          default:\n            throw new Error(\"More than one separator found\");\n        }\n      }\n\n      if (fractional.length > fractionalDigits) {\n        throw new Error(\"Got more fractional digits than supported\");\n      }\n\n      var quantity = \"\".concat(whole).concat(fractional.padEnd(fractionalDigits, \"0\"));\n      return new Decimal(quantity, fractionalDigits);\n    }\n  }, {\n    key: \"fromAtomics\",\n    value: function fromAtomics(atomics, fractionalDigits) {\n      Decimal.verifyFractionalDigits(fractionalDigits);\n      return new Decimal(atomics, fractionalDigits);\n    }\n  }, {\n    key: \"verifyFractionalDigits\",\n    value: function verifyFractionalDigits(fractionalDigits) {\n      if (!Number.isInteger(fractionalDigits)) throw new Error(\"Fractional digits is not an integer\");\n      if (fractionalDigits < 0) throw new Error(\"Fractional digits must not be negative\");\n\n      if (fractionalDigits > maxFractionalDigits) {\n        throw new Error(\"Fractional digits must not exceed \".concat(maxFractionalDigits));\n      }\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(a, b) {\n      if (a.fractionalDigits !== b.fractionalDigits) throw new Error(\"Fractional digits do not match\");\n      return a.data.atomics.cmp(new bn_js_1.default(b.atomics));\n    }\n  }]);\n\n  return Decimal;\n}();\n\nexports.Decimal = Decimal;","map":{"version":3,"sources":["../src/decimal.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Decimal = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n// Too large values lead to massive memory usage. Limit to something sensible.\n// The largest value we need is 18 (Ether).\nconst maxFractionalDigits = 100;\n/**\n * A type for arbitrary precision, non-negative decimals.\n *\n * Instances of this class are immutable.\n */\nclass Decimal {\n    constructor(atomics, fractionalDigits) {\n        this.data = {\n            atomics: new bn_js_1.default(atomics),\n            fractionalDigits: fractionalDigits,\n        };\n    }\n    static fromUserInput(input, fractionalDigits) {\n        Decimal.verifyFractionalDigits(fractionalDigits);\n        const badCharacter = input.match(/[^0-9.]/);\n        if (badCharacter) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            throw new Error(`Invalid character at position ${badCharacter.index + 1}`);\n        }\n        let whole;\n        let fractional;\n        if (input.search(/\\./) === -1) {\n            // integer format, no separator\n            whole = input;\n            fractional = \"\";\n        }\n        else {\n            const parts = input.split(\".\");\n            switch (parts.length) {\n                case 0:\n                case 1:\n                    throw new Error(\"Fewer than two elements in split result. This must not happen here.\");\n                case 2:\n                    if (!parts[1])\n                        throw new Error(\"Fractional part missing\");\n                    whole = parts[0];\n                    fractional = parts[1].replace(/0+$/, \"\");\n                    break;\n                default:\n                    throw new Error(\"More than one separator found\");\n            }\n        }\n        if (fractional.length > fractionalDigits) {\n            throw new Error(\"Got more fractional digits than supported\");\n        }\n        const quantity = `${whole}${fractional.padEnd(fractionalDigits, \"0\")}`;\n        return new Decimal(quantity, fractionalDigits);\n    }\n    static fromAtomics(atomics, fractionalDigits) {\n        Decimal.verifyFractionalDigits(fractionalDigits);\n        return new Decimal(atomics, fractionalDigits);\n    }\n    static verifyFractionalDigits(fractionalDigits) {\n        if (!Number.isInteger(fractionalDigits))\n            throw new Error(\"Fractional digits is not an integer\");\n        if (fractionalDigits < 0)\n            throw new Error(\"Fractional digits must not be negative\");\n        if (fractionalDigits > maxFractionalDigits) {\n            throw new Error(`Fractional digits must not exceed ${maxFractionalDigits}`);\n        }\n    }\n    static compare(a, b) {\n        if (a.fractionalDigits !== b.fractionalDigits)\n            throw new Error(\"Fractional digits do not match\");\n        return a.data.atomics.cmp(new bn_js_1.default(b.atomics));\n    }\n    get atomics() {\n        return this.data.atomics.toString();\n    }\n    get fractionalDigits() {\n        return this.data.fractionalDigits;\n    }\n    toString() {\n        const factor = new bn_js_1.default(10).pow(new bn_js_1.default(this.data.fractionalDigits));\n        const whole = this.data.atomics.div(factor);\n        const fractional = this.data.atomics.mod(factor);\n        if (fractional.isZero()) {\n            return whole.toString();\n        }\n        else {\n            const fullFractionalPart = fractional.toString().padStart(this.data.fractionalDigits, \"0\");\n            const trimmedFractionalPart = fullFractionalPart.replace(/0+$/, \"\");\n            return `${whole.toString()}.${trimmedFractionalPart}`;\n        }\n    }\n    /**\n     * Returns an approximation as a float type. Only use this if no\n     * exact calculation is required.\n     */\n    toFloatApproximation() {\n        const out = Number(this.toString());\n        if (Number.isNaN(out))\n            throw new Error(\"Conversion to number failed\");\n        return out;\n    }\n    /**\n     * a.plus(b) returns a+b.\n     *\n     * Both values need to have the same fractional digits.\n     */\n    plus(b) {\n        if (this.fractionalDigits !== b.fractionalDigits)\n            throw new Error(\"Fractional digits do not match\");\n        const sum = this.data.atomics.add(new bn_js_1.default(b.atomics));\n        return new Decimal(sum.toString(), this.fractionalDigits);\n    }\n    equals(b) {\n        return Decimal.compare(this, b) === 0;\n    }\n    isLessThan(b) {\n        return Decimal.compare(this, b) < 0;\n    }\n    isLessThanOrEqual(b) {\n        return Decimal.compare(this, b) <= 0;\n    }\n    isGreaterThan(b) {\n        return Decimal.compare(this, b) > 0;\n    }\n    isGreaterThanOrEqual(b) {\n        return Decimal.compare(this, b) >= 0;\n    }\n}\nexports.Decimal = Decimal;\n//# sourceMappingURL=decimal.js.map"]},"metadata":{},"sourceType":"script"}