{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction isJsonCompatibleValue(value) {\n  if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || value === null || // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  isJsonCompatibleArray(value) || // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  isJsonCompatibleDictionary(value)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexports.isJsonCompatibleValue = isJsonCompatibleValue;\n\nfunction isJsonCompatibleArray(value) {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n\n  var _iterator = _createForOfIteratorHelper(value),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n\n      if (!isJsonCompatibleValue(item)) {\n        return false;\n      }\n    } // all items okay\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n}\n\nexports.isJsonCompatibleArray = isJsonCompatibleArray;\n\nfunction isJsonCompatibleDictionary(data) {\n  if (typeof data !== \"object\" || data === null) {\n    // data must be a non-null object\n    return false;\n  } // Exclude special kind of objects like Array, Date or Uint8Array\n  // Object.prototype.toString() returns a specified value:\n  // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n\n\n  if (Object.prototype.toString.call(data) !== \"[object Object]\") {\n    return false;\n  } // TODO: replace with Object.values when available (ES2017+)\n\n\n  var values = Object.getOwnPropertyNames(data).map(function (key) {\n    return data[key];\n  });\n  return values.every(isJsonCompatibleValue);\n}\n\nexports.isJsonCompatibleDictionary = isJsonCompatibleDictionary;","map":{"version":3,"sources":["../src/json.ts"],"names":[],"mappings":";;;;;;;;AAwBA,SAAgB,qBAAhB,CAAsC,KAAtC,EAAoD;AAClD,MACE,OAAO,KAAP,KAAiB,QAAjB,IACA,OAAO,KAAP,KAAiB,QADjB,IAEA,OAAO,KAAP,KAAiB,SAFjB,IAGA,KAAK,KAAK,IAHV,IAIA;AACA,EAAA,qBAAqB,CAAC,KAAD,CALrB,IAMA;AACA,EAAA,0BAA0B,CAAC,KAAD,CAR5B,EASE;AACA,WAAO,IAAP;AACD,GAXD,MAWO;AACL,WAAO,KAAP;AACD;AACF;;AAfD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAiBA,SAAgB,qBAAhB,CAAsC,KAAtC,EAAoD;AAClD,MAAI,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAL,EAA2B;AACzB,WAAO,KAAP;AACD;;AAHiD,6CAK/B,KAL+B;AAAA;;AAAA;AAKlD,wDAA0B;AAAA,UAAf,IAAe;;AACxB,UAAI,CAAC,qBAAqB,CAAC,IAAD,CAA1B,EAAkC;AAChC,eAAO,KAAP;AACD;AACF,KATiD,CAWlD;;AAXkD;AAAA;AAAA;AAAA;AAAA;;AAYlD,SAAO,IAAP;AACD;;AAbD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAeA,SAAgB,0BAAhB,CAA2C,IAA3C,EAAwD;AACtD,MAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,IAAI,KAAK,IAAzC,EAA+C;AAC7C;AACA,WAAO,KAAP;AACD,GAJqD,CAMtD;AACA;AACA;;;AACA,MAAI,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,IAA/B,MAAyC,iBAA7C,EAAgE;AAC9D,WAAO,KAAP;AACD,GAXqD,CAatD;;;AACA,MAAM,MAAM,GAAG,MAAM,CAAC,mBAAP,CAA2B,IAA3B,EAAiC,GAAjC,CAAqC,UAAA,GAAG;AAAA,WAAK,IAAY,CAAC,GAAD,CAAjB;AAAA,GAAxC,CAAf;AACA,SAAO,MAAM,CAAC,KAAP,CAAa,qBAAb,CAAP;AACD;;AAhBD,OAAA,CAAA,0BAAA,GAAA,0BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isJsonCompatibleValue(value) {\n    if (typeof value === \"string\" ||\n        typeof value === \"number\" ||\n        typeof value === \"boolean\" ||\n        value === null ||\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        isJsonCompatibleArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        isJsonCompatibleDictionary(value)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexports.isJsonCompatibleValue = isJsonCompatibleValue;\nfunction isJsonCompatibleArray(value) {\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    for (const item of value) {\n        if (!isJsonCompatibleValue(item)) {\n            return false;\n        }\n    }\n    // all items okay\n    return true;\n}\nexports.isJsonCompatibleArray = isJsonCompatibleArray;\nfunction isJsonCompatibleDictionary(data) {\n    if (typeof data !== \"object\" || data === null) {\n        // data must be a non-null object\n        return false;\n    }\n    // Exclude special kind of objects like Array, Date or Uint8Array\n    // Object.prototype.toString() returns a specified value:\n    // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n    if (Object.prototype.toString.call(data) !== \"[object Object]\") {\n        return false;\n    }\n    // TODO: replace with Object.values when available (ES2017+)\n    const values = Object.getOwnPropertyNames(data).map(key => data[key]);\n    return values.every(isJsonCompatibleValue);\n}\nexports.isJsonCompatibleDictionary = isJsonCompatibleDictionary;\n//# sourceMappingURL=json.js.map"]},"metadata":{},"sourceType":"script"}