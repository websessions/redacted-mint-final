{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst miscreant = require(\"miscreant\");\n\nconst curve25519_js_1 = require(\"curve25519-js\");\n\nconst encoding_1 = require(\"@iov/encoding\");\n\nconst secureRandom = require(\"secure-random\");\n\nconst axios_1 = __importDefault(require(\"axios\"));\n\nconst hkdf = require(\"js-crypto-hkdf\");\n\nconst cryptoProvider = new miscreant.PolyfillCryptoProvider();\nconst hkdfSalt = Uint8Array.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4b, 0xea, 0xd8, 0xdf, 0x69, 0x99, 0x08, 0x52, 0xc2, 0x02, 0xdb, 0x0e, 0x00, 0x97, 0xc1, 0xa1, 0x2e, 0xa6, 0x37, 0xd7, 0xe9, 0x6d]);\n\nclass EnigmaUtils {\n  constructor(apiUrl, seed) {\n    this.consensusIoPubKey = new Uint8Array(); // cache\n\n    this.apiUrl = apiUrl;\n\n    if (!seed) {\n      this.seed = EnigmaUtils.GenerateNewSeed();\n    } else {\n      this.seed = seed;\n    }\n\n    const {\n      privkey,\n      pubkey\n    } = EnigmaUtils.GenerateNewKeyPairFromSeed(this.seed);\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n\n  static GenerateNewKeyPair() {\n    return EnigmaUtils.GenerateNewKeyPairFromSeed(EnigmaUtils.GenerateNewSeed());\n  }\n\n  static GenerateNewSeed() {\n    return secureRandom(32, {\n      type: \"Uint8Array\"\n    });\n  }\n\n  static GenerateNewKeyPairFromSeed(seed) {\n    const {\n      private: privkey,\n      public: pubkey\n    } = curve25519_js_1.generateKeyPair(seed);\n    return {\n      privkey,\n      pubkey\n    };\n  }\n\n  async getConsensusIoPubKey() {\n    if (this.consensusIoPubKey.length === 32) {\n      return this.consensusIoPubKey;\n    }\n\n    const {\n      data: {\n        result: {\n          ioExchPubkey\n        }\n      }\n    } = await axios_1.default.get(this.apiUrl + \"/reg/consensus-io-exch-pubkey\", {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    this.consensusIoPubKey = encoding_1.Encoding.fromBase64(ioExchPubkey);\n    return this.consensusIoPubKey;\n  }\n\n  async getTxEncryptionKey(nonce) {\n    const consensusIoPubKey = await this.getConsensusIoPubKey();\n    const txEncryptionIkm = curve25519_js_1.sharedKey(this.privkey, consensusIoPubKey);\n    const {\n      key: txEncryptionKey\n    } = await hkdf.compute(Uint8Array.from([...txEncryptionIkm, ...nonce]), \"SHA-256\", 32, \"\", hkdfSalt);\n    return txEncryptionKey;\n  }\n\n  async encrypt(contractCodeHash, msg) {\n    const nonce = secureRandom(32, {\n      type: \"Uint8Array\"\n    });\n    const txEncryptionKey = await this.getTxEncryptionKey(nonce);\n    const siv = await miscreant.SIV.importKey(txEncryptionKey, \"AES-SIV\", cryptoProvider);\n    const plaintext = encoding_1.Encoding.toUtf8(contractCodeHash + JSON.stringify(msg));\n    const ciphertext = await siv.seal(plaintext, [new Uint8Array()]); // ciphertext = nonce(32) || wallet_pubkey(32) || ciphertext\n\n    return Uint8Array.from([...nonce, ...this.pubkey, ...ciphertext]);\n  }\n\n  async decrypt(ciphertext, nonce) {\n    if (ciphertext.length === 0) {\n      return new Uint8Array();\n    }\n\n    const txEncryptionKey = await this.getTxEncryptionKey(nonce);\n    const siv = await miscreant.SIV.importKey(txEncryptionKey, \"AES-SIV\", cryptoProvider);\n    const plaintext = await siv.open(ciphertext, [new Uint8Array()]);\n    return plaintext;\n  }\n\n  getPubkey() {\n    return Promise.resolve(this.pubkey);\n  }\n\n}\n\nexports.default = EnigmaUtils;\nmodule.exports = EnigmaUtils;","map":{"version":3,"sources":["../src/enigmautils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst miscreant = require(\"miscreant\");\nconst curve25519_js_1 = require(\"curve25519-js\");\nconst encoding_1 = require(\"@iov/encoding\");\nconst secureRandom = require(\"secure-random\");\nconst axios_1 = __importDefault(require(\"axios\"));\nconst hkdf = require(\"js-crypto-hkdf\");\nconst cryptoProvider = new miscreant.PolyfillCryptoProvider();\nconst hkdfSalt = Uint8Array.from([\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x02,\n    0x4b,\n    0xea,\n    0xd8,\n    0xdf,\n    0x69,\n    0x99,\n    0x08,\n    0x52,\n    0xc2,\n    0x02,\n    0xdb,\n    0x0e,\n    0x00,\n    0x97,\n    0xc1,\n    0xa1,\n    0x2e,\n    0xa6,\n    0x37,\n    0xd7,\n    0xe9,\n    0x6d,\n]);\nclass EnigmaUtils {\n    constructor(apiUrl, seed) {\n        this.consensusIoPubKey = new Uint8Array(); // cache\n        this.apiUrl = apiUrl;\n        if (!seed) {\n            this.seed = EnigmaUtils.GenerateNewSeed();\n        }\n        else {\n            this.seed = seed;\n        }\n        const { privkey, pubkey } = EnigmaUtils.GenerateNewKeyPairFromSeed(this.seed);\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n    }\n    static GenerateNewKeyPair() {\n        return EnigmaUtils.GenerateNewKeyPairFromSeed(EnigmaUtils.GenerateNewSeed());\n    }\n    static GenerateNewSeed() {\n        return secureRandom(32, { type: \"Uint8Array\" });\n    }\n    static GenerateNewKeyPairFromSeed(seed) {\n        const { private: privkey, public: pubkey } = curve25519_js_1.generateKeyPair(seed);\n        return { privkey, pubkey };\n    }\n    async getConsensusIoPubKey() {\n        if (this.consensusIoPubKey.length === 32) {\n            return this.consensusIoPubKey;\n        }\n        const { data: { result: { ioExchPubkey }, }, } = await axios_1.default.get(this.apiUrl + \"/reg/consensus-io-exch-pubkey\", {\n            headers: { \"Content-Type\": \"application/json\" },\n        });\n        this.consensusIoPubKey = encoding_1.Encoding.fromBase64(ioExchPubkey);\n        return this.consensusIoPubKey;\n    }\n    async getTxEncryptionKey(nonce) {\n        const consensusIoPubKey = await this.getConsensusIoPubKey();\n        const txEncryptionIkm = curve25519_js_1.sharedKey(this.privkey, consensusIoPubKey);\n        const { key: txEncryptionKey } = await hkdf.compute(Uint8Array.from([...txEncryptionIkm, ...nonce]), \"SHA-256\", 32, \"\", hkdfSalt);\n        return txEncryptionKey;\n    }\n    async encrypt(contractCodeHash, msg) {\n        const nonce = secureRandom(32, {\n            type: \"Uint8Array\",\n        });\n        const txEncryptionKey = await this.getTxEncryptionKey(nonce);\n        const siv = await miscreant.SIV.importKey(txEncryptionKey, \"AES-SIV\", cryptoProvider);\n        const plaintext = encoding_1.Encoding.toUtf8(contractCodeHash + JSON.stringify(msg));\n        const ciphertext = await siv.seal(plaintext, [new Uint8Array()]);\n        // ciphertext = nonce(32) || wallet_pubkey(32) || ciphertext\n        return Uint8Array.from([...nonce, ...this.pubkey, ...ciphertext]);\n    }\n    async decrypt(ciphertext, nonce) {\n        if (ciphertext.length === 0) {\n            return new Uint8Array();\n        }\n        const txEncryptionKey = await this.getTxEncryptionKey(nonce);\n        const siv = await miscreant.SIV.importKey(txEncryptionKey, \"AES-SIV\", cryptoProvider);\n        const plaintext = await siv.open(ciphertext, [new Uint8Array()]);\n        return plaintext;\n    }\n    getPubkey() {\n        return Promise.resolve(this.pubkey);\n    }\n}\nexports.default = EnigmaUtils;\nmodule.exports = EnigmaUtils;\n//# sourceMappingURL=enigmautils.js.map"]},"metadata":{},"sourceType":"script"}