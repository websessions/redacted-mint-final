{"ast":null,"code":"\"use strict\";\n\nvar _inherits = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _toConsumableArray = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _createForOfIteratorHelper = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction trimLeadingNullBytes(inData) {\n  var numberOfLeadingNullBytes = 0;\n\n  var _iterator = _createForOfIteratorHelper(inData),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var byte = _step.value;\n\n      if (byte === 0x00) {\n        numberOfLeadingNullBytes++;\n      } else {\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return inData.slice(numberOfLeadingNullBytes);\n}\n\nvar derTagInteger = 0x02;\n\nvar Secp256k1Signature = /*#__PURE__*/function () {\n  function Secp256k1Signature(r, s) {\n    _classCallCheck(this, Secp256k1Signature);\n\n    if (r.length > 32 || r.length === 0 || r[0] === 0x00) {\n      throw new Error(\"Unsigned integer r must be encoded as unpadded big endian.\");\n    }\n\n    if (s.length > 32 || s.length === 0 || s[0] === 0x00) {\n      throw new Error(\"Unsigned integer s must be encoded as unpadded big endian.\");\n    }\n\n    this.data = {\n      r: r,\n      s: s\n    };\n  }\n  /**\n   * Takes the pair of integers (r, s) as 2x32 byte of binary data.\n   *\n   * Note: This is the format Cosmos SDK uses natively.\n   *\n   * @param data a 64 byte value containing integers r and s.\n   */\n\n\n  _createClass(Secp256k1Signature, [{\n    key: \"r\",\n    value: function r(length) {\n      if (length === undefined) {\n        return this.data.r;\n      } else {\n        var paddingLength = length - this.data.r.length;\n\n        if (paddingLength < 0) {\n          throw new Error(\"Length too small to hold parameter r\");\n        }\n\n        var padding = new Uint8Array(paddingLength);\n        return new Uint8Array([].concat(_toConsumableArray(padding), _toConsumableArray(this.data.r)));\n      }\n    }\n  }, {\n    key: \"s\",\n    value: function s(length) {\n      if (length === undefined) {\n        return this.data.s;\n      } else {\n        var paddingLength = length - this.data.s.length;\n\n        if (paddingLength < 0) {\n          throw new Error(\"Length too small to hold parameter s\");\n        }\n\n        var padding = new Uint8Array(paddingLength);\n        return new Uint8Array([].concat(_toConsumableArray(padding), _toConsumableArray(this.data.s)));\n      }\n    }\n  }, {\n    key: \"toDer\",\n    value: function toDer() {\n      // DER supports negative integers but our data is unsigned. Thus we need to prepend\n      // a leading 0 byte when the higest bit is set to differentiate nagative values\n      var rEncoded = this.data.r[0] >= 0x80 ? new Uint8Array([0].concat(_toConsumableArray(this.data.r))) : this.data.r;\n      var sEncoded = this.data.s[0] >= 0x80 ? new Uint8Array([0].concat(_toConsumableArray(this.data.s))) : this.data.s;\n      var rLength = rEncoded.length;\n      var sLength = sEncoded.length;\n      var data = new Uint8Array([derTagInteger, rLength].concat(_toConsumableArray(rEncoded), [derTagInteger, sLength], _toConsumableArray(sEncoded)));\n      return new Uint8Array([0x30, data.length].concat(_toConsumableArray(data)));\n    }\n  }], [{\n    key: \"fromFixedLength\",\n    value: function fromFixedLength(data) {\n      if (data.length !== 64) {\n        throw new Error(\"Got invalid data length: \".concat(data.length, \". Expected 2x 32 bytes for the pair (r, s)\"));\n      }\n\n      return new Secp256k1Signature(trimLeadingNullBytes(data.slice(0, 32)), trimLeadingNullBytes(data.slice(32, 64)));\n    }\n  }, {\n    key: \"fromDer\",\n    value: function fromDer(data) {\n      var pos = 0;\n\n      if (data[pos++] !== 0x30) {\n        throw new Error(\"Prefix 0x30 expected\");\n      }\n\n      var bodyLength = data[pos++];\n\n      if (data.length - pos !== bodyLength) {\n        throw new Error(\"Data length mismatch detected\");\n      } // r\n\n\n      var rTag = data[pos++];\n\n      if (rTag !== derTagInteger) {\n        throw new Error(\"INTEGER tag expected\");\n      }\n\n      var rLength = data[pos++];\n\n      if (rLength >= 0x80) {\n        throw new Error(\"Decoding length values above 127 not supported\");\n      }\n\n      var rData = data.slice(pos, pos + rLength);\n      pos += rLength; // s\n\n      var sTag = data[pos++];\n\n      if (sTag !== derTagInteger) {\n        throw new Error(\"INTEGER tag expected\");\n      }\n\n      var sLength = data[pos++];\n\n      if (sLength >= 0x80) {\n        throw new Error(\"Decoding length values above 127 not supported\");\n      }\n\n      var sData = data.slice(pos, pos + sLength);\n      pos += sLength;\n      return new Secp256k1Signature( // r/s data can contain leading 0 bytes to express integers being non-negative in DER\n      trimLeadingNullBytes(rData), trimLeadingNullBytes(sData));\n    }\n  }]);\n\n  return Secp256k1Signature;\n}();\n\nexports.Secp256k1Signature = Secp256k1Signature;\n/**\n * A Secp256k1Signature plus the recovery parameter\n */\n\nvar ExtendedSecp256k1Signature = /*#__PURE__*/function (_Secp256k1Signature) {\n  _inherits(ExtendedSecp256k1Signature, _Secp256k1Signature);\n\n  var _super = _createSuper(ExtendedSecp256k1Signature);\n\n  function ExtendedSecp256k1Signature(r, s, recovery) {\n    var _this;\n\n    _classCallCheck(this, ExtendedSecp256k1Signature);\n\n    _this = _super.call(this, r, s);\n\n    if (!Number.isInteger(recovery)) {\n      throw new Error(\"The recovery parameter must be an integer.\");\n    }\n\n    if (recovery < 0 || recovery > 4) {\n      throw new Error(\"The recovery parameter must be one of 0, 1, 2, 3.\");\n    }\n\n    _this.recovery = recovery;\n    return _this;\n  }\n  /**\n   * Decode extended signature from the simple fixed length encoding\n   * described in toFixedLength().\n   */\n\n\n  _createClass(ExtendedSecp256k1Signature, [{\n    key: \"toFixedLength\",\n    value:\n    /**\n     * A simple custom encoding that encodes the extended signature as\n     * r (32 bytes) | s (32 bytes) | recovery param (1 byte)\n     * where | denotes concatenation of bonary data.\n     */\n    function toFixedLength() {\n      return new Uint8Array([].concat(_toConsumableArray(this.r(32)), _toConsumableArray(this.s(32)), [this.recovery]));\n    }\n  }], [{\n    key: \"fromFixedLength\",\n    value: function fromFixedLength(data) {\n      if (data.length !== 65) {\n        throw new Error(\"Got invalid data length \".concat(data.length, \". Expected 32 + 32 + 1\"));\n      }\n\n      return new ExtendedSecp256k1Signature(trimLeadingNullBytes(data.slice(0, 32)), trimLeadingNullBytes(data.slice(32, 64)), data[64]);\n    }\n  }]);\n\n  return ExtendedSecp256k1Signature;\n}(Secp256k1Signature);\n\nexports.ExtendedSecp256k1Signature = ExtendedSecp256k1Signature;","map":{"version":3,"sources":["../src/secp256k1signature.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction trimLeadingNullBytes(inData) {\n    let numberOfLeadingNullBytes = 0;\n    for (const byte of inData) {\n        if (byte === 0x00) {\n            numberOfLeadingNullBytes++;\n        }\n        else {\n            break;\n        }\n    }\n    return inData.slice(numberOfLeadingNullBytes);\n}\nconst derTagInteger = 0x02;\nclass Secp256k1Signature {\n    constructor(r, s) {\n        if (r.length > 32 || r.length === 0 || r[0] === 0x00) {\n            throw new Error(\"Unsigned integer r must be encoded as unpadded big endian.\");\n        }\n        if (s.length > 32 || s.length === 0 || s[0] === 0x00) {\n            throw new Error(\"Unsigned integer s must be encoded as unpadded big endian.\");\n        }\n        this.data = {\n            r: r,\n            s: s,\n        };\n    }\n    /**\n     * Takes the pair of integers (r, s) as 2x32 byte of binary data.\n     *\n     * Note: This is the format Cosmos SDK uses natively.\n     *\n     * @param data a 64 byte value containing integers r and s.\n     */\n    static fromFixedLength(data) {\n        if (data.length !== 64) {\n            throw new Error(`Got invalid data length: ${data.length}. Expected 2x 32 bytes for the pair (r, s)`);\n        }\n        return new Secp256k1Signature(trimLeadingNullBytes(data.slice(0, 32)), trimLeadingNullBytes(data.slice(32, 64)));\n    }\n    static fromDer(data) {\n        let pos = 0;\n        if (data[pos++] !== 0x30) {\n            throw new Error(\"Prefix 0x30 expected\");\n        }\n        const bodyLength = data[pos++];\n        if (data.length - pos !== bodyLength) {\n            throw new Error(\"Data length mismatch detected\");\n        }\n        // r\n        const rTag = data[pos++];\n        if (rTag !== derTagInteger) {\n            throw new Error(\"INTEGER tag expected\");\n        }\n        const rLength = data[pos++];\n        if (rLength >= 0x80) {\n            throw new Error(\"Decoding length values above 127 not supported\");\n        }\n        const rData = data.slice(pos, pos + rLength);\n        pos += rLength;\n        // s\n        const sTag = data[pos++];\n        if (sTag !== derTagInteger) {\n            throw new Error(\"INTEGER tag expected\");\n        }\n        const sLength = data[pos++];\n        if (sLength >= 0x80) {\n            throw new Error(\"Decoding length values above 127 not supported\");\n        }\n        const sData = data.slice(pos, pos + sLength);\n        pos += sLength;\n        return new Secp256k1Signature(\n        // r/s data can contain leading 0 bytes to express integers being non-negative in DER\n        trimLeadingNullBytes(rData), trimLeadingNullBytes(sData));\n    }\n    r(length) {\n        if (length === undefined) {\n            return this.data.r;\n        }\n        else {\n            const paddingLength = length - this.data.r.length;\n            if (paddingLength < 0) {\n                throw new Error(\"Length too small to hold parameter r\");\n            }\n            const padding = new Uint8Array(paddingLength);\n            return new Uint8Array([...padding, ...this.data.r]);\n        }\n    }\n    s(length) {\n        if (length === undefined) {\n            return this.data.s;\n        }\n        else {\n            const paddingLength = length - this.data.s.length;\n            if (paddingLength < 0) {\n                throw new Error(\"Length too small to hold parameter s\");\n            }\n            const padding = new Uint8Array(paddingLength);\n            return new Uint8Array([...padding, ...this.data.s]);\n        }\n    }\n    toDer() {\n        // DER supports negative integers but our data is unsigned. Thus we need to prepend\n        // a leading 0 byte when the higest bit is set to differentiate nagative values\n        const rEncoded = this.data.r[0] >= 0x80 ? new Uint8Array([0, ...this.data.r]) : this.data.r;\n        const sEncoded = this.data.s[0] >= 0x80 ? new Uint8Array([0, ...this.data.s]) : this.data.s;\n        const rLength = rEncoded.length;\n        const sLength = sEncoded.length;\n        const data = new Uint8Array([derTagInteger, rLength, ...rEncoded, derTagInteger, sLength, ...sEncoded]);\n        return new Uint8Array([0x30, data.length, ...data]);\n    }\n}\nexports.Secp256k1Signature = Secp256k1Signature;\n/**\n * A Secp256k1Signature plus the recovery parameter\n */\nclass ExtendedSecp256k1Signature extends Secp256k1Signature {\n    constructor(r, s, recovery) {\n        super(r, s);\n        if (!Number.isInteger(recovery)) {\n            throw new Error(\"The recovery parameter must be an integer.\");\n        }\n        if (recovery < 0 || recovery > 4) {\n            throw new Error(\"The recovery parameter must be one of 0, 1, 2, 3.\");\n        }\n        this.recovery = recovery;\n    }\n    /**\n     * Decode extended signature from the simple fixed length encoding\n     * described in toFixedLength().\n     */\n    static fromFixedLength(data) {\n        if (data.length !== 65) {\n            throw new Error(`Got invalid data length ${data.length}. Expected 32 + 32 + 1`);\n        }\n        return new ExtendedSecp256k1Signature(trimLeadingNullBytes(data.slice(0, 32)), trimLeadingNullBytes(data.slice(32, 64)), data[64]);\n    }\n    /**\n     * A simple custom encoding that encodes the extended signature as\n     * r (32 bytes) | s (32 bytes) | recovery param (1 byte)\n     * where | denotes concatenation of bonary data.\n     */\n    toFixedLength() {\n        return new Uint8Array([...this.r(32), ...this.s(32), this.recovery]);\n    }\n}\nexports.ExtendedSecp256k1Signature = ExtendedSecp256k1Signature;\n//# sourceMappingURL=secp256k1signature.js.map"]},"metadata":{},"sourceType":"script"}