{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016-2017 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar wipe_1 = require(\"../../internals/wipe\"); // Powers of x mod poly in GF(2).\n\n\nvar POWX = new Uint8Array([0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f]); // FIPS-197 Figure 7. S-box substitution values in hexadecimal format.\n\nvar SBOX0 = new Uint8Array([0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]); // FIPS-197 Figure 14.  Inverse S-box substitution values in hexadecimal format.\n\nvar SBOX1 = new Uint8Array([0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]); // Encryption and decryption tables.\n// Will be computed by initialize() when the first AES instance is created.\n\nvar isInitialized = false;\nvar Te0;\nvar Te1;\nvar Te2;\nvar Te3;\nvar Td0;\nvar Td1;\nvar Td2;\nvar Td3;\n/**\n * Polyfill for the AES block cipher.\n *\n * This implementation uses lookup tables, so it's susceptible to cache-timing\n * side-channel attacks. A constant-time version we tried was super slow (a few\n * kilobytes per second), so we'll have to live with it.\n *\n * Key size: 16 or 32 bytes, block size: 16 bytes.\n */\n\nvar PolyfillAes = /*#__PURE__*/function () {\n  /**\n   * Constructs AES with the given 16 or 32-byte key\n   * for AES-128 or AES-256.\n   */\n  function PolyfillAes(keyData) {\n    _classCallCheck(this, PolyfillAes);\n\n    if (!isInitialized) {\n      initialize();\n    } // Only AES-128 and AES-256 supported. AES-192 is not.\n\n\n    if (keyData.length !== 16 && keyData.length !== 32) {\n      throw new Error(\"Miscreant: invalid key length: \".concat(keyData.length, \" (expected 16 or 32 bytes)\"));\n    }\n\n    this._encKey = expandKey(keyData);\n    this._emptyPromise = Promise.resolve(this);\n  }\n  /**\n   * Cleans expanded keys from memory, setting them to zeros.\n   */\n\n\n  _createClass(PolyfillAes, [{\n    key: \"clear\",\n    value: function clear() {\n      if (this._encKey) {\n        wipe_1.wipe(this._encKey);\n      }\n\n      return this;\n    }\n    /**\n     * Encrypt 16-byte block in-place, replacing its contents with ciphertext.\n     *\n     * This function should not be used to encrypt data without any\n     * cipher mode! It should only be used to implement a cipher mode.\n     * This library uses it to implement AES-SIV.\n     */\n\n  }, {\n    key: \"encryptBlock\",\n    value: function encryptBlock(block) {\n      var src = block.data;\n      var dst = block.data;\n      var s0 = readUint32BE(src, 0);\n      var s1 = readUint32BE(src, 4);\n      var s2 = readUint32BE(src, 8);\n      var s3 = readUint32BE(src, 12); // First round just XORs input with key.\n\n      s0 ^= this._encKey[0];\n      s1 ^= this._encKey[1];\n      s2 ^= this._encKey[2];\n      s3 ^= this._encKey[3];\n      var t0 = 0;\n      var t1 = 0;\n      var t2 = 0;\n      var t3 = 0; // Middle rounds shuffle using tables.\n      // Number of rounds is set by length of expanded key.\n\n      var nr = this._encKey.length / 4 - 2; // - 2: one above, one more below\n\n      var k = 4;\n\n      for (var r = 0; r < nr; r++) {\n        t0 = this._encKey[k + 0] ^ Te0[s0 >>> 24 & 0xff] ^ Te1[s1 >>> 16 & 0xff] ^ Te2[s2 >>> 8 & 0xff] ^ Te3[s3 & 0xff];\n        t1 = this._encKey[k + 1] ^ Te0[s1 >>> 24 & 0xff] ^ Te1[s2 >>> 16 & 0xff] ^ Te2[s3 >>> 8 & 0xff] ^ Te3[s0 & 0xff];\n        t2 = this._encKey[k + 2] ^ Te0[s2 >>> 24 & 0xff] ^ Te1[s3 >>> 16 & 0xff] ^ Te2[s0 >>> 8 & 0xff] ^ Te3[s1 & 0xff];\n        t3 = this._encKey[k + 3] ^ Te0[s3 >>> 24 & 0xff] ^ Te1[s0 >>> 16 & 0xff] ^ Te2[s1 >>> 8 & 0xff] ^ Te3[s2 & 0xff];\n        k += 4;\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n      } // Last round uses s-box directly and XORs to produce output.\n\n\n      s0 = SBOX0[t0 >>> 24] << 24 | SBOX0[t1 >>> 16 & 0xff] << 16 | SBOX0[t2 >>> 8 & 0xff] << 8 | SBOX0[t3 & 0xff];\n      s1 = SBOX0[t1 >>> 24] << 24 | SBOX0[t2 >>> 16 & 0xff] << 16 | SBOX0[t3 >>> 8 & 0xff] << 8 | SBOX0[t0 & 0xff];\n      s2 = SBOX0[t2 >>> 24] << 24 | SBOX0[t3 >>> 16 & 0xff] << 16 | SBOX0[t0 >>> 8 & 0xff] << 8 | SBOX0[t1 & 0xff];\n      s3 = SBOX0[t3 >>> 24] << 24 | SBOX0[t0 >>> 16 & 0xff] << 16 | SBOX0[t1 >>> 8 & 0xff] << 8 | SBOX0[t2 & 0xff];\n      s0 ^= this._encKey[k + 0];\n      s1 ^= this._encKey[k + 1];\n      s2 ^= this._encKey[k + 2];\n      s3 ^= this._encKey[k + 3];\n      writeUint32BE(s0, dst, 0);\n      writeUint32BE(s1, dst, 4);\n      writeUint32BE(s2, dst, 8);\n      writeUint32BE(s3, dst, 12);\n      return this._emptyPromise;\n    }\n  }]);\n\n  return PolyfillAes;\n}();\n\nexports.default = PolyfillAes; // Initialize generates encryption and decryption tables.\n\nfunction initialize() {\n  var poly = 1 << 8 | 1 << 4 | 1 << 3 | 1 << 1 | 1 << 0;\n\n  function mul(b, c) {\n    var i = b;\n    var j = c;\n    var s = 0;\n\n    for (var k = 1; k < 0x100 && j !== 0; k <<= 1) {\n      // Invariant: k == 1<<n, i == b * x^n\n      if ((j & k) !== 0) {\n        // s += i in GF(2); xor in binary\n        s ^= i;\n        j ^= k; // turn off bit to end loop early\n      } // i *= x in GF(2) modulo the polynomial\n\n\n      i <<= 1;\n\n      if ((i & 0x100) !== 0) {\n        i ^= poly;\n      }\n    }\n\n    return s;\n  }\n\n  var rot = function rot(x) {\n    return x << 24 | x >>> 8;\n  }; // Generate encryption tables.\n\n\n  Te0 = new Uint32Array(256);\n  Te1 = new Uint32Array(256);\n  Te2 = new Uint32Array(256);\n  Te3 = new Uint32Array(256);\n\n  for (var i = 0; i < 256; i++) {\n    var s = SBOX0[i];\n    var w = mul(s, 2) << 24 | s << 16 | s << 8 | mul(s, 3);\n    Te0[i] = w;\n    w = rot(w);\n    Te1[i] = w;\n    w = rot(w);\n    Te2[i] = w;\n    w = rot(w);\n    Te3[i] = w;\n    w = rot(w);\n  } // Generate decryption tables.\n\n\n  Td0 = new Uint32Array(256);\n  Td1 = new Uint32Array(256);\n  Td2 = new Uint32Array(256);\n  Td3 = new Uint32Array(256);\n\n  for (var _i = 0; _i < 256; _i++) {\n    var _s = SBOX1[_i];\n\n    var _w = mul(_s, 0xe) << 24 | mul(_s, 0x9) << 16 | mul(_s, 0xd) << 8 | mul(_s, 0xb);\n\n    Td0[_i] = _w;\n    _w = rot(_w);\n    Td1[_i] = _w;\n    _w = rot(_w);\n    Td2[_i] = _w;\n    _w = rot(_w);\n    Td3[_i] = _w;\n    _w = rot(_w);\n  }\n\n  isInitialized = true;\n} // Reads 4 bytes from array starting at offset as big-endian\n// unsigned 32-bit integer and returns it.\n\n\nfunction readUint32BE(array) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return (array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3]) >>> 0;\n} // Writes 4-byte big-endian representation of 32-bit unsigned\n// value to byte array starting at offset.\n//\n// If byte array is not given, creates a new 4-byte one.\n//\n// Returns the output byte array.\n\n\nfunction writeUint32BE(value) {\n  var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint8Array(4);\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  out[offset + 0] = value >>> 24;\n  out[offset + 1] = value >>> 16;\n  out[offset + 2] = value >>> 8;\n  out[offset + 3] = value >>> 0;\n  return out;\n} // Apply sbox0 to each byte in w.\n\n\nfunction subw(w) {\n  return SBOX0[w >>> 24 & 0xff] << 24 | SBOX0[w >>> 16 & 0xff] << 16 | SBOX0[w >>> 8 & 0xff] << 8 | SBOX0[w & 0xff];\n} // Rotate\n\n\nfunction rotw(w) {\n  return w << 8 | w >>> 24;\n}\n\nfunction expandKey(key) {\n  var encKey = new Uint32Array(key.length + 28);\n  var nk = key.length / 4 | 0;\n  var n = encKey.length;\n\n  for (var i = 0; i < nk; i++) {\n    encKey[i] = readUint32BE(key, i * 4);\n  }\n\n  for (var _i2 = nk; _i2 < n; _i2++) {\n    var t = encKey[_i2 - 1];\n\n    if (_i2 % nk === 0) {\n      t = subw(rotw(t)) ^ POWX[_i2 / nk - 1] << 24;\n    } else if (nk > 6 && _i2 % nk === 4) {\n      t = subw(t);\n    }\n\n    encKey[_i2] = encKey[_i2 - nk] ^ t;\n  }\n\n  return encKey;\n}","map":{"version":3,"sources":["/Users/aidansalzmann/redacted-mint/node_modules/miscreant/release/providers/polyfill/aes.js"],"names":["Object","defineProperty","exports","value","wipe_1","require","POWX","Uint8Array","SBOX0","SBOX1","isInitialized","Te0","Te1","Te2","Te3","Td0","Td1","Td2","Td3","PolyfillAes","keyData","initialize","length","Error","_encKey","expandKey","_emptyPromise","Promise","resolve","wipe","block","src","data","dst","s0","readUint32BE","s1","s2","s3","t0","t1","t2","t3","nr","k","r","writeUint32BE","default","poly","mul","b","c","i","j","s","rot","x","Uint32Array","w","array","offset","out","subw","rotw","key","encKey","nk","n","t"],"mappings":"AAAA,a,CACA;AACA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAAtB,C,CACA;;;AACA,IAAMC,IAAI,GAAG,IAAIC,UAAJ,CAAe,CACxB,IADwB,EAClB,IADkB,EACZ,IADY,EACN,IADM,EACA,IADA,EACM,IADN,EACY,IADZ,EACkB,IADlB,EAExB,IAFwB,EAElB,IAFkB,EAEZ,IAFY,EAEN,IAFM,EAEA,IAFA,EAEM,IAFN,EAEY,IAFZ,EAEkB,IAFlB,CAAf,CAAb,C,CAIA;;AACA,IAAMC,KAAK,GAAG,IAAID,UAAJ,CAAe,CACzB,IADyB,EACnB,IADmB,EACb,IADa,EACP,IADO,EACD,IADC,EACK,IADL,EACW,IADX,EACiB,IADjB,EACuB,IADvB,EAC6B,IAD7B,EACmC,IADnC,EACyC,IADzC,EAC+C,IAD/C,EACqD,IADrD,EAC2D,IAD3D,EACiE,IADjE,EAEzB,IAFyB,EAEnB,IAFmB,EAEb,IAFa,EAEP,IAFO,EAED,IAFC,EAEK,IAFL,EAEW,IAFX,EAEiB,IAFjB,EAEuB,IAFvB,EAE6B,IAF7B,EAEmC,IAFnC,EAEyC,IAFzC,EAE+C,IAF/C,EAEqD,IAFrD,EAE2D,IAF3D,EAEiE,IAFjE,EAGzB,IAHyB,EAGnB,IAHmB,EAGb,IAHa,EAGP,IAHO,EAGD,IAHC,EAGK,IAHL,EAGW,IAHX,EAGiB,IAHjB,EAGuB,IAHvB,EAG6B,IAH7B,EAGmC,IAHnC,EAGyC,IAHzC,EAG+C,IAH/C,EAGqD,IAHrD,EAG2D,IAH3D,EAGiE,IAHjE,EAIzB,IAJyB,EAInB,IAJmB,EAIb,IAJa,EAIP,IAJO,EAID,IAJC,EAIK,IAJL,EAIW,IAJX,EAIiB,IAJjB,EAIuB,IAJvB,EAI6B,IAJ7B,EAImC,IAJnC,EAIyC,IAJzC,EAI+C,IAJ/C,EAIqD,IAJrD,EAI2D,IAJ3D,EAIiE,IAJjE,EAKzB,IALyB,EAKnB,IALmB,EAKb,IALa,EAKP,IALO,EAKD,IALC,EAKK,IALL,EAKW,IALX,EAKiB,IALjB,EAKuB,IALvB,EAK6B,IAL7B,EAKmC,IALnC,EAKyC,IALzC,EAK+C,IAL/C,EAKqD,IALrD,EAK2D,IAL3D,EAKiE,IALjE,EAMzB,IANyB,EAMnB,IANmB,EAMb,IANa,EAMP,IANO,EAMD,IANC,EAMK,IANL,EAMW,IANX,EAMiB,IANjB,EAMuB,IANvB,EAM6B,IAN7B,EAMmC,IANnC,EAMyC,IANzC,EAM+C,IAN/C,EAMqD,IANrD,EAM2D,IAN3D,EAMiE,IANjE,EAOzB,IAPyB,EAOnB,IAPmB,EAOb,IAPa,EAOP,IAPO,EAOD,IAPC,EAOK,IAPL,EAOW,IAPX,EAOiB,IAPjB,EAOuB,IAPvB,EAO6B,IAP7B,EAOmC,IAPnC,EAOyC,IAPzC,EAO+C,IAP/C,EAOqD,IAPrD,EAO2D,IAP3D,EAOiE,IAPjE,EAQzB,IARyB,EAQnB,IARmB,EAQb,IARa,EAQP,IARO,EAQD,IARC,EAQK,IARL,EAQW,IARX,EAQiB,IARjB,EAQuB,IARvB,EAQ6B,IAR7B,EAQmC,IARnC,EAQyC,IARzC,EAQ+C,IAR/C,EAQqD,IARrD,EAQ2D,IAR3D,EAQiE,IARjE,EASzB,IATyB,EASnB,IATmB,EASb,IATa,EASP,IATO,EASD,IATC,EASK,IATL,EASW,IATX,EASiB,IATjB,EASuB,IATvB,EAS6B,IAT7B,EASmC,IATnC,EASyC,IATzC,EAS+C,IAT/C,EASqD,IATrD,EAS2D,IAT3D,EASiE,IATjE,EAUzB,IAVyB,EAUnB,IAVmB,EAUb,IAVa,EAUP,IAVO,EAUD,IAVC,EAUK,IAVL,EAUW,IAVX,EAUiB,IAVjB,EAUuB,IAVvB,EAU6B,IAV7B,EAUmC,IAVnC,EAUyC,IAVzC,EAU+C,IAV/C,EAUqD,IAVrD,EAU2D,IAV3D,EAUiE,IAVjE,EAWzB,IAXyB,EAWnB,IAXmB,EAWb,IAXa,EAWP,IAXO,EAWD,IAXC,EAWK,IAXL,EAWW,IAXX,EAWiB,IAXjB,EAWuB,IAXvB,EAW6B,IAX7B,EAWmC,IAXnC,EAWyC,IAXzC,EAW+C,IAX/C,EAWqD,IAXrD,EAW2D,IAX3D,EAWiE,IAXjE,EAYzB,IAZyB,EAYnB,IAZmB,EAYb,IAZa,EAYP,IAZO,EAYD,IAZC,EAYK,IAZL,EAYW,IAZX,EAYiB,IAZjB,EAYuB,IAZvB,EAY6B,IAZ7B,EAYmC,IAZnC,EAYyC,IAZzC,EAY+C,IAZ/C,EAYqD,IAZrD,EAY2D,IAZ3D,EAYiE,IAZjE,EAazB,IAbyB,EAanB,IAbmB,EAab,IAba,EAaP,IAbO,EAaD,IAbC,EAaK,IAbL,EAaW,IAbX,EAaiB,IAbjB,EAauB,IAbvB,EAa6B,IAb7B,EAamC,IAbnC,EAayC,IAbzC,EAa+C,IAb/C,EAaqD,IAbrD,EAa2D,IAb3D,EAaiE,IAbjE,EAczB,IAdyB,EAcnB,IAdmB,EAcb,IAda,EAcP,IAdO,EAcD,IAdC,EAcK,IAdL,EAcW,IAdX,EAciB,IAdjB,EAcuB,IAdvB,EAc6B,IAd7B,EAcmC,IAdnC,EAcyC,IAdzC,EAc+C,IAd/C,EAcqD,IAdrD,EAc2D,IAd3D,EAciE,IAdjE,EAezB,IAfyB,EAenB,IAfmB,EAeb,IAfa,EAeP,IAfO,EAeD,IAfC,EAeK,IAfL,EAeW,IAfX,EAeiB,IAfjB,EAeuB,IAfvB,EAe6B,IAf7B,EAemC,IAfnC,EAeyC,IAfzC,EAe+C,IAf/C,EAeqD,IAfrD,EAe2D,IAf3D,EAeiE,IAfjE,EAgBzB,IAhByB,EAgBnB,IAhBmB,EAgBb,IAhBa,EAgBP,IAhBO,EAgBD,IAhBC,EAgBK,IAhBL,EAgBW,IAhBX,EAgBiB,IAhBjB,EAgBuB,IAhBvB,EAgB6B,IAhB7B,EAgBmC,IAhBnC,EAgByC,IAhBzC,EAgB+C,IAhB/C,EAgBqD,IAhBrD,EAgB2D,IAhB3D,EAgBiE,IAhBjE,CAAf,CAAd,C,CAkBA;;AACA,IAAME,KAAK,GAAG,IAAIF,UAAJ,CAAe,CACzB,IADyB,EACnB,IADmB,EACb,IADa,EACP,IADO,EACD,IADC,EACK,IADL,EACW,IADX,EACiB,IADjB,EACuB,IADvB,EAC6B,IAD7B,EACmC,IADnC,EACyC,IADzC,EAC+C,IAD/C,EACqD,IADrD,EAC2D,IAD3D,EACiE,IADjE,EAEzB,IAFyB,EAEnB,IAFmB,EAEb,IAFa,EAEP,IAFO,EAED,IAFC,EAEK,IAFL,EAEW,IAFX,EAEiB,IAFjB,EAEuB,IAFvB,EAE6B,IAF7B,EAEmC,IAFnC,EAEyC,IAFzC,EAE+C,IAF/C,EAEqD,IAFrD,EAE2D,IAF3D,EAEiE,IAFjE,EAGzB,IAHyB,EAGnB,IAHmB,EAGb,IAHa,EAGP,IAHO,EAGD,IAHC,EAGK,IAHL,EAGW,IAHX,EAGiB,IAHjB,EAGuB,IAHvB,EAG6B,IAH7B,EAGmC,IAHnC,EAGyC,IAHzC,EAG+C,IAH/C,EAGqD,IAHrD,EAG2D,IAH3D,EAGiE,IAHjE,EAIzB,IAJyB,EAInB,IAJmB,EAIb,IAJa,EAIP,IAJO,EAID,IAJC,EAIK,IAJL,EAIW,IAJX,EAIiB,IAJjB,EAIuB,IAJvB,EAI6B,IAJ7B,EAImC,IAJnC,EAIyC,IAJzC,EAI+C,IAJ/C,EAIqD,IAJrD,EAI2D,IAJ3D,EAIiE,IAJjE,EAKzB,IALyB,EAKnB,IALmB,EAKb,IALa,EAKP,IALO,EAKD,IALC,EAKK,IALL,EAKW,IALX,EAKiB,IALjB,EAKuB,IALvB,EAK6B,IAL7B,EAKmC,IALnC,EAKyC,IALzC,EAK+C,IAL/C,EAKqD,IALrD,EAK2D,IAL3D,EAKiE,IALjE,EAMzB,IANyB,EAMnB,IANmB,EAMb,IANa,EAMP,IANO,EAMD,IANC,EAMK,IANL,EAMW,IANX,EAMiB,IANjB,EAMuB,IANvB,EAM6B,IAN7B,EAMmC,IANnC,EAMyC,IANzC,EAM+C,IAN/C,EAMqD,IANrD,EAM2D,IAN3D,EAMiE,IANjE,EAOzB,IAPyB,EAOnB,IAPmB,EAOb,IAPa,EAOP,IAPO,EAOD,IAPC,EAOK,IAPL,EAOW,IAPX,EAOiB,IAPjB,EAOuB,IAPvB,EAO6B,IAP7B,EAOmC,IAPnC,EAOyC,IAPzC,EAO+C,IAP/C,EAOqD,IAPrD,EAO2D,IAP3D,EAOiE,IAPjE,EAQzB,IARyB,EAQnB,IARmB,EAQb,IARa,EAQP,IARO,EAQD,IARC,EAQK,IARL,EAQW,IARX,EAQiB,IARjB,EAQuB,IARvB,EAQ6B,IAR7B,EAQmC,IARnC,EAQyC,IARzC,EAQ+C,IAR/C,EAQqD,IARrD,EAQ2D,IAR3D,EAQiE,IARjE,EASzB,IATyB,EASnB,IATmB,EASb,IATa,EASP,IATO,EASD,IATC,EASK,IATL,EASW,IATX,EASiB,IATjB,EASuB,IATvB,EAS6B,IAT7B,EASmC,IATnC,EASyC,IATzC,EAS+C,IAT/C,EASqD,IATrD,EAS2D,IAT3D,EASiE,IATjE,EAUzB,IAVyB,EAUnB,IAVmB,EAUb,IAVa,EAUP,IAVO,EAUD,IAVC,EAUK,IAVL,EAUW,IAVX,EAUiB,IAVjB,EAUuB,IAVvB,EAU6B,IAV7B,EAUmC,IAVnC,EAUyC,IAVzC,EAU+C,IAV/C,EAUqD,IAVrD,EAU2D,IAV3D,EAUiE,IAVjE,EAWzB,IAXyB,EAWnB,IAXmB,EAWb,IAXa,EAWP,IAXO,EAWD,IAXC,EAWK,IAXL,EAWW,IAXX,EAWiB,IAXjB,EAWuB,IAXvB,EAW6B,IAX7B,EAWmC,IAXnC,EAWyC,IAXzC,EAW+C,IAX/C,EAWqD,IAXrD,EAW2D,IAX3D,EAWiE,IAXjE,EAYzB,IAZyB,EAYnB,IAZmB,EAYb,IAZa,EAYP,IAZO,EAYD,IAZC,EAYK,IAZL,EAYW,IAZX,EAYiB,IAZjB,EAYuB,IAZvB,EAY6B,IAZ7B,EAYmC,IAZnC,EAYyC,IAZzC,EAY+C,IAZ/C,EAYqD,IAZrD,EAY2D,IAZ3D,EAYiE,IAZjE,EAazB,IAbyB,EAanB,IAbmB,EAab,IAba,EAaP,IAbO,EAaD,IAbC,EAaK,IAbL,EAaW,IAbX,EAaiB,IAbjB,EAauB,IAbvB,EAa6B,IAb7B,EAamC,IAbnC,EAayC,IAbzC,EAa+C,IAb/C,EAaqD,IAbrD,EAa2D,IAb3D,EAaiE,IAbjE,EAczB,IAdyB,EAcnB,IAdmB,EAcb,IAda,EAcP,IAdO,EAcD,IAdC,EAcK,IAdL,EAcW,IAdX,EAciB,IAdjB,EAcuB,IAdvB,EAc6B,IAd7B,EAcmC,IAdnC,EAcyC,IAdzC,EAc+C,IAd/C,EAcqD,IAdrD,EAc2D,IAd3D,EAciE,IAdjE,EAezB,IAfyB,EAenB,IAfmB,EAeb,IAfa,EAeP,IAfO,EAeD,IAfC,EAeK,IAfL,EAeW,IAfX,EAeiB,IAfjB,EAeuB,IAfvB,EAe6B,IAf7B,EAemC,IAfnC,EAeyC,IAfzC,EAe+C,IAf/C,EAeqD,IAfrD,EAe2D,IAf3D,EAeiE,IAfjE,EAgBzB,IAhByB,EAgBnB,IAhBmB,EAgBb,IAhBa,EAgBP,IAhBO,EAgBD,IAhBC,EAgBK,IAhBL,EAgBW,IAhBX,EAgBiB,IAhBjB,EAgBuB,IAhBvB,EAgB6B,IAhB7B,EAgBmC,IAhBnC,EAgByC,IAhBzC,EAgB+C,IAhB/C,EAgBqD,IAhBrD,EAgB2D,IAhB3D,EAgBiE,IAhBjE,CAAf,CAAd,C,CAkBA;AACA;;AACA,IAAIG,aAAa,GAAG,KAApB;AACA,IAAIC,GAAJ;AACA,IAAIC,GAAJ;AACA,IAAIC,GAAJ;AACA,IAAIC,GAAJ;AACA,IAAIC,GAAJ;AACA,IAAIC,GAAJ;AACA,IAAIC,GAAJ;AACA,IAAIC,GAAJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,W;AACF;AACJ;AACA;AACA;AACI,uBAAYC,OAAZ,EAAqB;AAAA;;AACjB,QAAI,CAACV,aAAL,EAAoB;AAChBW,MAAAA,UAAU;AACb,KAHgB,CAIjB;;;AACA,QAAID,OAAO,CAACE,MAAR,KAAmB,EAAnB,IAAyBF,OAAO,CAACE,MAAR,KAAmB,EAAhD,EAAoD;AAChD,YAAM,IAAIC,KAAJ,0CAA4CH,OAAO,CAACE,MAApD,gCAAN;AACH;;AACD,SAAKE,OAAL,GAAeC,SAAS,CAACL,OAAD,CAAxB;AACA,SAAKM,aAAL,GAAqBC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAArB;AACH;AACD;AACJ;AACA;;;;;WACI,iBAAQ;AACJ,UAAI,KAAKJ,OAAT,EAAkB;AACdpB,QAAAA,MAAM,CAACyB,IAAP,CAAY,KAAKL,OAAjB;AACH;;AACD,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,sBAAaM,KAAb,EAAoB;AAChB,UAAMC,GAAG,GAAGD,KAAK,CAACE,IAAlB;AACA,UAAMC,GAAG,GAAGH,KAAK,CAACE,IAAlB;AACA,UAAIE,EAAE,GAAGC,YAAY,CAACJ,GAAD,EAAM,CAAN,CAArB;AACA,UAAIK,EAAE,GAAGD,YAAY,CAACJ,GAAD,EAAM,CAAN,CAArB;AACA,UAAIM,EAAE,GAAGF,YAAY,CAACJ,GAAD,EAAM,CAAN,CAArB;AACA,UAAIO,EAAE,GAAGH,YAAY,CAACJ,GAAD,EAAM,EAAN,CAArB,CANgB,CAOhB;;AACAG,MAAAA,EAAE,IAAI,KAAKV,OAAL,CAAa,CAAb,CAAN;AACAY,MAAAA,EAAE,IAAI,KAAKZ,OAAL,CAAa,CAAb,CAAN;AACAa,MAAAA,EAAE,IAAI,KAAKb,OAAL,CAAa,CAAb,CAAN;AACAc,MAAAA,EAAE,IAAI,KAAKd,OAAL,CAAa,CAAb,CAAN;AACA,UAAIe,EAAE,GAAG,CAAT;AACA,UAAIC,EAAE,GAAG,CAAT;AACA,UAAIC,EAAE,GAAG,CAAT;AACA,UAAIC,EAAE,GAAG,CAAT,CAfgB,CAgBhB;AACA;;AACA,UAAMC,EAAE,GAAG,KAAKnB,OAAL,CAAaF,MAAb,GAAsB,CAAtB,GAA0B,CAArC,CAlBgB,CAkBwB;;AACxC,UAAIsB,CAAC,GAAG,CAAR;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,EAApB,EAAwBE,CAAC,EAAzB,EAA6B;AACzBN,QAAAA,EAAE,GAAG,KAAKf,OAAL,CAAaoB,CAAC,GAAG,CAAjB,IAAsBjC,GAAG,CAAEuB,EAAE,KAAK,EAAR,GAAc,IAAf,CAAzB,GAAgDtB,GAAG,CAAEwB,EAAE,KAAK,EAAR,GAAc,IAAf,CAAnD,GACDvB,GAAG,CAAEwB,EAAE,KAAK,CAAR,GAAa,IAAd,CADF,GACwBvB,GAAG,CAACwB,EAAE,GAAG,IAAN,CADhC;AAEAE,QAAAA,EAAE,GAAG,KAAKhB,OAAL,CAAaoB,CAAC,GAAG,CAAjB,IAAsBjC,GAAG,CAAEyB,EAAE,KAAK,EAAR,GAAc,IAAf,CAAzB,GAAgDxB,GAAG,CAAEyB,EAAE,KAAK,EAAR,GAAc,IAAf,CAAnD,GACDxB,GAAG,CAAEyB,EAAE,KAAK,CAAR,GAAa,IAAd,CADF,GACwBxB,GAAG,CAACoB,EAAE,GAAG,IAAN,CADhC;AAEAO,QAAAA,EAAE,GAAG,KAAKjB,OAAL,CAAaoB,CAAC,GAAG,CAAjB,IAAsBjC,GAAG,CAAE0B,EAAE,KAAK,EAAR,GAAc,IAAf,CAAzB,GAAgDzB,GAAG,CAAE0B,EAAE,KAAK,EAAR,GAAc,IAAf,CAAnD,GACDzB,GAAG,CAAEqB,EAAE,KAAK,CAAR,GAAa,IAAd,CADF,GACwBpB,GAAG,CAACsB,EAAE,GAAG,IAAN,CADhC;AAEAM,QAAAA,EAAE,GAAG,KAAKlB,OAAL,CAAaoB,CAAC,GAAG,CAAjB,IAAsBjC,GAAG,CAAE2B,EAAE,KAAK,EAAR,GAAc,IAAf,CAAzB,GAAgD1B,GAAG,CAAEsB,EAAE,KAAK,EAAR,GAAc,IAAf,CAAnD,GACDrB,GAAG,CAAEuB,EAAE,KAAK,CAAR,GAAa,IAAd,CADF,GACwBtB,GAAG,CAACuB,EAAE,GAAG,IAAN,CADhC;AAEAO,QAAAA,CAAC,IAAI,CAAL;AACAV,QAAAA,EAAE,GAAGK,EAAL;AACAH,QAAAA,EAAE,GAAGI,EAAL;AACAH,QAAAA,EAAE,GAAGI,EAAL;AACAH,QAAAA,EAAE,GAAGI,EAAL;AACH,OAlCe,CAmChB;;;AACAR,MAAAA,EAAE,GAAI1B,KAAK,CAAC+B,EAAE,KAAK,EAAR,CAAL,IAAoB,EAArB,GAA4B/B,KAAK,CAAEgC,EAAE,KAAK,EAAR,GAAc,IAAf,CAAN,IAA+B,EAA1D,GACAhC,KAAK,CAAEiC,EAAE,KAAK,CAAR,GAAa,IAAd,CAAN,IAA8B,CAD7B,GACkCjC,KAAK,CAACkC,EAAE,GAAG,IAAN,CAD5C;AAEAN,MAAAA,EAAE,GAAI5B,KAAK,CAACgC,EAAE,KAAK,EAAR,CAAL,IAAoB,EAArB,GAA4BhC,KAAK,CAAEiC,EAAE,KAAK,EAAR,GAAc,IAAf,CAAN,IAA+B,EAA1D,GACAjC,KAAK,CAAEkC,EAAE,KAAK,CAAR,GAAa,IAAd,CAAN,IAA8B,CAD7B,GACkClC,KAAK,CAAC+B,EAAE,GAAG,IAAN,CAD5C;AAEAF,MAAAA,EAAE,GAAI7B,KAAK,CAACiC,EAAE,KAAK,EAAR,CAAL,IAAoB,EAArB,GAA4BjC,KAAK,CAAEkC,EAAE,KAAK,EAAR,GAAc,IAAf,CAAN,IAA+B,EAA1D,GACAlC,KAAK,CAAE+B,EAAE,KAAK,CAAR,GAAa,IAAd,CAAN,IAA8B,CAD7B,GACkC/B,KAAK,CAACgC,EAAE,GAAG,IAAN,CAD5C;AAEAF,MAAAA,EAAE,GAAI9B,KAAK,CAACkC,EAAE,KAAK,EAAR,CAAL,IAAoB,EAArB,GAA4BlC,KAAK,CAAE+B,EAAE,KAAK,EAAR,GAAc,IAAf,CAAN,IAA+B,EAA1D,GACA/B,KAAK,CAAEgC,EAAE,KAAK,CAAR,GAAa,IAAd,CAAN,IAA8B,CAD7B,GACkChC,KAAK,CAACiC,EAAE,GAAG,IAAN,CAD5C;AAEAP,MAAAA,EAAE,IAAI,KAAKV,OAAL,CAAaoB,CAAC,GAAG,CAAjB,CAAN;AACAR,MAAAA,EAAE,IAAI,KAAKZ,OAAL,CAAaoB,CAAC,GAAG,CAAjB,CAAN;AACAP,MAAAA,EAAE,IAAI,KAAKb,OAAL,CAAaoB,CAAC,GAAG,CAAjB,CAAN;AACAN,MAAAA,EAAE,IAAI,KAAKd,OAAL,CAAaoB,CAAC,GAAG,CAAjB,CAAN;AACAE,MAAAA,aAAa,CAACZ,EAAD,EAAKD,GAAL,EAAU,CAAV,CAAb;AACAa,MAAAA,aAAa,CAACV,EAAD,EAAKH,GAAL,EAAU,CAAV,CAAb;AACAa,MAAAA,aAAa,CAACT,EAAD,EAAKJ,GAAL,EAAU,CAAV,CAAb;AACAa,MAAAA,aAAa,CAACR,EAAD,EAAKL,GAAL,EAAU,EAAV,CAAb;AACA,aAAO,KAAKP,aAAZ;AACH;;;;;;AAELxB,OAAO,CAAC6C,OAAR,GAAkB5B,WAAlB,C,CACA;;AACA,SAASE,UAAT,GAAsB;AAClB,MAAM2B,IAAI,GAAI,KAAK,CAAN,GAAY,KAAK,CAAjB,GAAuB,KAAK,CAA5B,GAAkC,KAAK,CAAvC,GAA6C,KAAK,CAA/D;;AACA,WAASC,GAAT,CAAaC,CAAb,EAAgBC,CAAhB,EAAmB;AACf,QAAIC,CAAC,GAAGF,CAAR;AACA,QAAIG,CAAC,GAAGF,CAAR;AACA,QAAIG,CAAC,GAAG,CAAR;;AACA,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAJ,IAAaS,CAAC,KAAK,CAAnC,EAAsCT,CAAC,KAAK,CAA5C,EAA+C;AAC3C;AACA,UAAI,CAACS,CAAC,GAAGT,CAAL,MAAY,CAAhB,EAAmB;AACf;AACAU,QAAAA,CAAC,IAAIF,CAAL;AACAC,QAAAA,CAAC,IAAIT,CAAL,CAHe,CAGP;AACX,OAN0C,CAO3C;;;AACAQ,MAAAA,CAAC,KAAK,CAAN;;AACA,UAAI,CAACA,CAAC,GAAG,KAAL,MAAgB,CAApB,EAAuB;AACnBA,QAAAA,CAAC,IAAIJ,IAAL;AACH;AACJ;;AACD,WAAOM,CAAP;AACH;;AACD,MAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,CAAD;AAAA,WAAQA,CAAC,IAAI,EAAN,GAAaA,CAAC,KAAK,CAA1B;AAAA,GAAZ,CArBkB,CAsBlB;;;AACA7C,EAAAA,GAAG,GAAG,IAAI8C,WAAJ,CAAgB,GAAhB,CAAN;AACA7C,EAAAA,GAAG,GAAG,IAAI6C,WAAJ,CAAgB,GAAhB,CAAN;AACA5C,EAAAA,GAAG,GAAG,IAAI4C,WAAJ,CAAgB,GAAhB,CAAN;AACA3C,EAAAA,GAAG,GAAG,IAAI2C,WAAJ,CAAgB,GAAhB,CAAN;;AACA,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1B,QAAME,CAAC,GAAG9C,KAAK,CAAC4C,CAAD,CAAf;AACA,QAAIM,CAAC,GAAIT,GAAG,CAACK,CAAD,EAAI,CAAJ,CAAH,IAAa,EAAd,GAAqBA,CAAC,IAAI,EAA1B,GAAiCA,CAAC,IAAI,CAAtC,GAA2CL,GAAG,CAACK,CAAD,EAAI,CAAJ,CAAtD;AACA3C,IAAAA,GAAG,CAACyC,CAAD,CAAH,GAASM,CAAT;AACAA,IAAAA,CAAC,GAAGH,GAAG,CAACG,CAAD,CAAP;AACA9C,IAAAA,GAAG,CAACwC,CAAD,CAAH,GAASM,CAAT;AACAA,IAAAA,CAAC,GAAGH,GAAG,CAACG,CAAD,CAAP;AACA7C,IAAAA,GAAG,CAACuC,CAAD,CAAH,GAASM,CAAT;AACAA,IAAAA,CAAC,GAAGH,GAAG,CAACG,CAAD,CAAP;AACA5C,IAAAA,GAAG,CAACsC,CAAD,CAAH,GAASM,CAAT;AACAA,IAAAA,CAAC,GAAGH,GAAG,CAACG,CAAD,CAAP;AACH,GAtCiB,CAuClB;;;AACA3C,EAAAA,GAAG,GAAG,IAAI0C,WAAJ,CAAgB,GAAhB,CAAN;AACAzC,EAAAA,GAAG,GAAG,IAAIyC,WAAJ,CAAgB,GAAhB,CAAN;AACAxC,EAAAA,GAAG,GAAG,IAAIwC,WAAJ,CAAgB,GAAhB,CAAN;AACAvC,EAAAA,GAAG,GAAG,IAAIuC,WAAJ,CAAgB,GAAhB,CAAN;;AACA,OAAK,IAAIL,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG,GAApB,EAAyBA,EAAC,EAA1B,EAA8B;AAC1B,QAAME,EAAC,GAAG7C,KAAK,CAAC2C,EAAD,CAAf;;AACA,QAAIM,EAAC,GAAIT,GAAG,CAACK,EAAD,EAAI,GAAJ,CAAH,IAAe,EAAhB,GAAuBL,GAAG,CAACK,EAAD,EAAI,GAAJ,CAAH,IAAe,EAAtC,GACHL,GAAG,CAACK,EAAD,EAAI,GAAJ,CAAH,IAAe,CADZ,GACiBL,GAAG,CAACK,EAAD,EAAI,GAAJ,CAD5B;;AAEAvC,IAAAA,GAAG,CAACqC,EAAD,CAAH,GAASM,EAAT;AACAA,IAAAA,EAAC,GAAGH,GAAG,CAACG,EAAD,CAAP;AACA1C,IAAAA,GAAG,CAACoC,EAAD,CAAH,GAASM,EAAT;AACAA,IAAAA,EAAC,GAAGH,GAAG,CAACG,EAAD,CAAP;AACAzC,IAAAA,GAAG,CAACmC,EAAD,CAAH,GAASM,EAAT;AACAA,IAAAA,EAAC,GAAGH,GAAG,CAACG,EAAD,CAAP;AACAxC,IAAAA,GAAG,CAACkC,EAAD,CAAH,GAASM,EAAT;AACAA,IAAAA,EAAC,GAAGH,GAAG,CAACG,EAAD,CAAP;AACH;;AACDhD,EAAAA,aAAa,GAAG,IAAhB;AACH,C,CACD;AACA;;;AACA,SAASyB,YAAT,CAAsBwB,KAAtB,EAAyC;AAAA,MAAZC,MAAY,uEAAH,CAAG;AACrC,SAAO,CAAED,KAAK,CAACC,MAAD,CAAL,IAAiB,EAAlB,GACHD,KAAK,CAACC,MAAM,GAAG,CAAV,CAAL,IAAqB,EADlB,GAEHD,KAAK,CAACC,MAAM,GAAG,CAAV,CAAL,IAAqB,CAFlB,GAGJD,KAAK,CAACC,MAAM,GAAG,CAAV,CAHF,MAGoB,CAH3B;AAIH,C,CACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASd,aAAT,CAAuB3C,KAAvB,EAAmE;AAAA,MAArC0D,GAAqC,uEAA/B,IAAItD,UAAJ,CAAe,CAAf,CAA+B;AAAA,MAAZqD,MAAY,uEAAH,CAAG;AAC/DC,EAAAA,GAAG,CAACD,MAAM,GAAG,CAAV,CAAH,GAAkBzD,KAAK,KAAK,EAA5B;AACA0D,EAAAA,GAAG,CAACD,MAAM,GAAG,CAAV,CAAH,GAAkBzD,KAAK,KAAK,EAA5B;AACA0D,EAAAA,GAAG,CAACD,MAAM,GAAG,CAAV,CAAH,GAAkBzD,KAAK,KAAK,CAA5B;AACA0D,EAAAA,GAAG,CAACD,MAAM,GAAG,CAAV,CAAH,GAAkBzD,KAAK,KAAK,CAA5B;AACA,SAAO0D,GAAP;AACH,C,CACD;;;AACA,SAASC,IAAT,CAAcJ,CAAd,EAAiB;AACb,SAASlD,KAAK,CAAEkD,CAAC,KAAK,EAAP,GAAa,IAAd,CAAN,IAA8B,EAA/B,GACDlD,KAAK,CAAEkD,CAAC,KAAK,EAAP,GAAa,IAAd,CAAN,IAA8B,EAD5B,GAEDlD,KAAK,CAAEkD,CAAC,KAAK,CAAP,GAAY,IAAb,CAAN,IAA6B,CAF3B,GAGFlD,KAAK,CAACkD,CAAC,GAAG,IAAL,CAHV;AAIH,C,CACD;;;AACA,SAASK,IAAT,CAAcL,CAAd,EAAiB;AACb,SAAQA,CAAC,IAAI,CAAN,GAAYA,CAAC,KAAK,EAAzB;AACH;;AACD,SAASjC,SAAT,CAAmBuC,GAAnB,EAAwB;AACpB,MAAMC,MAAM,GAAG,IAAIR,WAAJ,CAAgBO,GAAG,CAAC1C,MAAJ,GAAa,EAA7B,CAAf;AACA,MAAM4C,EAAE,GAAGF,GAAG,CAAC1C,MAAJ,GAAa,CAAb,GAAiB,CAA5B;AACA,MAAM6C,CAAC,GAAGF,MAAM,CAAC3C,MAAjB;;AACA,OAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,EAApB,EAAwBd,CAAC,EAAzB,EAA6B;AACzBa,IAAAA,MAAM,CAACb,CAAD,CAAN,GAAYjB,YAAY,CAAC6B,GAAD,EAAMZ,CAAC,GAAG,CAAV,CAAxB;AACH;;AACD,OAAK,IAAIA,GAAC,GAAGc,EAAb,EAAiBd,GAAC,GAAGe,CAArB,EAAwBf,GAAC,EAAzB,EAA6B;AACzB,QAAIgB,CAAC,GAAGH,MAAM,CAACb,GAAC,GAAG,CAAL,CAAd;;AACA,QAAIA,GAAC,GAAGc,EAAJ,KAAW,CAAf,EAAkB;AACdE,MAAAA,CAAC,GAAGN,IAAI,CAACC,IAAI,CAACK,CAAD,CAAL,CAAJ,GAAiB9D,IAAI,CAAC8C,GAAC,GAAGc,EAAJ,GAAS,CAAV,CAAJ,IAAoB,EAAzC;AACH,KAFD,MAGK,IAAIA,EAAE,GAAG,CAAL,IAAUd,GAAC,GAAGc,EAAJ,KAAW,CAAzB,EAA4B;AAC7BE,MAAAA,CAAC,GAAGN,IAAI,CAACM,CAAD,CAAR;AACH;;AACDH,IAAAA,MAAM,CAACb,GAAD,CAAN,GAAYa,MAAM,CAACb,GAAC,GAAGc,EAAL,CAAN,GAAiBE,CAA7B;AACH;;AACD,SAAOH,MAAP;AACH","sourcesContent":["\"use strict\";\n// Copyright (C) 2016-2017 Dmitry Chestnykh, Tony Arcieri\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst wipe_1 = require(\"../../internals/wipe\");\n// Powers of x mod poly in GF(2).\nconst POWX = new Uint8Array([\n    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n    0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f,\n]);\n// FIPS-197 Figure 7. S-box substitution values in hexadecimal format.\nconst SBOX0 = new Uint8Array([\n    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,\n    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,\n    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\n    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,\n    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,\n    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\n    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,\n    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,\n    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\n    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,\n    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,\n    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\n    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,\n    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,\n    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\n    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,\n]);\n// FIPS-197 Figure 14.  Inverse S-box substitution values in hexadecimal format.\nconst SBOX1 = new Uint8Array([\n    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,\n    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,\n    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,\n    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,\n    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,\n    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,\n    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,\n    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,\n    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,\n    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,\n    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,\n    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,\n    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,\n    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,\n    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,\n    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,\n]);\n// Encryption and decryption tables.\n// Will be computed by initialize() when the first AES instance is created.\nlet isInitialized = false;\nlet Te0;\nlet Te1;\nlet Te2;\nlet Te3;\nlet Td0;\nlet Td1;\nlet Td2;\nlet Td3;\n/**\n * Polyfill for the AES block cipher.\n *\n * This implementation uses lookup tables, so it's susceptible to cache-timing\n * side-channel attacks. A constant-time version we tried was super slow (a few\n * kilobytes per second), so we'll have to live with it.\n *\n * Key size: 16 or 32 bytes, block size: 16 bytes.\n */\nclass PolyfillAes {\n    /**\n     * Constructs AES with the given 16 or 32-byte key\n     * for AES-128 or AES-256.\n     */\n    constructor(keyData) {\n        if (!isInitialized) {\n            initialize();\n        }\n        // Only AES-128 and AES-256 supported. AES-192 is not.\n        if (keyData.length !== 16 && keyData.length !== 32) {\n            throw new Error(`Miscreant: invalid key length: ${keyData.length} (expected 16 or 32 bytes)`);\n        }\n        this._encKey = expandKey(keyData);\n        this._emptyPromise = Promise.resolve(this);\n    }\n    /**\n     * Cleans expanded keys from memory, setting them to zeros.\n     */\n    clear() {\n        if (this._encKey) {\n            wipe_1.wipe(this._encKey);\n        }\n        return this;\n    }\n    /**\n     * Encrypt 16-byte block in-place, replacing its contents with ciphertext.\n     *\n     * This function should not be used to encrypt data without any\n     * cipher mode! It should only be used to implement a cipher mode.\n     * This library uses it to implement AES-SIV.\n     */\n    encryptBlock(block) {\n        const src = block.data;\n        const dst = block.data;\n        let s0 = readUint32BE(src, 0);\n        let s1 = readUint32BE(src, 4);\n        let s2 = readUint32BE(src, 8);\n        let s3 = readUint32BE(src, 12);\n        // First round just XORs input with key.\n        s0 ^= this._encKey[0];\n        s1 ^= this._encKey[1];\n        s2 ^= this._encKey[2];\n        s3 ^= this._encKey[3];\n        let t0 = 0;\n        let t1 = 0;\n        let t2 = 0;\n        let t3 = 0;\n        // Middle rounds shuffle using tables.\n        // Number of rounds is set by length of expanded key.\n        const nr = this._encKey.length / 4 - 2; // - 2: one above, one more below\n        let k = 4;\n        for (let r = 0; r < nr; r++) {\n            t0 = this._encKey[k + 0] ^ Te0[(s0 >>> 24) & 0xff] ^ Te1[(s1 >>> 16) & 0xff] ^\n                Te2[(s2 >>> 8) & 0xff] ^ Te3[s3 & 0xff];\n            t1 = this._encKey[k + 1] ^ Te0[(s1 >>> 24) & 0xff] ^ Te1[(s2 >>> 16) & 0xff] ^\n                Te2[(s3 >>> 8) & 0xff] ^ Te3[s0 & 0xff];\n            t2 = this._encKey[k + 2] ^ Te0[(s2 >>> 24) & 0xff] ^ Te1[(s3 >>> 16) & 0xff] ^\n                Te2[(s0 >>> 8) & 0xff] ^ Te3[s1 & 0xff];\n            t3 = this._encKey[k + 3] ^ Te0[(s3 >>> 24) & 0xff] ^ Te1[(s0 >>> 16) & 0xff] ^\n                Te2[(s1 >>> 8) & 0xff] ^ Te3[s2 & 0xff];\n            k += 4;\n            s0 = t0;\n            s1 = t1;\n            s2 = t2;\n            s3 = t3;\n        }\n        // Last round uses s-box directly and XORs to produce output.\n        s0 = (SBOX0[t0 >>> 24] << 24) | (SBOX0[(t1 >>> 16) & 0xff]) << 16 |\n            (SBOX0[(t2 >>> 8) & 0xff]) << 8 | (SBOX0[t3 & 0xff]);\n        s1 = (SBOX0[t1 >>> 24] << 24) | (SBOX0[(t2 >>> 16) & 0xff]) << 16 |\n            (SBOX0[(t3 >>> 8) & 0xff]) << 8 | (SBOX0[t0 & 0xff]);\n        s2 = (SBOX0[t2 >>> 24] << 24) | (SBOX0[(t3 >>> 16) & 0xff]) << 16 |\n            (SBOX0[(t0 >>> 8) & 0xff]) << 8 | (SBOX0[t1 & 0xff]);\n        s3 = (SBOX0[t3 >>> 24] << 24) | (SBOX0[(t0 >>> 16) & 0xff]) << 16 |\n            (SBOX0[(t1 >>> 8) & 0xff]) << 8 | (SBOX0[t2 & 0xff]);\n        s0 ^= this._encKey[k + 0];\n        s1 ^= this._encKey[k + 1];\n        s2 ^= this._encKey[k + 2];\n        s3 ^= this._encKey[k + 3];\n        writeUint32BE(s0, dst, 0);\n        writeUint32BE(s1, dst, 4);\n        writeUint32BE(s2, dst, 8);\n        writeUint32BE(s3, dst, 12);\n        return this._emptyPromise;\n    }\n}\nexports.default = PolyfillAes;\n// Initialize generates encryption and decryption tables.\nfunction initialize() {\n    const poly = (1 << 8) | (1 << 4) | (1 << 3) | (1 << 1) | (1 << 0);\n    function mul(b, c) {\n        let i = b;\n        let j = c;\n        let s = 0;\n        for (let k = 1; k < 0x100 && j !== 0; k <<= 1) {\n            // Invariant: k == 1<<n, i == b * x^n\n            if ((j & k) !== 0) {\n                // s += i in GF(2); xor in binary\n                s ^= i;\n                j ^= k; // turn off bit to end loop early\n            }\n            // i *= x in GF(2) modulo the polynomial\n            i <<= 1;\n            if ((i & 0x100) !== 0) {\n                i ^= poly;\n            }\n        }\n        return s;\n    }\n    const rot = (x) => (x << 24) | (x >>> 8);\n    // Generate encryption tables.\n    Te0 = new Uint32Array(256);\n    Te1 = new Uint32Array(256);\n    Te2 = new Uint32Array(256);\n    Te3 = new Uint32Array(256);\n    for (let i = 0; i < 256; i++) {\n        const s = SBOX0[i];\n        let w = (mul(s, 2) << 24) | (s << 16) | (s << 8) | mul(s, 3);\n        Te0[i] = w;\n        w = rot(w);\n        Te1[i] = w;\n        w = rot(w);\n        Te2[i] = w;\n        w = rot(w);\n        Te3[i] = w;\n        w = rot(w);\n    }\n    // Generate decryption tables.\n    Td0 = new Uint32Array(256);\n    Td1 = new Uint32Array(256);\n    Td2 = new Uint32Array(256);\n    Td3 = new Uint32Array(256);\n    for (let i = 0; i < 256; i++) {\n        const s = SBOX1[i];\n        let w = (mul(s, 0xe) << 24) | (mul(s, 0x9) << 16) |\n            (mul(s, 0xd) << 8) | mul(s, 0xb);\n        Td0[i] = w;\n        w = rot(w);\n        Td1[i] = w;\n        w = rot(w);\n        Td2[i] = w;\n        w = rot(w);\n        Td3[i] = w;\n        w = rot(w);\n    }\n    isInitialized = true;\n}\n// Reads 4 bytes from array starting at offset as big-endian\n// unsigned 32-bit integer and returns it.\nfunction readUint32BE(array, offset = 0) {\n    return ((array[offset] << 24) |\n        (array[offset + 1] << 16) |\n        (array[offset + 2] << 8) |\n        array[offset + 3]) >>> 0;\n}\n// Writes 4-byte big-endian representation of 32-bit unsigned\n// value to byte array starting at offset.\n//\n// If byte array is not given, creates a new 4-byte one.\n//\n// Returns the output byte array.\nfunction writeUint32BE(value, out = new Uint8Array(4), offset = 0) {\n    out[offset + 0] = value >>> 24;\n    out[offset + 1] = value >>> 16;\n    out[offset + 2] = value >>> 8;\n    out[offset + 3] = value >>> 0;\n    return out;\n}\n// Apply sbox0 to each byte in w.\nfunction subw(w) {\n    return ((SBOX0[(w >>> 24) & 0xff]) << 24) |\n        ((SBOX0[(w >>> 16) & 0xff]) << 16) |\n        ((SBOX0[(w >>> 8) & 0xff]) << 8) |\n        (SBOX0[w & 0xff]);\n}\n// Rotate\nfunction rotw(w) {\n    return (w << 8) | (w >>> 24);\n}\nfunction expandKey(key) {\n    const encKey = new Uint32Array(key.length + 28);\n    const nk = key.length / 4 | 0;\n    const n = encKey.length;\n    for (let i = 0; i < nk; i++) {\n        encKey[i] = readUint32BE(key, i * 4);\n    }\n    for (let i = nk; i < n; i++) {\n        let t = encKey[i - 1];\n        if (i % nk === 0) {\n            t = subw(rotw(t)) ^ (POWX[i / nk - 1] << 24);\n        }\n        else if (nk > 6 && i % nk === 4) {\n            t = subw(t);\n        }\n        encKey[i] = encKey[i - nk] ^ t;\n    }\n    return encKey;\n}\n"]},"metadata":{},"sourceType":"script"}