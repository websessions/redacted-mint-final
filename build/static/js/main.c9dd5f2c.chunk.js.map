{"version":3,"sources":["rabbit.png","mask.png","App.js","reportWebVitals.js","index.js"],"names":["MintButton","styled","Button","ConnectButton","MintRoot","span","div","MintButtonText","Spacer","SmallSpacer","ImageContainer","img","Samples","Logo","Text","CHAIN_ID","App","props","state","keplrReady","account","a","this","setState","sleep","ms","Promise","accept","setTimeout","window","keplr","getOfflineSigner","getEnigmaUtils","experimentalSuggestChain","chainId","chainName","rpc","rest","bip44","coinType","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","gasPriceStep","low","average","high","features","enable","keplrOfflineSigner","getAccounts","accounts","secretjs","SigningCosmWasmClient","address","init","amount","denom","gas","exec","handleMsg","mint_nft","owner","public_metadata","name","private_metadata","console","log","execute","catch","err","Error","response","undefined","code","alert","transactionHash","error","msg","isMobile","wallet","balance","Intl","NumberFormat","format","e","src","mask","alt","className","rabbit","toLocaleString","disabled","onClick","onMint","variant","setupKeplr","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9dd5f2c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rabbit.f6b32a4e.png\";","export default __webpack_public_path__ + \"static/media/mask.4a4e3a7c.png\";","import React from \"react\";\nimport { SigningCosmWasmClient } from \"secretjs\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport rabbit from \"./rabbit.png\";\nimport mask from \"./mask.png\";\n\nconst MintButton = styled(Button)`\n  align-items: center;\n  justify-content: center;\n  background: #ea70ff !important;\n`;\n\n// TODO: this needs to be a wallet connector\nconst ConnectButton = styled(Button)`\n  display: flex;\n  height: 50px;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst CounterText = styled.span``; // add your styles here m8\n\nconst MintRoot = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  margin: auto;\n  align-items: center;\n  justify-content: center;\n  background: #ffffff;\n  text-align: center;\n`;\n\nconst MintButtonText = styled.div`\n  padding: 5px 50px;\n`;\n\nconst Spacer = styled.div`\n  padding: 5rem;\n`;\n\nconst SmallSpacer = styled.div`\n  padding: 0.75rem;\n`;\n\n// TODO: fix border-radius\nconst ImageContainer = styled.img`\n  max-width: 200px;\n  max-height: 200px;\n  border-radius: 25px;\n  padding: 0.75rem;\n`;\n\nconst Samples = styled.div`\n  display: flex;\n  flex-direction: row;\n  @media only screen and (max-width: 600px) {\n    flex-direction: column;\n  }\n`;\n\nconst Logo = styled.img`\n  max-width: 400px;\n  max-height: 400px;\n  @media only screen and (max-width: 600px) {\n    max-width: 250px;\n    max-height: 250px;\n  }\n`;\n\nconst Text = styled.div`\n  max-width: 500px;\n`;\n\nconst CHAIN_ID = \"holodeck-2\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { keplrReady: false, account: null };\n  }\n\n  // TODO: do we want to display the user's account number and balance?\n  // if so, we'll need to implement this properly. currently it doesn't work\n  // because account can only be initialized after the wallet is connected (which\n  // isn't necessarily after the base component mounts)\n  async componentDidMount() {\n    // await this.setupKeplr();\n\n    const account = \"test\"; //await this.secretjs.getAccount(this.state.account.address);\n    this.setState({ account });\n  }\n\n  async setupKeplr() {\n    // Define sleep\n    const sleep = (ms) => new Promise((accept) => setTimeout(accept, ms));\n\n    // Wait for Keplr to be injected to the page\n    while (\n      !window.keplr &&\n      !window.getOfflineSigner &&\n      !window.getEnigmaUtils\n    ) {\n      await sleep(10);\n    }\n\n    // TODO: stop using experimental chain\n    // Use a custom chain with Keplr.\n    // On mainnet we don't need this (`experimentalSuggestChain`).\n    // This works well with `enigmampc/secret-network-sw-dev`:\n    //     - https://hub.docker.com/r/enigmampc/secret-network-sw-dev\n    //     - Run a local chain: `docker run -it --rm -p 26657:26657 -p 26656:26656 -p 1337:1337 -v $(shell pwd):/root/code --name secretdev enigmampc/secret-network-sw-dev`\n    //     - `alias secretcli='docker exec -it secretdev secretcli'`\n    //     - Store a contract: `docker exec -it secretdev secretcli tx compute store /root/code/contract.wasm.gz --from a --gas 10000000 -b block -y`\n    // On holodeck, set:\n    //     1. CHAIN_ID = \"holodeck-2\"\n    //     2. rpc = \"ttp://chainofsecrets.secrettestnet.io:26657\"\n    //     3. rest = \"https://chainofsecrets.secrettestnet.io\"\n    //     4. chainName = Whatever you like\n    // For more examples, go to: https://github.com/chainapsis/keplr-example/blob/master/src/main.js\n    await window.keplr.experimentalSuggestChain({\n      chainId: CHAIN_ID,\n      chainName: \"holodeck-2\",\n      rpc: \"ttp://chainofsecrets.secrettestnet.io:26657\",\n      rest: \"https://chainofsecrets.secrettestnet.io\",\n      bip44: {\n        coinType: 529,\n      },\n      coinType: 529,\n      stakeCurrency: {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6,\n      },\n      bech32Config: {\n        bech32PrefixAccAddr: \"secret\",\n        bech32PrefixAccPub: \"secretpub\",\n        bech32PrefixValAddr: \"secretvaloper\",\n        bech32PrefixValPub: \"secretvaloperpub\",\n        bech32PrefixConsAddr: \"secretvalcons\",\n        bech32PrefixConsPub: \"secretvalconspub\",\n      },\n      currencies: [\n        {\n          coinDenom: \"SCRT\",\n          coinMinimalDenom: \"uscrt\",\n          coinDecimals: 6,\n        },\n      ],\n      feeCurrencies: [\n        {\n          coinDenom: \"SCRT\",\n          coinMinimalDenom: \"uscrt\",\n          coinDecimals: 6,\n        },\n      ],\n      gasPriceStep: {\n        low: 0.1,\n        average: 0.25,\n        high: 0.4,\n      },\n      features: [\"secretwasm\"],\n    });\n\n    // Enable Keplr.\n    // This pops-up a window for the user to allow keplr access to the webpage.\n    await window.keplr.enable(CHAIN_ID);\n\n    // Setup SecrtJS with Keplr's OfflineSigner\n    // This pops-up a window for the user to sign on each tx we sent\n    this.keplrOfflineSigner = window.getOfflineSigner(CHAIN_ID);\n    const accounts = await this.keplrOfflineSigner.getAccounts();\n\n    this.secretjs = new SigningCosmWasmClient(\n      // TODO: use an env variable here\n      \"https://chainofsecrets.secrettestnet.io\", // holodeck - https://chainofsecrets.secrettestnet.io; mainnet - user your LCD/REST provider local http://localhost:1337\n      accounts[0].address,\n      this.keplrOfflineSigner,\n      window.getEnigmaUtils(CHAIN_ID),\n      {\n        // 300k - Max gas units we're willing to use for init\n        init: {\n          amount: [{ amount: \"300000\", denom: \"uscrt\" }],\n          gas: \"300000\",\n        },\n        // 300k - Max gas units we're willing to use for exec\n        exec: {\n          amount: [{ amount: \"300000\", denom: \"uscrt\" }],\n          gas: \"300000\",\n        },\n      }\n    );\n\n    this.setState({ keplrReady: true, account: accounts[0] });\n  }\n\n  async onMint() {\n    try {\n      // 1. Define your metadata\n      const publicMetadata = \"No secrets here!\";\n      const privateMetadata = \"Ssshhhhhhh....\";\n\n      // 2. Mint a new token to yourself\n      const handleMsg = {\n        mint_nft: {\n          owner: this.address,\n          public_metadata: {\n            name: publicMetadata,\n          },\n          private_metadata: {\n            name: privateMetadata,\n          },\n        },\n      };\n      (async () => {\n        await window.keplr.enable(CHAIN_ID);\n        console.log(\"Minting yourself a nft\");\n        // TODO: use env variable for the contract address, like so\n        // .execute(process.env.SECRET_NFT_CONTRACT, handleMsg)\n        const response = await this.secretjs\n          .execute(\"secret1gwlhghp6a3pwc4a5nsw0ltua7mmqwdh4qy23qp\", handleMsg)\n          .catch((err) => {\n            throw new Error(`Could not execute contract: ${err}`);\n          });\n        console.log(\"response: \", response);\n\n        if (response.code !== undefined && response.code !== 0) {\n          alert(\"Failed to mint NFT: \" + response.log || response.rawLog);\n        } else {\n          alert(\n            \"NFT successfully minted: https://explorer.secrettestnet.io/transactions/\" +\n              response.transactionHash\n          );\n        }\n      })();\n    } catch (error) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      // TODO: handle errors\n      //   if (!error.msg) {\n      //     if (error.message.indexOf(\"0x138\")) {\n      //     } else if (error.message.indexOf(\"0x137\")) {\n      //       message = `SOLD OUT!`;\n      //     } else if (error.message.indexOf(\"0x135\")) {\n      //       message = `Insufficient funds to mint. Please fund your wallet.`;\n      //     }\n      //   } else {\n      //     if (error.code === 311) {\n      //       message = `SOLD OUT!`;\n      //       setIsSoldOut(true);\n      //     } else if (error.code === 312) {\n      //       message = `Minting period hasn't started yet.`;\n      //     }\n      //   }\n\n      //   setAlertState({\n      //     open: true,\n      //     message,\n      //     severity: \"error\",\n      //   });\n      // } finally {\n      //   setIsMinting(false);\n      // }\n    }\n  }\n\n  // TODO: break these components out into a more modular structure (low priority)\n  render() {\n    // TODO: set these dynamically (hi pri)\n    // true if there are no more NFTs\n    const isSoldOut = false;\n    // set based on viewport width\n    const isMobile = false;\n    const wallet = this.state.keplrReady;\n    // true if the user clicked the mint button and the tx has been\n    // sent, but not yet confirmed\n    const isMinting = false;\n    // mint is active (open)\n    const isActive = true;\n    // past start date\n    // const startDate = 1635213600000;\n    // future start date\n    const startDate = 1635213600000;\n    // number of NFTs left in the contract\n    const mintsRemaining = 100;\n    // if (!this.state.keplrReady) {\n    //   return (\n    //     <>\n    //       <h1>Waiting for Keplr wallet integration...</h1>\n    //     </>\n    //   );\n    // }\n\n    let account = <h1>Account: unknown</h1>;\n    if (this.state.account) {\n      account = <h1>Account: {this.state.account.address}</h1>;\n    }\n\n    let balance = <>Balance: 0 SCRT</>;\n    try {\n      balance = (\n        <>\n          Balance:{\" \"}\n          {new Intl.NumberFormat(\"en-US\", {}).format(\n            +this.state.account.balance[0].amount / 1e6\n          )}{\" \"}\n          SCRT\n        </>\n      );\n    } catch (e) {}\n\n    let renderCounter = ({ days, hours, minutes, seconds, completed }) => {\n      return (\n        <CounterText>\n          {days} days, {hours} hours, {minutes} minutes, {seconds} seconds\n        </CounterText>\n      );\n    };\n\n    return (\n      <>\n        <MintRoot>\n          <SmallSpacer />\n          {/* TODO: add real logos */}\n          {!isMobile ? (\n            <Logo src={mask} alt=\"mask\" />\n          ) : (\n            <Logo src={mask} alt=\"mask\" />\n          )}\n          {!isSoldOut ? (\n            <h1 className=\"font-link\">Mints Live on November 12, 2021</h1>\n          ) : (\n            <h1 className=\"font-link\">Minting is over</h1>\n          )}\n          {account}\n          {balance}\n          {!isMobile && (\n            <>\n              <Samples>\n                {<ImageContainer src={rabbit} alt=\"rabbit\" />}\n                {<ImageContainer src={rabbit} alt=\"rabbit\" />}\n                {<ImageContainer src={rabbit} alt=\"rabbit\" />}\n              </Samples>\n            </>\n          )}\n          {wallet && !isSoldOut && (\n            <Text>\n              <p className=\"font-link\">\n                1337 unique generative Redacted Rabbits.Secured by the SCRT\n                network, stored on Arweave, implemented with the SNIP-721\n                standard.\n              </p>\n            </Text>\n          )}\n\n          {wallet && (\n            <p className=\"font-link\">\n              Remaining amount: {(mintsRemaining || 0).toLocaleString()} / 1337\n            </p>\n          )}\n          {wallet ? (\n            <p className=\"font-link\">Mint: 42 SCRT</p>\n          ) : (\n            <h2 className=\"font-link\">\n              Connect wallet to mint a Redacted Rabbit\n            </h2>\n          )}\n          {!wallet ? (\n            <ConnectButton\n              onClick={async () => {\n                this.setupKeplr();\n              }}\n            >\n              <h3 className=\"font-link\">Connect Wallet</h3>\n            </ConnectButton>\n          ) : (\n            <MintButton\n              disabled={isSoldOut || isMinting || !isActive}\n              onClick={async () => {\n                await this.onMint();\n              }}\n              variant=\"contained\"\n            >\n              {isSoldOut ? (\n                <MintButtonText className=\"font-link\">SOLD OUT</MintButtonText>\n              ) : isActive ? (\n                isMinting ? (\n                  <CircularProgress />\n                ) : (\n                  <MintButtonText className=\"font-link\">MINT</MintButtonText>\n                )\n              ) : (\n                <Countdown\n                  date={startDate}\n                  // TODO: countdown should switch to mint at startDate time\n                  // onMount={({ completed }) => completed && setIsActive(true)}\n                  // onComplete={() => setIsActive(true)}\n                  onMount={({ completed }) => completed}\n                  onComplete={() => null}\n                  renderer={renderCounter}\n                />\n              )}\n            </MintButton>\n          )}\n\n          {isMobile && (\n            <>\n              <SmallSpacer />\n              <Samples>\n                {<ImageContainer src={rabbit} alt=\"rabbit\" />}\n                {<ImageContainer src={rabbit} alt=\"rabbit\" />}\n                {<ImageContainer src={rabbit} alt=\"rabbit\" />}\n              </Samples>\n            </>\n          )}\n\n          <Spacer />\n          {/* TODO: Add snackbar alerting upon mint */}\n          {/* <Snackbar\n            open={alertState.open}\n            autoHideDuration={6000}\n            onClose={() => setAlertState({ ...alertState, open: false })}\n          >\n            <Alert\n              onClose={() => setAlertState({ ...alertState, open: false })}\n              severity={alertState.severity}\n            >\n              {alertState.message}\n            </Alert>\n          </Snackbar> */}\n        </MintRoot>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}