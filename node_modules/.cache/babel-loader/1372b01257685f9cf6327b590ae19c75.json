{"ast":null,"code":"\"use strict\";\n/**\n * The STREAM online authenticated encryption construction.\n * See <https://eprint.iacr.org/2015/189.pdf> for definition.\n */\n\nvar _regeneratorRuntime = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar aead_1 = require(\"./aead\");\n\nvar webcrypto_1 = require(\"./providers/webcrypto\");\n/** Size of a nonce required by STREAM in bytes */\n\n\nexports.NONCE_SIZE = 8;\n/** Byte flag indicating this is the last block in the STREAM (otherwise 0) */\n\nexports.LAST_BLOCK_FLAG = 1;\n/** Maximum value of the counter STREAM uses internally to identify messages */\n\nexports.COUNTER_MAX = 0xFFFFFFFF;\n/**\n * A STREAM encryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the ℰ stream encryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\n\nvar StreamEncryptor = /*#__PURE__*/function () {\n  function StreamEncryptor(aead, nonce) {\n    _classCallCheck(this, StreamEncryptor);\n\n    this._aead = aead;\n    this._nonce_encoder = new NonceEncoder(nonce);\n  }\n  /** Encrypt and authenticate data using the selected AEAD algorithm */\n\n\n  _createClass(StreamEncryptor, [{\n    key: \"seal\",\n    value: function seal(plaintext) {\n      var lastBlock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var associatedData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Uint8Array(0);\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this._aead.seal(plaintext, this._nonce_encoder.next(lastBlock), associatedData));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /** Make a best effort to wipe memory used by this instance */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._aead.clear();\n\n      return this;\n    }\n  }], [{\n    key: \"importKey\",\n    value:\n    /** Create a new StreamEncryptor instance with the given key */\n    function importKey(keyData, nonce, alg) {\n      var provider = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new webcrypto_1.WebCryptoProvider();\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = StreamEncryptor;\n                _context2.next = 3;\n                return aead_1.AEAD.importKey(keyData, alg, provider);\n\n              case 3:\n                _context2.t1 = _context2.sent;\n                _context2.t2 = nonce;\n                return _context2.abrupt(\"return\", new _context2.t0(_context2.t1, _context2.t2));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }\n  }]);\n\n  return StreamEncryptor;\n}();\n\nexports.StreamEncryptor = StreamEncryptor;\n/**\n * A STREAM decryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the 𝒟 stream decryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\n\nvar StreamDecryptor = /*#__PURE__*/function () {\n  function StreamDecryptor(aead, nonce) {\n    _classCallCheck(this, StreamDecryptor);\n\n    this._aead = aead;\n    this._nonce_encoder = new NonceEncoder(nonce);\n  }\n  /** Decrypt and authenticate data using the selected AEAD algorithm */\n\n\n  _createClass(StreamDecryptor, [{\n    key: \"open\",\n    value: function open(ciphertext) {\n      var lastBlock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var associatedData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Uint8Array(0);\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this._aead.open(ciphertext, this._nonce_encoder.next(lastBlock), associatedData));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /** Make a best effort to wipe memory used by this instance */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._aead.clear();\n\n      return this;\n    }\n  }], [{\n    key: \"importKey\",\n    value:\n    /** Create a new StreamDecryptor instance with the given key */\n    function importKey(keyData, nonce, alg) {\n      var provider = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new webcrypto_1.WebCryptoProvider();\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.t0 = StreamDecryptor;\n                _context4.next = 3;\n                return aead_1.AEAD.importKey(keyData, alg, provider);\n\n              case 3:\n                _context4.t1 = _context4.sent;\n                _context4.t2 = nonce;\n                return _context4.abrupt(\"return\", new _context4.t0(_context4.t1, _context4.t2));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n    }\n  }]);\n\n  return StreamDecryptor;\n}();\n\nexports.StreamDecryptor = StreamDecryptor;\n/** Computes STREAM nonces based on the current position in the STREAM. */\n\nvar NonceEncoder = /*#__PURE__*/function () {\n  function NonceEncoder(noncePrefix) {\n    _classCallCheck(this, NonceEncoder);\n\n    if (noncePrefix.length !== exports.NONCE_SIZE) {\n      throw new Error(\"STREAM: nonce must be 8-bits (got \".concat(noncePrefix.length));\n    }\n\n    this.buffer = new ArrayBuffer(exports.NONCE_SIZE + 4 + 1);\n    this.view = new DataView(this.buffer);\n    this.array = new Uint8Array(this.buffer);\n    this.array.set(noncePrefix);\n    this.counter = 0;\n    this.finished = false;\n  }\n  /** Compute the next nonce value, incrementing the internal counter */\n\n\n  _createClass(NonceEncoder, [{\n    key: \"next\",\n    value: function next(lastBlock) {\n      if (this.finished) {\n        throw new Error(\"STREAM: already finished\");\n      }\n\n      this.view.setInt32(8, this.counter, false);\n\n      if (lastBlock) {\n        this.view.setInt8(12, exports.LAST_BLOCK_FLAG);\n        this.finished = true;\n      } else {\n        this.counter += 1;\n\n        if (this.counter > exports.COUNTER_MAX) {\n          throw new Error(\"STREAM counter overflowed\");\n        }\n      }\n\n      return this.array;\n    }\n  }]);\n\n  return NonceEncoder;\n}();","map":{"version":3,"sources":["/Users/aidansalzmann/redacted-mint/node_modules/miscreant/release/stream.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","aead_1","require","webcrypto_1","NONCE_SIZE","LAST_BLOCK_FLAG","COUNTER_MAX","StreamEncryptor","aead","nonce","_aead","_nonce_encoder","NonceEncoder","plaintext","lastBlock","associatedData","Uint8Array","seal","clear","keyData","alg","provider","WebCryptoProvider","AEAD","importKey","StreamDecryptor","ciphertext","open","noncePrefix","length","Error","buffer","ArrayBuffer","view","DataView","array","set","counter","finished","setInt32","setInt8"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * The STREAM online authenticated encryption construction.\n * See <https://eprint.iacr.org/2015/189.pdf> for definition.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst aead_1 = require(\"./aead\");\nconst webcrypto_1 = require(\"./providers/webcrypto\");\n/** Size of a nonce required by STREAM in bytes */\nexports.NONCE_SIZE = 8;\n/** Byte flag indicating this is the last block in the STREAM (otherwise 0) */\nexports.LAST_BLOCK_FLAG = 1;\n/** Maximum value of the counter STREAM uses internally to identify messages */\nexports.COUNTER_MAX = 0xFFFFFFFF;\n/**\n * A STREAM encryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the ℰ stream encryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\nclass StreamEncryptor {\n    /** Create a new StreamEncryptor instance with the given key */\n    static importKey(keyData, nonce, alg, provider = new webcrypto_1.WebCryptoProvider()) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new StreamEncryptor(yield aead_1.AEAD.importKey(keyData, alg, provider), nonce);\n        });\n    }\n    constructor(aead, nonce) {\n        this._aead = aead;\n        this._nonce_encoder = new NonceEncoder(nonce);\n    }\n    /** Encrypt and authenticate data using the selected AEAD algorithm */\n    seal(plaintext, lastBlock = false, associatedData = new Uint8Array(0)) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._aead.seal(plaintext, this._nonce_encoder.next(lastBlock), associatedData);\n        });\n    }\n    /** Make a best effort to wipe memory used by this instance */\n    clear() {\n        this._aead.clear();\n        return this;\n    }\n}\nexports.StreamEncryptor = StreamEncryptor;\n/**\n * A STREAM decryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the 𝒟 stream decryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\nclass StreamDecryptor {\n    /** Create a new StreamDecryptor instance with the given key */\n    static importKey(keyData, nonce, alg, provider = new webcrypto_1.WebCryptoProvider()) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new StreamDecryptor(yield aead_1.AEAD.importKey(keyData, alg, provider), nonce);\n        });\n    }\n    constructor(aead, nonce) {\n        this._aead = aead;\n        this._nonce_encoder = new NonceEncoder(nonce);\n    }\n    /** Decrypt and authenticate data using the selected AEAD algorithm */\n    open(ciphertext, lastBlock = false, associatedData = new Uint8Array(0)) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._aead.open(ciphertext, this._nonce_encoder.next(lastBlock), associatedData);\n        });\n    }\n    /** Make a best effort to wipe memory used by this instance */\n    clear() {\n        this._aead.clear();\n        return this;\n    }\n}\nexports.StreamDecryptor = StreamDecryptor;\n/** Computes STREAM nonces based on the current position in the STREAM. */\nclass NonceEncoder {\n    constructor(noncePrefix) {\n        if (noncePrefix.length !== exports.NONCE_SIZE) {\n            throw new Error(`STREAM: nonce must be 8-bits (got ${noncePrefix.length}`);\n        }\n        this.buffer = new ArrayBuffer(exports.NONCE_SIZE + 4 + 1);\n        this.view = new DataView(this.buffer);\n        this.array = new Uint8Array(this.buffer);\n        this.array.set(noncePrefix);\n        this.counter = 0;\n        this.finished = false;\n    }\n    /** Compute the next nonce value, incrementing the internal counter */\n    next(lastBlock) {\n        if (this.finished) {\n            throw new Error(\"STREAM: already finished\");\n        }\n        this.view.setInt32(8, this.counter, false);\n        if (lastBlock) {\n            this.view.setInt8(12, exports.LAST_BLOCK_FLAG);\n            this.finished = true;\n        }\n        else {\n            this.counter += 1;\n            if (this.counter > exports.COUNTER_MAX) {\n                throw new Error(\"STREAM counter overflowed\");\n            }\n        }\n        return this.array;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}