{"ast":null,"code":"var _jsxFileName = \"/Users/aidansalzmann/button-minter/6_wallets/reactjs_keplr/secret-dapp/src/App.js\";\n// Run:\n// `npx create-react-app secret-dapp`\n// `cd secret-dapp`\n// `yarn add secretjs` (or `npm i secretjs`)\n// Then copy the content of this file into `src/App.js`\nimport React from \"react\";\nimport { SigningCosmWasmClient } from \"secretjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CHIAN_ID = \"enigma-pub-testnet-3\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keplrReady: false,\n      account: null\n    };\n  }\n\n  async componentDidMount() {\n    await this.setupKeplr();\n    const account = await this.secretjs.getAccount(this.state.account.address);\n    this.setState({\n      account\n    });\n  }\n\n  async setupKeplr() {\n    // Define sleep\n    const sleep = ms => new Promise(accept => setTimeout(accept, ms)); // Wait for Keplr to be injected to the page\n\n\n    while (!window.keplr && !window.getOfflineSigner && !window.getEnigmaUtils) {\n      await sleep(10);\n    } // Use a custom chain with Keplr.\n    // On mainnet we don't need this (`experimentalSuggestChain`).\n    // This works well with `enigmampc/secret-network-sw-dev`:\n    //     - https://hub.docker.com/r/enigmampc/secret-network-sw-dev\n    //     - Run a local chain: `docker run -it --rm -p 26657:26657 -p 26656:26656 -p 1337:1337 -v $(shell pwd):/root/code --name secretdev enigmampc/secret-network-sw-dev`\n    //     - `alias secretcli='docker exec -it secretdev secretcli'`\n    //     - Store a contract: `docker exec -it secretdev secretcli tx compute store /root/code/contract.wasm.gz --from a --gas 10000000 -b block -y`\n    // On holodeck, set:\n    //     1. CHIAN_ID = \"holodeck-2\"\n    //     2. rpc = \"ttp://chainofsecrets.secrettestnet.io:26657\"\n    //     3. rest = \"https://chainofsecrets.secrettestnet.io\"\n    //     4. chainName = Whatever you like\n    // For more examples, go to: https://github.com/chainapsis/keplr-example/blob/master/src/main.js\n\n\n    await window.keplr.experimentalSuggestChain({\n      chainId: CHIAN_ID,\n      chainName: \"Local Secret Chain\",\n      rpc: \"http://localhost:26657\",\n      rest: \"http://localhost:1337\",\n      bip44: {\n        coinType: 529\n      },\n      coinType: 529,\n      stakeCurrency: {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6\n      },\n      bech32Config: {\n        bech32PrefixAccAddr: \"secret\",\n        bech32PrefixAccPub: \"secretpub\",\n        bech32PrefixValAddr: \"secretvaloper\",\n        bech32PrefixValPub: \"secretvaloperpub\",\n        bech32PrefixConsAddr: \"secretvalcons\",\n        bech32PrefixConsPub: \"secretvalconspub\"\n      },\n      currencies: [{\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6\n      }],\n      feeCurrencies: [{\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6\n      }],\n      gasPriceStep: {\n        low: 0.1,\n        average: 0.25,\n        high: 0.4\n      },\n      features: [\"secretwasm\"]\n    }); // Enable Keplr.\n    // This pops-up a window for the user to allow keplr access to the webpage.\n\n    await window.keplr.enable(CHIAN_ID); // Setup SecrtJS with Keplr's OfflineSigner\n    // This pops-up a window for the user to sign on each tx we sent\n\n    this.keplrOfflineSigner = window.getOfflineSigner(CHIAN_ID);\n    const accounts = await this.keplrOfflineSigner.getAccounts();\n    this.secretjs = new SigningCosmWasmClient(\"http://localhost:1337\", // holodeck - https://chainofsecrets.secrettestnet.io; mainnet - user your LCD/REST provider\n    accounts[0].address, this.keplrOfflineSigner, window.getEnigmaUtils(CHIAN_ID), {\n      // 300k - Max gas units we're willing to use for init\n      init: {\n        amount: [{\n          amount: \"300000\",\n          denom: \"uscrt\"\n        }],\n        gas: \"300000\"\n      },\n      // 300k - Max gas units we're willing to use for exec\n      exec: {\n        amount: [{\n          amount: \"300000\",\n          denom: \"uscrt\"\n        }],\n        gas: \"300000\"\n      }\n    });\n    this.setState({\n      keplrReady: true,\n      account: accounts[0]\n    });\n  }\n\n  render() {\n    if (!this.state.keplrReady) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Waiting for Keplr wallet integration...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false);\n    }\n\n    let account = /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Account: unknown\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 19\n    }, this);\n\n    if (this.state.account) {\n      account = /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Account: \", this.state.account.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this);\n    }\n\n    let balance = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Balance: 0 SCRT\"\n    }, void 0, false);\n\n    try {\n      balance = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Balance:\", \" \", new Intl.NumberFormat(\"en-US\", {}).format(+this.state.account.balance[0].amount / 1e6), \" \", \"SCRT\"]\n      }, void 0, true);\n    } catch (e) {}\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [account, balance]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aidansalzmann/button-minter/6_wallets/reactjs_keplr/secret-dapp/src/App.js"],"names":["React","SigningCosmWasmClient","CHIAN_ID","App","Component","constructor","props","state","keplrReady","account","componentDidMount","setupKeplr","secretjs","getAccount","address","setState","sleep","ms","Promise","accept","setTimeout","window","keplr","getOfflineSigner","getEnigmaUtils","experimentalSuggestChain","chainId","chainName","rpc","rest","bip44","coinType","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","gasPriceStep","low","average","high","features","enable","keplrOfflineSigner","accounts","getAccounts","init","amount","denom","gas","exec","render","balance","Intl","NumberFormat","format","e"],"mappings":"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","sourcesContent":["// Run:\n// `npx create-react-app secret-dapp`\n// `cd secret-dapp`\n// `yarn add secretjs` (or `npm i secretjs`)\n// Then copy the content of this file into `src/App.js`\n\nimport React from \"react\";\nimport { SigningCosmWasmClient } from \"secretjs\";\n\nconst CHIAN_ID = \"enigma-pub-testnet-3\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { keplrReady: false, account: null };\n  }\n\n  async componentDidMount() {\n    await this.setupKeplr();\n\n    const account = await this.secretjs.getAccount(this.state.account.address);\n    this.setState({ account });\n  }\n\n  async setupKeplr() {\n    // Define sleep\n    const sleep = (ms) => new Promise((accept) => setTimeout(accept, ms));\n\n    // Wait for Keplr to be injected to the page\n    while (\n      !window.keplr &&\n      !window.getOfflineSigner &&\n      !window.getEnigmaUtils\n    ) {\n      await sleep(10);\n    }\n\n    // Use a custom chain with Keplr.\n    // On mainnet we don't need this (`experimentalSuggestChain`).\n    // This works well with `enigmampc/secret-network-sw-dev`:\n    //     - https://hub.docker.com/r/enigmampc/secret-network-sw-dev\n    //     - Run a local chain: `docker run -it --rm -p 26657:26657 -p 26656:26656 -p 1337:1337 -v $(shell pwd):/root/code --name secretdev enigmampc/secret-network-sw-dev`\n    //     - `alias secretcli='docker exec -it secretdev secretcli'`\n    //     - Store a contract: `docker exec -it secretdev secretcli tx compute store /root/code/contract.wasm.gz --from a --gas 10000000 -b block -y`\n    // On holodeck, set:\n    //     1. CHIAN_ID = \"holodeck-2\"\n    //     2. rpc = \"ttp://chainofsecrets.secrettestnet.io:26657\"\n    //     3. rest = \"https://chainofsecrets.secrettestnet.io\"\n    //     4. chainName = Whatever you like\n    // For more examples, go to: https://github.com/chainapsis/keplr-example/blob/master/src/main.js\n    await window.keplr.experimentalSuggestChain({\n      chainId: CHIAN_ID,\n      chainName: \"Local Secret Chain\",\n      rpc: \"http://localhost:26657\",\n      rest: \"http://localhost:1337\",\n      bip44: {\n        coinType: 529,\n      },\n      coinType: 529,\n      stakeCurrency: {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6,\n      },\n      bech32Config: {\n        bech32PrefixAccAddr: \"secret\",\n        bech32PrefixAccPub: \"secretpub\",\n        bech32PrefixValAddr: \"secretvaloper\",\n        bech32PrefixValPub: \"secretvaloperpub\",\n        bech32PrefixConsAddr: \"secretvalcons\",\n        bech32PrefixConsPub: \"secretvalconspub\",\n      },\n      currencies: [\n        {\n          coinDenom: \"SCRT\",\n          coinMinimalDenom: \"uscrt\",\n          coinDecimals: 6,\n        },\n      ],\n      feeCurrencies: [\n        {\n          coinDenom: \"SCRT\",\n          coinMinimalDenom: \"uscrt\",\n          coinDecimals: 6,\n        },\n      ],\n      gasPriceStep: {\n        low: 0.1,\n        average: 0.25,\n        high: 0.4,\n      },\n      features: [\"secretwasm\"],\n    });\n\n    // Enable Keplr.\n    // This pops-up a window for the user to allow keplr access to the webpage.\n    await window.keplr.enable(CHIAN_ID);\n\n    // Setup SecrtJS with Keplr's OfflineSigner\n    // This pops-up a window for the user to sign on each tx we sent\n    this.keplrOfflineSigner = window.getOfflineSigner(CHIAN_ID);\n    const accounts = await this.keplrOfflineSigner.getAccounts();\n\n    this.secretjs = new SigningCosmWasmClient(\n      \"http://localhost:1337\", // holodeck - https://chainofsecrets.secrettestnet.io; mainnet - user your LCD/REST provider\n      accounts[0].address,\n      this.keplrOfflineSigner,\n      window.getEnigmaUtils(CHIAN_ID),\n      {\n        // 300k - Max gas units we're willing to use for init\n        init: {\n          amount: [{ amount: \"300000\", denom: \"uscrt\" }],\n          gas: \"300000\",\n        },\n        // 300k - Max gas units we're willing to use for exec\n        exec: {\n          amount: [{ amount: \"300000\", denom: \"uscrt\" }],\n          gas: \"300000\",\n        },\n      }\n    );\n\n    this.setState({ keplrReady: true, account: accounts[0] });\n  }\n\n  render() {\n    if (!this.state.keplrReady) {\n      return (\n        <>\n          <h1>Waiting for Keplr wallet integration...</h1>\n        </>\n      );\n    }\n\n    let account = <h1>Account: unknown</h1>;\n    if (this.state.account) {\n      account = <h1>Account: {this.state.account.address}</h1>;\n    }\n\n    let balance = <>Balance: 0 SCRT</>;\n    try {\n      balance = (\n        <>\n          Balance:{\" \"}\n          {new Intl.NumberFormat(\"en-US\", {}).format(\n            +this.state.account.balance[0].amount / 1e6\n          )}{\" \"}\n          SCRT\n        </>\n      );\n    } catch (e) {}\n\n    return (\n      <>\n        {account}\n        {balance}\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}