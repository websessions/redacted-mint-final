{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst crypto_1 = require(\"@iov/crypto\");\n\nconst signature_1 = require(\"./signature\");\n\nfunction prehash(bytes, type) {\n  switch (type) {\n    case null:\n      return new Uint8Array([...bytes]);\n\n    case \"sha256\":\n      return new crypto_1.Sha256(bytes).digest();\n\n    case \"sha512\":\n      return new crypto_1.Sha512(bytes).digest();\n\n    default:\n      throw new Error(\"Unknown prehash type\");\n  }\n}\n/**\n * The Cosmoshub derivation path in the form `m/44'/118'/0'/0/a`\n * with 0-based account index `a`.\n * The Secret Network derivation path in the form `m/44'/529'/0'/0/a`\n * with 0-based account index `a`.\n */\n\n\nfunction makeSecretNetworkPath(a) {\n  return [crypto_1.Slip10RawIndex.hardened(44), crypto_1.Slip10RawIndex.hardened(529), crypto_1.Slip10RawIndex.hardened(0), crypto_1.Slip10RawIndex.normal(0), crypto_1.Slip10RawIndex.normal(a)];\n}\n\nexports.makeSecretNetworkPath = makeSecretNetworkPath;\n\nclass Secp256k1Pen {\n  constructor(privkey, pubkey) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n\n  static async fromMnemonic(mnemonic, hdPath = makeSecretNetworkPath(0)) {\n    const seed = await crypto_1.Bip39.mnemonicToSeed(new crypto_1.EnglishMnemonic(mnemonic));\n    const {\n      privkey\n    } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, seed, hdPath);\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new Secp256k1Pen(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed));\n  }\n  /**\n   * Creates and returns a signature\n   */\n\n\n  async sign(signBytes, prehashType = \"sha256\") {\n    const message = prehash(signBytes, prehashType);\n    const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n    const fixedLengthSignature = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    return signature_1.encodeSecp256k1Signature(this.pubkey, fixedLengthSignature);\n  }\n\n}\n\nexports.Secp256k1Pen = Secp256k1Pen;","map":{"version":3,"sources":["../src/pen.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAWA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAoBA,SAAS,OAAT,CAAiB,KAAjB,EAAoC,IAApC,EAAqD;AACnD,UAAQ,IAAR;AACE,SAAK,IAAL;AACE,aAAO,IAAI,UAAJ,CAAe,CAAC,GAAG,KAAJ,CAAf,CAAP;;AACF,SAAK,QAAL;AACE,aAAO,IAAI,QAAA,CAAA,MAAJ,CAAW,KAAX,EAAkB,MAAlB,EAAP;;AACF,SAAK,QAAL;AACE,aAAO,IAAI,QAAA,CAAA,MAAJ,CAAW,KAAX,EAAkB,MAAlB,EAAP;;AACF;AACE,YAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AARJ;AAUD;AAED;;;;;AAKG;;;AACH,SAAgB,qBAAhB,CAAsC,CAAtC,EAA+C;AAC7C,SAAO,CACL,QAAA,CAAA,cAAA,CAAe,QAAf,CAAwB,EAAxB,CADK,EAEL,QAAA,CAAA,cAAA,CAAe,QAAf,CAAwB,GAAxB,CAFK,EAGL,QAAA,CAAA,cAAA,CAAe,QAAf,CAAwB,CAAxB,CAHK,EAIL,QAAA,CAAA,cAAA,CAAe,MAAf,CAAsB,CAAtB,CAJK,EAKL,QAAA,CAAA,cAAA,CAAe,MAAf,CAAsB,CAAtB,CALK,CAAP;AAOD;;AARD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAUA,MAAa,YAAb,CAAyB;AAcvB,EAAA,WAAA,CAAoB,OAApB,EAAyC,MAAzC,EAA2D;AACzD,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;AAhB+B,eAAZ,YAAY,CAC9B,QAD8B,EAE9B,MAAA,GAAoC,qBAAqB,CAAC,CAAD,CAF3B,EAE8B;AAE5D,UAAM,IAAI,GAAG,MAAM,QAAA,CAAA,KAAA,CAAM,cAAN,CAAqB,IAAI,QAAA,CAAA,eAAJ,CAAoB,QAApB,CAArB,CAAnB;AACA,UAAM;AAAE,MAAA;AAAF,QAAc,QAAA,CAAA,MAAA,CAAO,UAAP,CAAkB,QAAA,CAAA,WAAA,CAAY,SAA9B,EAAyC,IAAzC,EAA+C,MAA/C,CAApB;AACA,UAAM,YAAY,GAAG,CAAC,MAAM,QAAA,CAAA,SAAA,CAAU,WAAV,CAAsB,OAAtB,CAAP,EAAuC,MAA5D;AACA,WAAO,IAAI,YAAJ,CAAiB,OAAjB,EAA0B,QAAA,CAAA,SAAA,CAAU,cAAV,CAAyB,YAAzB,CAA1B,CAAP;AACD;AAUD;;AAEG;;;AACc,QAAJ,IAAI,CAAC,SAAD,EAAwB,WAAA,GAA2B,QAAnD,EAA2D;AAC1E,UAAM,OAAO,GAAG,OAAO,CAAC,SAAD,EAAY,WAAZ,CAAvB;AACA,UAAM,SAAS,GAAG,MAAM,QAAA,CAAA,SAAA,CAAU,eAAV,CAA0B,OAA1B,EAAmC,KAAK,OAAxC,CAAxB;AACA,UAAM,oBAAoB,GAAG,IAAI,UAAJ,CAAe,CAAC,GAAG,SAAS,CAAC,CAAV,CAAY,EAAZ,CAAJ,EAAqB,GAAG,SAAS,CAAC,CAAV,CAAY,EAAZ,CAAxB,CAAf,CAA7B;AACA,WAAO,WAAA,CAAA,wBAAA,CAAyB,KAAK,MAA9B,EAAsC,oBAAtC,CAAP;AACD;;AA3BsB;;AAAzB,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"@iov/crypto\");\nconst signature_1 = require(\"./signature\");\nfunction prehash(bytes, type) {\n    switch (type) {\n        case null:\n            return new Uint8Array([...bytes]);\n        case \"sha256\":\n            return new crypto_1.Sha256(bytes).digest();\n        case \"sha512\":\n            return new crypto_1.Sha512(bytes).digest();\n        default:\n            throw new Error(\"Unknown prehash type\");\n    }\n}\n/**\n * The Cosmoshub derivation path in the form `m/44'/118'/0'/0/a`\n * with 0-based account index `a`.\n * The Secret Network derivation path in the form `m/44'/529'/0'/0/a`\n * with 0-based account index `a`.\n */\nfunction makeSecretNetworkPath(a) {\n    return [\n        crypto_1.Slip10RawIndex.hardened(44),\n        crypto_1.Slip10RawIndex.hardened(529),\n        crypto_1.Slip10RawIndex.hardened(0),\n        crypto_1.Slip10RawIndex.normal(0),\n        crypto_1.Slip10RawIndex.normal(a),\n    ];\n}\nexports.makeSecretNetworkPath = makeSecretNetworkPath;\nclass Secp256k1Pen {\n    constructor(privkey, pubkey) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n    }\n    static async fromMnemonic(mnemonic, hdPath = makeSecretNetworkPath(0)) {\n        const seed = await crypto_1.Bip39.mnemonicToSeed(new crypto_1.EnglishMnemonic(mnemonic));\n        const { privkey } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, seed, hdPath);\n        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n        return new Secp256k1Pen(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed));\n    }\n    /**\n     * Creates and returns a signature\n     */\n    async sign(signBytes, prehashType = \"sha256\") {\n        const message = prehash(signBytes, prehashType);\n        const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n        const fixedLengthSignature = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        return signature_1.encodeSecp256k1Signature(this.pubkey, fixedLengthSignature);\n    }\n}\nexports.Secp256k1Pen = Secp256k1Pen;\n//# sourceMappingURL=pen.js.map"]},"metadata":{},"sourceType":"script"}