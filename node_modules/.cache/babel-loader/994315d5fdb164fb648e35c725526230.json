{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar encoding_1 = require(\"@iov/encoding\");\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar elliptic_1 = __importDefault(require(\"elliptic\"));\n\nvar hmac_1 = require(\"./hmac\");\n\nvar sha_1 = require(\"./sha\");\n/**\n * Raw values must match the curve string in SLIP-0010 master key generation\n *\n * @see https://github.com/satoshilabs/slips/blob/master/slip-0010.md#master-key-generation\n */\n\n\nvar Slip10Curve;\n\n(function (Slip10Curve) {\n  Slip10Curve[\"Secp256k1\"] = \"Bitcoin seed\";\n  Slip10Curve[\"Ed25519\"] = \"ed25519 seed\";\n})(Slip10Curve = exports.Slip10Curve || (exports.Slip10Curve = {}));\n/**\n * Reverse mapping of Slip10Curve\n */\n\n\nfunction slip10CurveFromString(curveString) {\n  switch (curveString) {\n    case Slip10Curve.Ed25519:\n      return Slip10Curve.Ed25519;\n\n    case Slip10Curve.Secp256k1:\n      return Slip10Curve.Secp256k1;\n\n    default:\n      throw new Error(\"Unknown curve string: '\".concat(curveString, \"'\"));\n  }\n}\n\nexports.slip10CurveFromString = slip10CurveFromString;\n\nvar Slip10RawIndex = /*#__PURE__*/function (_encoding_1$Uint) {\n  _inherits(Slip10RawIndex, _encoding_1$Uint);\n\n  var _super = _createSuper(Slip10RawIndex);\n\n  function Slip10RawIndex() {\n    _classCallCheck(this, Slip10RawIndex);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Slip10RawIndex, [{\n    key: \"isHardened\",\n    value: function isHardened() {\n      return this.data >= Math.pow(2, 31);\n    }\n  }], [{\n    key: \"hardened\",\n    value: function hardened(hardenedIndex) {\n      return new Slip10RawIndex(hardenedIndex + Math.pow(2, 31));\n    }\n  }, {\n    key: \"normal\",\n    value: function normal(normalIndex) {\n      return new Slip10RawIndex(normalIndex);\n    }\n  }]);\n\n  return Slip10RawIndex;\n}(encoding_1.Uint32);\n\nexports.Slip10RawIndex = Slip10RawIndex;\nvar secp256k1 = new elliptic_1.default.ec(\"secp256k1\"); // Universal private key derivation accoring to\n// https://github.com/satoshilabs/slips/blob/master/slip-0010.md\n\nvar Slip10 = /*#__PURE__*/function () {\n  function Slip10() {\n    _classCallCheck(this, Slip10);\n  }\n\n  _createClass(Slip10, null, [{\n    key: \"derivePath\",\n    value: function derivePath(curve, seed, path) {\n      var result = this.master(curve, seed);\n\n      var _iterator = _createForOfIteratorHelper(path),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var rawIndex = _step.value;\n          result = this.child(curve, result.privkey, result.chainCode, rawIndex);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"master\",\n    value: function master(curve, seed) {\n      var i = new hmac_1.Hmac(sha_1.Sha512, encoding_1.Encoding.toAscii(curve)).update(seed).digest();\n      var il = i.slice(0, 32);\n      var ir = i.slice(32, 64);\n\n      if (curve !== Slip10Curve.Ed25519 && (this.isZero(il) || this.isGteN(curve, il))) {\n        return this.master(curve, i);\n      }\n\n      return {\n        chainCode: ir,\n        privkey: il\n      };\n    }\n  }, {\n    key: \"child\",\n    value: function child(curve, parentPrivkey, parentChainCode, rawIndex) {\n      var i;\n\n      if (rawIndex.isHardened()) {\n        var payload = new Uint8Array([0x00].concat(_toConsumableArray(parentPrivkey), _toConsumableArray(rawIndex.toBytesBigEndian())));\n        i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(payload).digest();\n      } else {\n        if (curve === Slip10Curve.Ed25519) {\n          throw new Error(\"Normal keys are not allowed with ed25519\");\n        } else {\n          // Step 1 of https://github.com/satoshilabs/slips/blob/master/slip-0010.md#private-parent-key--private-child-key\n          // Calculate I = HMAC-SHA512(Key = c_par, Data = ser_P(point(k_par)) || ser_32(i)).\n          // where the functions point() and ser_p() are defined in BIP-0032\n          var data = new Uint8Array([].concat(_toConsumableArray(Slip10.serializedPoint(curve, new bn_js_1.default(parentPrivkey))), _toConsumableArray(rawIndex.toBytesBigEndian())));\n          i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(data).digest();\n        }\n      }\n\n      return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i);\n    }\n    /**\n     * Implementation of ser_P(point(k_par)) from BIP-0032\n     *\n     * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n     */\n\n  }, {\n    key: \"serializedPoint\",\n    value: function serializedPoint(curve, p) {\n      switch (curve) {\n        case Slip10Curve.Secp256k1:\n          return encoding_1.Encoding.fromHex(secp256k1.g.mul(p).encodeCompressed(\"hex\"));\n\n        default:\n          throw new Error(\"curve not supported\");\n      }\n    }\n  }, {\n    key: \"childImpl\",\n    value: function childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i) {\n      // step 2 (of the Private parent key â†’ private child key algorithm)\n      var il = i.slice(0, 32);\n      var ir = i.slice(32, 64); // step 3\n\n      var returnChainCode = ir; // step 4\n\n      if (curve === Slip10Curve.Ed25519) {\n        return {\n          chainCode: returnChainCode,\n          privkey: il\n        };\n      } // step 5\n\n\n      var n = this.n(curve);\n      var returnChildKeyAsNumber = new bn_js_1.default(il).add(new bn_js_1.default(parentPrivkey)).mod(n);\n      var returnChildKey = Uint8Array.from(returnChildKeyAsNumber.toArray(\"be\", 32)); // step 6\n\n      if (this.isGteN(curve, il) || this.isZero(returnChildKey)) {\n        var newI = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(new Uint8Array([0x01].concat(_toConsumableArray(ir), _toConsumableArray(rawIndex.toBytesBigEndian())))).digest();\n        return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, newI);\n      } // step 7\n\n\n      return {\n        chainCode: returnChainCode,\n        privkey: returnChildKey\n      };\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero(privkey) {\n      return privkey.every(function (byte) {\n        return byte === 0;\n      });\n    }\n  }, {\n    key: \"isGteN\",\n    value: function isGteN(curve, privkey) {\n      var keyAsNumber = new bn_js_1.default(privkey);\n      return keyAsNumber.gte(this.n(curve));\n    }\n  }, {\n    key: \"n\",\n    value: function n(curve) {\n      switch (curve) {\n        case Slip10Curve.Secp256k1:\n          return new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", 16);\n\n        default:\n          throw new Error(\"curve not supported\");\n      }\n    }\n  }]);\n\n  return Slip10;\n}();\n\nexports.Slip10 = Slip10;","map":{"version":3,"sources":["../src/slip10.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst encoding_1 = require(\"@iov/encoding\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst elliptic_1 = __importDefault(require(\"elliptic\"));\nconst hmac_1 = require(\"./hmac\");\nconst sha_1 = require(\"./sha\");\n/**\n * Raw values must match the curve string in SLIP-0010 master key generation\n *\n * @see https://github.com/satoshilabs/slips/blob/master/slip-0010.md#master-key-generation\n */\nvar Slip10Curve;\n(function (Slip10Curve) {\n    Slip10Curve[\"Secp256k1\"] = \"Bitcoin seed\";\n    Slip10Curve[\"Ed25519\"] = \"ed25519 seed\";\n})(Slip10Curve = exports.Slip10Curve || (exports.Slip10Curve = {}));\n/**\n * Reverse mapping of Slip10Curve\n */\nfunction slip10CurveFromString(curveString) {\n    switch (curveString) {\n        case Slip10Curve.Ed25519:\n            return Slip10Curve.Ed25519;\n        case Slip10Curve.Secp256k1:\n            return Slip10Curve.Secp256k1;\n        default:\n            throw new Error(`Unknown curve string: '${curveString}'`);\n    }\n}\nexports.slip10CurveFromString = slip10CurveFromString;\nclass Slip10RawIndex extends encoding_1.Uint32 {\n    static hardened(hardenedIndex) {\n        return new Slip10RawIndex(hardenedIndex + 2 ** 31);\n    }\n    static normal(normalIndex) {\n        return new Slip10RawIndex(normalIndex);\n    }\n    isHardened() {\n        return this.data >= 2 ** 31;\n    }\n}\nexports.Slip10RawIndex = Slip10RawIndex;\nconst secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\n// Universal private key derivation accoring to\n// https://github.com/satoshilabs/slips/blob/master/slip-0010.md\nclass Slip10 {\n    static derivePath(curve, seed, path) {\n        let result = this.master(curve, seed);\n        for (const rawIndex of path) {\n            result = this.child(curve, result.privkey, result.chainCode, rawIndex);\n        }\n        return result;\n    }\n    static master(curve, seed) {\n        const i = new hmac_1.Hmac(sha_1.Sha512, encoding_1.Encoding.toAscii(curve)).update(seed).digest();\n        const il = i.slice(0, 32);\n        const ir = i.slice(32, 64);\n        if (curve !== Slip10Curve.Ed25519 && (this.isZero(il) || this.isGteN(curve, il))) {\n            return this.master(curve, i);\n        }\n        return {\n            chainCode: ir,\n            privkey: il,\n        };\n    }\n    static child(curve, parentPrivkey, parentChainCode, rawIndex) {\n        let i;\n        if (rawIndex.isHardened()) {\n            const payload = new Uint8Array([0x00, ...parentPrivkey, ...rawIndex.toBytesBigEndian()]);\n            i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(payload).digest();\n        }\n        else {\n            if (curve === Slip10Curve.Ed25519) {\n                throw new Error(\"Normal keys are not allowed with ed25519\");\n            }\n            else {\n                // Step 1 of https://github.com/satoshilabs/slips/blob/master/slip-0010.md#private-parent-key--private-child-key\n                // Calculate I = HMAC-SHA512(Key = c_par, Data = ser_P(point(k_par)) || ser_32(i)).\n                // where the functions point() and ser_p() are defined in BIP-0032\n                const data = new Uint8Array([\n                    ...Slip10.serializedPoint(curve, new bn_js_1.default(parentPrivkey)),\n                    ...rawIndex.toBytesBigEndian(),\n                ]);\n                i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(data).digest();\n            }\n        }\n        return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i);\n    }\n    /**\n     * Implementation of ser_P(point(k_par)) from BIP-0032\n     *\n     * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n     */\n    static serializedPoint(curve, p) {\n        switch (curve) {\n            case Slip10Curve.Secp256k1:\n                return encoding_1.Encoding.fromHex(secp256k1.g.mul(p).encodeCompressed(\"hex\"));\n            default:\n                throw new Error(\"curve not supported\");\n        }\n    }\n    static childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i) {\n        // step 2 (of the Private parent key â†’ private child key algorithm)\n        const il = i.slice(0, 32);\n        const ir = i.slice(32, 64);\n        // step 3\n        const returnChainCode = ir;\n        // step 4\n        if (curve === Slip10Curve.Ed25519) {\n            return {\n                chainCode: returnChainCode,\n                privkey: il,\n            };\n        }\n        // step 5\n        const n = this.n(curve);\n        const returnChildKeyAsNumber = new bn_js_1.default(il).add(new bn_js_1.default(parentPrivkey)).mod(n);\n        const returnChildKey = Uint8Array.from(returnChildKeyAsNumber.toArray(\"be\", 32));\n        // step 6\n        if (this.isGteN(curve, il) || this.isZero(returnChildKey)) {\n            const newI = new hmac_1.Hmac(sha_1.Sha512, parentChainCode)\n                .update(new Uint8Array([0x01, ...ir, ...rawIndex.toBytesBigEndian()]))\n                .digest();\n            return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, newI);\n        }\n        // step 7\n        return {\n            chainCode: returnChainCode,\n            privkey: returnChildKey,\n        };\n    }\n    static isZero(privkey) {\n        return privkey.every(byte => byte === 0);\n    }\n    static isGteN(curve, privkey) {\n        const keyAsNumber = new bn_js_1.default(privkey);\n        return keyAsNumber.gte(this.n(curve));\n    }\n    static n(curve) {\n        switch (curve) {\n            case Slip10Curve.Secp256k1:\n                return new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", 16);\n            default:\n                throw new Error(\"curve not supported\");\n        }\n    }\n}\nexports.Slip10 = Slip10;\n//# sourceMappingURL=slip10.js.map"]},"metadata":{},"sourceType":"script"}