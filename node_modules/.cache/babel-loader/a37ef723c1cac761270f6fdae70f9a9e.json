{"ast":null,"code":"\"use strict\";\n/**\n * The STREAM online authenticated encryption construction.\n * See <https://eprint.iacr.org/2015/189.pdf> for definition.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst aead_1 = require(\"./aead\");\n\nconst webcrypto_1 = require(\"./providers/webcrypto\");\n/** Size of a nonce required by STREAM in bytes */\n\n\nexports.NONCE_SIZE = 8;\n/** Byte flag indicating this is the last block in the STREAM (otherwise 0) */\n\nexports.LAST_BLOCK_FLAG = 1;\n/** Maximum value of the counter STREAM uses internally to identify messages */\n\nexports.COUNTER_MAX = 0xFFFFFFFF;\n/**\n * A STREAM encryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the ℰ stream encryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\n\nclass StreamEncryptor {\n  /** Create a new StreamEncryptor instance with the given key */\n  static importKey(keyData, nonce, alg, provider = new webcrypto_1.WebCryptoProvider()) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new StreamEncryptor(yield aead_1.AEAD.importKey(keyData, alg, provider), nonce);\n    });\n  }\n\n  constructor(aead, nonce) {\n    this._aead = aead;\n    this._nonce_encoder = new NonceEncoder(nonce);\n  }\n  /** Encrypt and authenticate data using the selected AEAD algorithm */\n\n\n  seal(plaintext, lastBlock = false, associatedData = new Uint8Array(0)) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._aead.seal(plaintext, this._nonce_encoder.next(lastBlock), associatedData);\n    });\n  }\n  /** Make a best effort to wipe memory used by this instance */\n\n\n  clear() {\n    this._aead.clear();\n\n    return this;\n  }\n\n}\n\nexports.StreamEncryptor = StreamEncryptor;\n/**\n * A STREAM decryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the 𝒟 stream decryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\n\nclass StreamDecryptor {\n  /** Create a new StreamDecryptor instance with the given key */\n  static importKey(keyData, nonce, alg, provider = new webcrypto_1.WebCryptoProvider()) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new StreamDecryptor(yield aead_1.AEAD.importKey(keyData, alg, provider), nonce);\n    });\n  }\n\n  constructor(aead, nonce) {\n    this._aead = aead;\n    this._nonce_encoder = new NonceEncoder(nonce);\n  }\n  /** Decrypt and authenticate data using the selected AEAD algorithm */\n\n\n  open(ciphertext, lastBlock = false, associatedData = new Uint8Array(0)) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._aead.open(ciphertext, this._nonce_encoder.next(lastBlock), associatedData);\n    });\n  }\n  /** Make a best effort to wipe memory used by this instance */\n\n\n  clear() {\n    this._aead.clear();\n\n    return this;\n  }\n\n}\n\nexports.StreamDecryptor = StreamDecryptor;\n/** Computes STREAM nonces based on the current position in the STREAM. */\n\nclass NonceEncoder {\n  constructor(noncePrefix) {\n    if (noncePrefix.length !== exports.NONCE_SIZE) {\n      throw new Error(`STREAM: nonce must be 8-bits (got ${noncePrefix.length}`);\n    }\n\n    this.buffer = new ArrayBuffer(exports.NONCE_SIZE + 4 + 1);\n    this.view = new DataView(this.buffer);\n    this.array = new Uint8Array(this.buffer);\n    this.array.set(noncePrefix);\n    this.counter = 0;\n    this.finished = false;\n  }\n  /** Compute the next nonce value, incrementing the internal counter */\n\n\n  next(lastBlock) {\n    if (this.finished) {\n      throw new Error(\"STREAM: already finished\");\n    }\n\n    this.view.setInt32(8, this.counter, false);\n\n    if (lastBlock) {\n      this.view.setInt8(12, exports.LAST_BLOCK_FLAG);\n      this.finished = true;\n    } else {\n      this.counter += 1;\n\n      if (this.counter > exports.COUNTER_MAX) {\n        throw new Error(\"STREAM counter overflowed\");\n      }\n    }\n\n    return this.array;\n  }\n\n}","map":{"version":3,"sources":["/Users/aidansalzmann/redacted-mint/node_modules/miscreant/release/stream.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","aead_1","require","webcrypto_1","NONCE_SIZE","LAST_BLOCK_FLAG","COUNTER_MAX","StreamEncryptor","importKey","keyData","nonce","alg","provider","WebCryptoProvider","AEAD","constructor","aead","_aead","_nonce_encoder","NonceEncoder","seal","plaintext","lastBlock","associatedData","Uint8Array","clear","StreamDecryptor","open","ciphertext","noncePrefix","length","Error","buffer","ArrayBuffer","view","DataView","array","set","counter","finished","setInt32","setInt8"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * The STREAM online authenticated encryption construction.\n * See <https://eprint.iacr.org/2015/189.pdf> for definition.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst aead_1 = require(\"./aead\");\nconst webcrypto_1 = require(\"./providers/webcrypto\");\n/** Size of a nonce required by STREAM in bytes */\nexports.NONCE_SIZE = 8;\n/** Byte flag indicating this is the last block in the STREAM (otherwise 0) */\nexports.LAST_BLOCK_FLAG = 1;\n/** Maximum value of the counter STREAM uses internally to identify messages */\nexports.COUNTER_MAX = 0xFFFFFFFF;\n/**\n * A STREAM encryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the ℰ stream encryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\nclass StreamEncryptor {\n    /** Create a new StreamEncryptor instance with the given key */\n    static importKey(keyData, nonce, alg, provider = new webcrypto_1.WebCryptoProvider()) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new StreamEncryptor(yield aead_1.AEAD.importKey(keyData, alg, provider), nonce);\n        });\n    }\n    constructor(aead, nonce) {\n        this._aead = aead;\n        this._nonce_encoder = new NonceEncoder(nonce);\n    }\n    /** Encrypt and authenticate data using the selected AEAD algorithm */\n    seal(plaintext, lastBlock = false, associatedData = new Uint8Array(0)) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._aead.seal(plaintext, this._nonce_encoder.next(lastBlock), associatedData);\n        });\n    }\n    /** Make a best effort to wipe memory used by this instance */\n    clear() {\n        this._aead.clear();\n        return this;\n    }\n}\nexports.StreamEncryptor = StreamEncryptor;\n/**\n * A STREAM decryptor with a 32-bit counter, generalized for any AEAD algorithm\n *\n * This corresponds to the 𝒟 stream decryptor object as defined in the paper\n * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance\n */\nclass StreamDecryptor {\n    /** Create a new StreamDecryptor instance with the given key */\n    static importKey(keyData, nonce, alg, provider = new webcrypto_1.WebCryptoProvider()) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new StreamDecryptor(yield aead_1.AEAD.importKey(keyData, alg, provider), nonce);\n        });\n    }\n    constructor(aead, nonce) {\n        this._aead = aead;\n        this._nonce_encoder = new NonceEncoder(nonce);\n    }\n    /** Decrypt and authenticate data using the selected AEAD algorithm */\n    open(ciphertext, lastBlock = false, associatedData = new Uint8Array(0)) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._aead.open(ciphertext, this._nonce_encoder.next(lastBlock), associatedData);\n        });\n    }\n    /** Make a best effort to wipe memory used by this instance */\n    clear() {\n        this._aead.clear();\n        return this;\n    }\n}\nexports.StreamDecryptor = StreamDecryptor;\n/** Computes STREAM nonces based on the current position in the STREAM. */\nclass NonceEncoder {\n    constructor(noncePrefix) {\n        if (noncePrefix.length !== exports.NONCE_SIZE) {\n            throw new Error(`STREAM: nonce must be 8-bits (got ${noncePrefix.length}`);\n        }\n        this.buffer = new ArrayBuffer(exports.NONCE_SIZE + 4 + 1);\n        this.view = new DataView(this.buffer);\n        this.array = new Uint8Array(this.buffer);\n        this.array.set(noncePrefix);\n        this.counter = 0;\n        this.finished = false;\n    }\n    /** Compute the next nonce value, incrementing the internal counter */\n    next(lastBlock) {\n        if (this.finished) {\n            throw new Error(\"STREAM: already finished\");\n        }\n        this.view.setInt32(8, this.counter, false);\n        if (lastBlock) {\n            this.view.setInt8(12, exports.LAST_BLOCK_FLAG);\n            this.finished = true;\n        }\n        else {\n            this.counter += 1;\n            if (this.counter > exports.COUNTER_MAX) {\n                throw new Error(\"STREAM counter overflowed\");\n            }\n        }\n        return this.array;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}