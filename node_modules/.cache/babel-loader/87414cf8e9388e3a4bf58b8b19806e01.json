{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar crypto_1 = require(\"@iov/crypto\");\n\nvar encoding_1 = require(\"@iov/encoding\");\n\nvar pako_1 = __importDefault(require(\"pako\"));\n\nvar builder_1 = require(\"./builder\");\n\nvar cosmwasmclient_1 = require(\"./cosmwasmclient\");\n\nvar encoding_2 = require(\"./encoding\");\n\nvar logs_1 = require(\"./logs\");\n\nvar restclient_1 = require(\"./restclient\");\n\nfunction singleAmount(amount, denom) {\n  return [{\n    amount: amount.toString(),\n    denom: denom\n  }];\n}\n\nfunction prepareBuilder(buider) {\n  if (buider === undefined) {\n    return \"\"; // normalization needed by backend\n  } else {\n    if (!builder_1.isValidBuilder(buider)) throw new Error(\"The builder (Docker Hub image with tag) is not valid\");\n    return buider;\n  }\n}\n\nvar defaultFees = {\n  upload: {\n    amount: singleAmount(250000, \"uscrt\"),\n    gas: String(1000000)\n  },\n  init: {\n    amount: singleAmount(125000, \"uscrt\"),\n    gas: String(500000)\n  },\n  exec: {\n    amount: singleAmount(50000, \"uscrt\"),\n    gas: String(200000)\n  },\n  send: {\n    amount: singleAmount(20000, \"uscrt\"),\n    gas: String(80000)\n  }\n};\n\nvar SigningCosmWasmClient = /*#__PURE__*/function (_cosmwasmclient_1$Cos) {\n  _inherits(SigningCosmWasmClient, _cosmwasmclient_1$Cos);\n\n  var _super = _createSuper(SigningCosmWasmClient);\n\n  /**\n   * Creates a new client with signing capability to interact with a CosmWasm blockchain. This is the bigger brother of CosmWasmClient.\n   *\n   * This instance does a lot of caching. In order to benefit from that you should try to use one instance\n   * for the lifetime of your application. When switching backends, a new instance must be created.\n   *\n   * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n   * @param senderAddress The address that will sign and send transactions using this instance\n   * @param signer An asynchronous callback to create a signature for a given transaction. This can be implemented using secure key stores that require user interaction. Or a newer OfflineSigner type that handles that stuff\n   * @param seedOrEnigmaUtils\n   * @param customFees The fees that are paid for transactions\n   * @param broadcastMode Defines at which point of the transaction processing the postTx method (i.e. transaction broadcasting) returns\n   */\n  function SigningCosmWasmClient(apiUrl, senderAddress, signer, seedOrEnigmaUtils, customFees) {\n    var _this;\n\n    var broadcastMode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : restclient_1.BroadcastMode.Block;\n\n    _classCallCheck(this, SigningCosmWasmClient);\n\n    if (seedOrEnigmaUtils instanceof Uint8Array) {\n      _this = _super.call(this, apiUrl, seedOrEnigmaUtils, broadcastMode);\n    } else {\n      _this = _super.call(this, apiUrl, undefined, broadcastMode);\n    }\n\n    _this.anyValidAddress = senderAddress;\n    _this.senderAddress = senderAddress; //this.signCallback = signCallback ? signCallback : undefined;\n\n    _this.signer = signer;\n\n    if (seedOrEnigmaUtils && !(seedOrEnigmaUtils instanceof Uint8Array)) {\n      _this.restClient.enigmautils = seedOrEnigmaUtils;\n    }\n\n    _this.fees = Object.assign(Object.assign({}, defaultFees), customFees || {}); // // Setup contract->hash cache\n    // // This is only needed here and not in CosmWasmClient because we\n    // // need code hashes before sending txs\n    // this.restClient.listCodeInfo().then(async (codes) => {\n    //   for (const code of codes) {\n    //     this.restClient.codeHashCache.set(code.id, code.data_hash);\n    //     const contracts = await this.restClient.listContractsByCodeId(code.id);\n    //     for (const contract of contracts) {\n    //       this.restClient.codeHashCache.set(contract.address, code.data_hash);\n    //     }\n    //   }\n    // });\n\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(SigningCosmWasmClient, [{\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", _get(_getPrototypeOf(SigningCosmWasmClient.prototype), \"getNonce\", this).call(this, address || this.senderAddress));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getNonce(_x) {\n        return _getNonce.apply(this, arguments);\n      }\n\n      return getNonce;\n    }()\n  }, {\n    key: \"getAccount\",\n    value: function () {\n      var _getAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", _get(_getPrototypeOf(SigningCosmWasmClient.prototype), \"getAccount\", this).call(this, address || this.senderAddress));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getAccount(_x2) {\n        return _getAccount.apply(this, arguments);\n      }\n\n      return getAccount;\n    }()\n  }, {\n    key: \"signAdapter\",\n    value: function () {\n      var _signAdapter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(msgs, fee, chainId, memo, accountNumber, sequence) {\n        var signResponse, signBytes, signature;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(\"sign\" in this.signer)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                _context3.next = 3;\n                return this.signer.sign(this.senderAddress, {\n                  chain_id: chainId,\n                  account_number: String(accountNumber),\n                  sequence: String(sequence),\n                  fee: fee,\n                  msgs: msgs,\n                  memo: memo\n                });\n\n              case 3:\n                signResponse = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  msg: msgs,\n                  fee: signResponse.signed.fee,\n                  memo: signResponse.signed.memo,\n                  signatures: [signResponse.signature]\n                });\n\n              case 7:\n                // legacy interface\n                signBytes = encoding_2.makeSignBytes(msgs, fee, chainId, memo, accountNumber, sequence);\n                _context3.next = 10;\n                return this.signer(signBytes);\n\n              case 10:\n                signature = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  msg: msgs,\n                  fee: fee,\n                  memo: memo,\n                  signatures: [signature]\n                });\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function signAdapter(_x3, _x4, _x5, _x6, _x7, _x8) {\n        return _signAdapter.apply(this, arguments);\n      }\n\n      return signAdapter;\n    }()\n    /** Uploads code and returns a receipt, including the code ID */\n\n  }, {\n    key: \"upload\",\n    value: function () {\n      var _upload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(wasmCode) {\n        var meta,\n            memo,\n            fee,\n            source,\n            builder,\n            compressed,\n            storeCodeMsg,\n            _yield$this$getNonce,\n            accountNumber,\n            sequence,\n            chainId,\n            signedTx,\n            result,\n            codeIdAttr,\n            _args4 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                meta = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                memo = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : \"\";\n                fee = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : this.fees.upload;\n                source = meta.source || \"\";\n                builder = prepareBuilder(meta.builder);\n                compressed = pako_1.default.gzip(wasmCode, {\n                  level: 9\n                });\n                storeCodeMsg = {\n                  type: \"wasm/MsgStoreCode\",\n                  value: {\n                    sender: this.senderAddress,\n                    // eslint-disable-next-line @typescript-eslint/camelcase\n                    wasm_byte_code: encoding_1.Encoding.toBase64(compressed),\n                    source: source,\n                    builder: builder\n                  }\n                };\n                _context4.next = 9;\n                return this.getNonce();\n\n              case 9:\n                _yield$this$getNonce = _context4.sent;\n                accountNumber = _yield$this$getNonce.accountNumber;\n                sequence = _yield$this$getNonce.sequence;\n                _context4.next = 14;\n                return this.getChainId();\n\n              case 14:\n                chainId = _context4.sent;\n                _context4.next = 17;\n                return this.signAdapter([storeCodeMsg], fee, chainId, memo, accountNumber, sequence);\n\n              case 17:\n                signedTx = _context4.sent;\n                _context4.next = 20;\n                return this.postTx(signedTx);\n\n              case 20:\n                result = _context4.sent;\n                codeIdAttr = logs_1.findAttribute(result.logs, \"message\", \"code_id\");\n                return _context4.abrupt(\"return\", {\n                  originalSize: wasmCode.length,\n                  originalChecksum: encoding_1.Encoding.toHex(new crypto_1.Sha256(wasmCode).digest()),\n                  compressedSize: compressed.length,\n                  compressedChecksum: encoding_1.Encoding.toHex(new crypto_1.Sha256(compressed).digest()),\n                  codeId: Number.parseInt(codeIdAttr.value, 10),\n                  logs: result.logs,\n                  transactionHash: result.transactionHash\n                });\n\n              case 23:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function upload(_x9) {\n        return _upload.apply(this, arguments);\n      }\n\n      return upload;\n    }()\n  }, {\n    key: \"instantiate\",\n    value: function () {\n      var _instantiate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(codeId, initMsg, label) {\n        var memo,\n            transferAmount,\n            fee,\n            contractCodeHash,\n            _a,\n            instantiateMsg,\n            _yield$this$getNonce2,\n            accountNumber,\n            sequence,\n            chainId,\n            signedTx,\n            nonce,\n            result,\n            errorMessageRgx,\n            rgxMatches,\n            errorCipherB64,\n            errorCipherBz,\n            errorPlainBz,\n            contractAddress,\n            logs,\n            _args5 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                memo = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : \"\";\n                transferAmount = _args5.length > 4 ? _args5[4] : undefined;\n                fee = _args5.length > 5 && _args5[5] !== undefined ? _args5[5] : this.fees.init;\n                contractCodeHash = _args5.length > 6 ? _args5[6] : undefined;\n\n                if (contractCodeHash) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                _context5.next = 7;\n                return this.restClient.getCodeHashByCodeId(codeId);\n\n              case 7:\n                contractCodeHash = _context5.sent;\n                _context5.next = 11;\n                break;\n\n              case 10:\n                this.restClient.codeHashCache.set(codeId, contractCodeHash);\n\n              case 11:\n                if (!memo) {\n                  memo = \"\";\n                }\n\n                _context5.t0 = this.senderAddress;\n                _context5.t1 = codeId.toString();\n                _context5.t2 = label;\n                _context5.t3 = encoding_1.Encoding;\n                _context5.next = 18;\n                return this.restClient.enigmautils.encrypt(contractCodeHash, initMsg);\n\n              case 18:\n                _context5.t4 = _context5.sent;\n                _context5.t5 = _context5.t3.toBase64.call(_context5.t3, _context5.t4);\n                _context5.t6 = transferAmount !== null && transferAmount !== void 0 ? transferAmount : [];\n                _context5.t7 = {\n                  sender: _context5.t0,\n                  code_id: _context5.t1,\n                  label: _context5.t2,\n                  callback_code_hash: \"\",\n                  init_msg: _context5.t5,\n                  init_funds: _context5.t6,\n                  callback_sig: null\n                };\n                instantiateMsg = {\n                  type: \"wasm/MsgInstantiateContract\",\n                  value: _context5.t7\n                };\n                _context5.next = 25;\n                return this.getNonce();\n\n              case 25:\n                _yield$this$getNonce2 = _context5.sent;\n                accountNumber = _yield$this$getNonce2.accountNumber;\n                sequence = _yield$this$getNonce2.sequence;\n                _context5.next = 30;\n                return this.getChainId();\n\n              case 30:\n                chainId = _context5.sent;\n                _context5.next = 33;\n                return this.signAdapter([instantiateMsg], fee, chainId, memo, accountNumber, sequence);\n\n              case 33:\n                signedTx = _context5.sent;\n                nonce = encoding_1.Encoding.fromBase64(instantiateMsg.value.init_msg).slice(0, 32);\n                _context5.prev = 35;\n                _context5.next = 38;\n                return this.postTx(signedTx);\n\n              case 38:\n                result = _context5.sent;\n                _context5.next = 60;\n                break;\n\n              case 41:\n                _context5.prev = 41;\n                _context5.t8 = _context5[\"catch\"](35);\n                _context5.prev = 43;\n                errorMessageRgx = /contract failed: encrypted: (.+?): failed to execute message; message index: 0/g;\n                rgxMatches = errorMessageRgx.exec(_context5.t8.message);\n\n                if (!(rgxMatches == null || rgxMatches.length != 2)) {\n                  _context5.next = 48;\n                  break;\n                }\n\n                throw _context5.t8;\n\n              case 48:\n                errorCipherB64 = rgxMatches[1];\n                errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n                _context5.next = 52;\n                return this.restClient.enigmautils.decrypt(errorCipherBz, nonce);\n\n              case 52:\n                errorPlainBz = _context5.sent;\n                _context5.t8.message = _context5.t8.message.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n                _context5.next = 59;\n                break;\n\n              case 56:\n                _context5.prev = 56;\n                _context5.t9 = _context5[\"catch\"](43);\n                throw new Error(\"Failed to decrypt the following error message: \".concat(_context5.t8.message, \". Decryption error of the error message: \").concat(_context5.t9.message));\n\n              case 59:\n                throw _context5.t8;\n\n              case 60:\n                contractAddress = \"\";\n\n                if (this.restClient.broadcastMode == restclient_1.BroadcastMode.Block) {\n                  contractAddress = (_a = logs_1.findAttribute(result.logs, \"message\", \"contract_address\")) === null || _a === void 0 ? void 0 : _a.value;\n                }\n\n                _context5.next = 64;\n                return this.restClient.decryptLogs(result.logs, [nonce]);\n\n              case 64:\n                logs = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  contractAddress: contractAddress,\n                  logs: logs,\n                  transactionHash: result.transactionHash,\n                  data: result.data\n                });\n\n              case 66:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[35, 41], [43, 56]]);\n      }));\n\n      function instantiate(_x10, _x11, _x12) {\n        return _instantiate.apply(this, arguments);\n      }\n\n      return instantiate;\n    }()\n  }, {\n    key: \"multiExecute\",\n    value: function () {\n      var _multiExecute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(inputMsgs) {\n        var memo,\n            totalFee,\n            _a,\n            msgs,\n            _iterator,\n            _step,\n            inputMsg,\n            contractCodeHash,\n            msg,\n            _yield$this$getNonce3,\n            accountNumber,\n            sequence,\n            fee,\n            chainId,\n            signedTx,\n            result,\n            errorMessageRgx,\n            rgxMatches,\n            errorCipherB64,\n            errorCipherBz,\n            msgIndex,\n            nonce,\n            errorPlainBz,\n            nonces,\n            data,\n            logs,\n            _args6 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                memo = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : \"\";\n                totalFee = _args6.length > 2 ? _args6[2] : undefined;\n\n                if (!memo) {\n                  memo = \"\";\n                }\n\n                msgs = [];\n                _iterator = _createForOfIteratorHelper(inputMsgs);\n                _context6.prev = 5;\n\n                _iterator.s();\n\n              case 7:\n                if ((_step = _iterator.n()).done) {\n                  _context6.next = 30;\n                  break;\n                }\n\n                inputMsg = _step.value;\n                contractCodeHash = inputMsg.contractCodeHash;\n\n                if (contractCodeHash) {\n                  _context6.next = 16;\n                  break;\n                }\n\n                _context6.next = 13;\n                return this.restClient.getCodeHashByContractAddr(inputMsg.contractAddress);\n\n              case 13:\n                contractCodeHash = _context6.sent;\n                _context6.next = 17;\n                break;\n\n              case 16:\n                this.restClient.codeHashCache.set(inputMsg.contractAddress, contractCodeHash);\n\n              case 17:\n                _context6.t0 = this.senderAddress;\n                _context6.t1 = inputMsg.contractAddress;\n                _context6.t2 = encoding_1.Encoding;\n                _context6.next = 22;\n                return this.restClient.enigmautils.encrypt(contractCodeHash, inputMsg.handleMsg);\n\n              case 22:\n                _context6.t3 = _context6.sent;\n                _context6.t4 = _context6.t2.toBase64.call(_context6.t2, _context6.t3);\n                _context6.t5 = (_a = inputMsg.transferAmount, _a !== null && _a !== void 0 ? _a : []);\n                _context6.t6 = {\n                  sender: _context6.t0,\n                  contract: _context6.t1,\n                  callback_code_hash: \"\",\n                  msg: _context6.t4,\n                  sent_funds: _context6.t5,\n                  callback_sig: null\n                };\n                msg = {\n                  type: \"wasm/MsgExecuteContract\",\n                  value: _context6.t6\n                };\n                msgs.push(msg);\n\n              case 28:\n                _context6.next = 7;\n                break;\n\n              case 30:\n                _context6.next = 35;\n                break;\n\n              case 32:\n                _context6.prev = 32;\n                _context6.t7 = _context6[\"catch\"](5);\n\n                _iterator.e(_context6.t7);\n\n              case 35:\n                _context6.prev = 35;\n\n                _iterator.f();\n\n                return _context6.finish(35);\n\n              case 38:\n                _context6.next = 40;\n                return this.getNonce();\n\n              case 40:\n                _yield$this$getNonce3 = _context6.sent;\n                accountNumber = _yield$this$getNonce3.accountNumber;\n                sequence = _yield$this$getNonce3.sequence;\n                fee = totalFee !== null && totalFee !== void 0 ? totalFee : {\n                  gas: String(Number(this.fees.exec.gas) * inputMsgs.length),\n                  amount: this.fees.exec.amount\n                };\n                _context6.next = 46;\n                return this.getChainId();\n\n              case 46:\n                chainId = _context6.sent;\n                _context6.next = 49;\n                return this.signAdapter(msgs, fee, chainId, memo, accountNumber, sequence);\n\n              case 49:\n                signedTx = _context6.sent;\n                _context6.prev = 50;\n                _context6.next = 53;\n                return this.postTx(signedTx);\n\n              case 53:\n                result = _context6.sent;\n                _context6.next = 77;\n                break;\n\n              case 56:\n                _context6.prev = 56;\n                _context6.t8 = _context6[\"catch\"](50);\n                _context6.prev = 58;\n                errorMessageRgx = /contract failed: encrypted: (.+?): failed to execute message; message index: (\\d+)/g;\n                rgxMatches = errorMessageRgx.exec(_context6.t8.message);\n\n                if (!(rgxMatches == null || rgxMatches.length != 3)) {\n                  _context6.next = 63;\n                  break;\n                }\n\n                throw _context6.t8;\n\n              case 63:\n                errorCipherB64 = rgxMatches[1];\n                errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n                msgIndex = Number(rgxMatches[2]);\n                nonce = encoding_1.Encoding.fromBase64(msgs[msgIndex].value.msg).slice(0, 32);\n                _context6.next = 69;\n                return this.restClient.enigmautils.decrypt(errorCipherBz, nonce);\n\n              case 69:\n                errorPlainBz = _context6.sent;\n                _context6.t8.message = _context6.t8.message.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n                _context6.next = 76;\n                break;\n\n              case 73:\n                _context6.prev = 73;\n                _context6.t9 = _context6[\"catch\"](58);\n                throw new Error(\"Failed to decrypt the following error message: \".concat(_context6.t8.message, \". Decryption error of the error message: \").concat(_context6.t9.message));\n\n              case 76:\n                throw _context6.t8;\n\n              case 77:\n                nonces = msgs.map(function (msg) {\n                  return encoding_1.Encoding.fromBase64(msg.value.msg).slice(0, 32);\n                });\n                _context6.next = 80;\n                return this.restClient.decryptDataField(result.data, nonces);\n\n              case 80:\n                data = _context6.sent;\n                _context6.next = 83;\n                return this.restClient.decryptLogs(result.logs, nonces);\n\n              case 83:\n                logs = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  logs: logs,\n                  transactionHash: result.transactionHash,\n                  data: data\n                });\n\n              case 85:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[5, 32, 35, 38], [50, 56], [58, 73]]);\n      }));\n\n      function multiExecute(_x13) {\n        return _multiExecute.apply(this, arguments);\n      }\n\n      return multiExecute;\n    }()\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(contractAddress, handleMsg) {\n        var memo,\n            transferAmount,\n            fee,\n            contractCodeHash,\n            executeMsg,\n            _yield$this$getNonce4,\n            accountNumber,\n            sequence,\n            chainId,\n            signedTx,\n            nonce,\n            result,\n            errorMessageRgx,\n            rgxMatches,\n            errorCipherB64,\n            errorCipherBz,\n            errorPlainBz,\n            data,\n            logs,\n            _args7 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                memo = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : \"\";\n                transferAmount = _args7.length > 3 ? _args7[3] : undefined;\n                fee = _args7.length > 4 && _args7[4] !== undefined ? _args7[4] : this.fees.exec;\n                contractCodeHash = _args7.length > 5 ? _args7[5] : undefined;\n\n                if (contractCodeHash) {\n                  _context7.next = 10;\n                  break;\n                }\n\n                _context7.next = 7;\n                return this.restClient.getCodeHashByContractAddr(contractAddress);\n\n              case 7:\n                contractCodeHash = _context7.sent;\n                _context7.next = 11;\n                break;\n\n              case 10:\n                this.restClient.codeHashCache.set(contractAddress, contractCodeHash);\n\n              case 11:\n                if (!memo) {\n                  memo = \"\";\n                }\n\n                _context7.t0 = this.senderAddress;\n                _context7.t1 = contractAddress;\n                _context7.t2 = encoding_1.Encoding;\n                _context7.next = 17;\n                return this.restClient.enigmautils.encrypt(contractCodeHash, handleMsg);\n\n              case 17:\n                _context7.t3 = _context7.sent;\n                _context7.t4 = _context7.t2.toBase64.call(_context7.t2, _context7.t3);\n                _context7.t5 = transferAmount !== null && transferAmount !== void 0 ? transferAmount : [];\n                _context7.t6 = {\n                  sender: _context7.t0,\n                  contract: _context7.t1,\n                  callback_code_hash: \"\",\n                  msg: _context7.t4,\n                  sent_funds: _context7.t5,\n                  callback_sig: null\n                };\n                executeMsg = {\n                  type: \"wasm/MsgExecuteContract\",\n                  value: _context7.t6\n                };\n                _context7.next = 24;\n                return this.getNonce();\n\n              case 24:\n                _yield$this$getNonce4 = _context7.sent;\n                accountNumber = _yield$this$getNonce4.accountNumber;\n                sequence = _yield$this$getNonce4.sequence;\n                _context7.next = 29;\n                return this.getChainId();\n\n              case 29:\n                chainId = _context7.sent;\n                _context7.next = 32;\n                return this.signAdapter([executeMsg], fee, chainId, memo, accountNumber, sequence);\n\n              case 32:\n                signedTx = _context7.sent;\n                nonce = encoding_1.Encoding.fromBase64(executeMsg.value.msg).slice(0, 32);\n                _context7.prev = 34;\n                _context7.next = 37;\n                return this.postTx(signedTx);\n\n              case 37:\n                result = _context7.sent;\n                _context7.next = 59;\n                break;\n\n              case 40:\n                _context7.prev = 40;\n                _context7.t7 = _context7[\"catch\"](34);\n                _context7.prev = 42;\n                errorMessageRgx = /contract failed: encrypted: (.+?): failed to execute message; message index: 0/g;\n                rgxMatches = errorMessageRgx.exec(_context7.t7.message);\n\n                if (!(rgxMatches == null || rgxMatches.length != 2)) {\n                  _context7.next = 47;\n                  break;\n                }\n\n                throw _context7.t7;\n\n              case 47:\n                errorCipherB64 = rgxMatches[1];\n                errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n                _context7.next = 51;\n                return this.restClient.enigmautils.decrypt(errorCipherBz, nonce);\n\n              case 51:\n                errorPlainBz = _context7.sent;\n                _context7.t7.message = _context7.t7.message.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n                _context7.next = 58;\n                break;\n\n              case 55:\n                _context7.prev = 55;\n                _context7.t8 = _context7[\"catch\"](42);\n                throw new Error(\"Failed to decrypt the following error message: \".concat(_context7.t7.message, \". Decryption error of the error message: \").concat(_context7.t8.message));\n\n              case 58:\n                throw _context7.t7;\n\n              case 59:\n                _context7.next = 61;\n                return this.restClient.decryptDataField(result.data, [nonce]);\n\n              case 61:\n                data = _context7.sent;\n                _context7.next = 64;\n                return this.restClient.decryptLogs(result.logs, [nonce]);\n\n              case 64:\n                logs = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  logs: logs,\n                  transactionHash: result.transactionHash,\n                  data: data\n                });\n\n              case 66:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[34, 40], [42, 55]]);\n      }));\n\n      function execute(_x14, _x15) {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"sendTokens\",\n    value: function () {\n      var _sendTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(recipientAddress, transferAmount) {\n        var memo,\n            fee,\n            sendMsg,\n            _yield$this$getNonce5,\n            accountNumber,\n            sequence,\n            chainId,\n            signedTx,\n            _args8 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                memo = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : \"\";\n                fee = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : this.fees.send;\n                sendMsg = {\n                  type: \"cosmos-sdk/MsgSend\",\n                  value: {\n                    // eslint-disable-next-line @typescript-eslint/camelcase\n                    from_address: this.senderAddress,\n                    // eslint-disable-next-line @typescript-eslint/camelcase\n                    to_address: recipientAddress,\n                    amount: transferAmount\n                  }\n                };\n\n                if (!memo) {\n                  memo = \"\";\n                }\n\n                _context8.next = 6;\n                return this.getNonce();\n\n              case 6:\n                _yield$this$getNonce5 = _context8.sent;\n                accountNumber = _yield$this$getNonce5.accountNumber;\n                sequence = _yield$this$getNonce5.sequence;\n                _context8.next = 11;\n                return this.getChainId();\n\n              case 11:\n                chainId = _context8.sent;\n                _context8.next = 14;\n                return this.signAdapter([sendMsg], fee, chainId, memo, accountNumber, sequence);\n\n              case 14:\n                signedTx = _context8.sent;\n                return _context8.abrupt(\"return\", this.postTx(signedTx));\n\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function sendTokens(_x16, _x17) {\n        return _sendTokens.apply(this, arguments);\n      }\n\n      return sendTokens;\n    }()\n  }]);\n\n  return SigningCosmWasmClient;\n}(cosmwasmclient_1.CosmWasmClient);\n\nexports.SigningCosmWasmClient = SigningCosmWasmClient;","map":{"version":3,"sources":["../src/signingcosmwasmclient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst crypto_1 = require(\"@iov/crypto\");\nconst encoding_1 = require(\"@iov/encoding\");\nconst pako_1 = __importDefault(require(\"pako\"));\nconst builder_1 = require(\"./builder\");\nconst cosmwasmclient_1 = require(\"./cosmwasmclient\");\nconst encoding_2 = require(\"./encoding\");\nconst logs_1 = require(\"./logs\");\nconst restclient_1 = require(\"./restclient\");\nfunction singleAmount(amount, denom) {\n    return [{ amount: amount.toString(), denom: denom }];\n}\nfunction prepareBuilder(buider) {\n    if (buider === undefined) {\n        return \"\"; // normalization needed by backend\n    }\n    else {\n        if (!builder_1.isValidBuilder(buider))\n            throw new Error(\"The builder (Docker Hub image with tag) is not valid\");\n        return buider;\n    }\n}\nconst defaultFees = {\n    upload: {\n        amount: singleAmount(250000, \"uscrt\"),\n        gas: String(1000000),\n    },\n    init: {\n        amount: singleAmount(125000, \"uscrt\"),\n        gas: String(500000),\n    },\n    exec: {\n        amount: singleAmount(50000, \"uscrt\"),\n        gas: String(200000),\n    },\n    send: {\n        amount: singleAmount(20000, \"uscrt\"),\n        gas: String(80000),\n    },\n};\nclass SigningCosmWasmClient extends cosmwasmclient_1.CosmWasmClient {\n    /**\n     * Creates a new client with signing capability to interact with a CosmWasm blockchain. This is the bigger brother of CosmWasmClient.\n     *\n     * This instance does a lot of caching. In order to benefit from that you should try to use one instance\n     * for the lifetime of your application. When switching backends, a new instance must be created.\n     *\n     * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n     * @param senderAddress The address that will sign and send transactions using this instance\n     * @param signer An asynchronous callback to create a signature for a given transaction. This can be implemented using secure key stores that require user interaction. Or a newer OfflineSigner type that handles that stuff\n     * @param seedOrEnigmaUtils\n     * @param customFees The fees that are paid for transactions\n     * @param broadcastMode Defines at which point of the transaction processing the postTx method (i.e. transaction broadcasting) returns\n     */\n    constructor(apiUrl, senderAddress, signer, seedOrEnigmaUtils, customFees, broadcastMode = restclient_1.BroadcastMode.Block) {\n        if (seedOrEnigmaUtils instanceof Uint8Array) {\n            super(apiUrl, seedOrEnigmaUtils, broadcastMode);\n        }\n        else {\n            super(apiUrl, undefined, broadcastMode);\n        }\n        this.anyValidAddress = senderAddress;\n        this.senderAddress = senderAddress;\n        //this.signCallback = signCallback ? signCallback : undefined;\n        this.signer = signer;\n        if (seedOrEnigmaUtils && !(seedOrEnigmaUtils instanceof Uint8Array)) {\n            this.restClient.enigmautils = seedOrEnigmaUtils;\n        }\n        this.fees = Object.assign(Object.assign({}, defaultFees), (customFees || {}));\n        // // Setup contract->hash cache\n        // // This is only needed here and not in CosmWasmClient because we\n        // // need code hashes before sending txs\n        // this.restClient.listCodeInfo().then(async (codes) => {\n        //   for (const code of codes) {\n        //     this.restClient.codeHashCache.set(code.id, code.data_hash);\n        //     const contracts = await this.restClient.listContractsByCodeId(code.id);\n        //     for (const contract of contracts) {\n        //       this.restClient.codeHashCache.set(contract.address, code.data_hash);\n        //     }\n        //   }\n        // });\n    }\n    async getNonce(address) {\n        return super.getNonce(address || this.senderAddress);\n    }\n    async getAccount(address) {\n        return super.getAccount(address || this.senderAddress);\n    }\n    async signAdapter(msgs, fee, chainId, memo, accountNumber, sequence) {\n        // offline signer interface\n        if (\"sign\" in this.signer) {\n            const signResponse = await this.signer.sign(this.senderAddress, {\n                chain_id: chainId,\n                account_number: String(accountNumber),\n                sequence: String(sequence),\n                fee: fee,\n                msgs: msgs,\n                memo: memo,\n            });\n            return {\n                msg: msgs,\n                fee: signResponse.signed.fee,\n                memo: signResponse.signed.memo,\n                signatures: [signResponse.signature],\n            };\n        }\n        else {\n            // legacy interface\n            const signBytes = encoding_2.makeSignBytes(msgs, fee, chainId, memo, accountNumber, sequence);\n            const signature = await this.signer(signBytes);\n            return {\n                msg: msgs,\n                fee: fee,\n                memo: memo,\n                signatures: [signature],\n            };\n        }\n    }\n    /** Uploads code and returns a receipt, including the code ID */\n    async upload(wasmCode, meta = {}, memo = \"\", fee = this.fees.upload) {\n        const source = meta.source || \"\";\n        const builder = prepareBuilder(meta.builder);\n        const compressed = pako_1.default.gzip(wasmCode, { level: 9 });\n        const storeCodeMsg = {\n            type: \"wasm/MsgStoreCode\",\n            value: {\n                sender: this.senderAddress,\n                // eslint-disable-next-line @typescript-eslint/camelcase\n                wasm_byte_code: encoding_1.Encoding.toBase64(compressed),\n                source: source,\n                builder: builder,\n            },\n        };\n        const { accountNumber, sequence } = await this.getNonce();\n        const chainId = await this.getChainId();\n        const signedTx = await this.signAdapter([storeCodeMsg], fee, chainId, memo, accountNumber, sequence);\n        const result = await this.postTx(signedTx);\n        const codeIdAttr = logs_1.findAttribute(result.logs, \"message\", \"code_id\");\n        return {\n            originalSize: wasmCode.length,\n            originalChecksum: encoding_1.Encoding.toHex(new crypto_1.Sha256(wasmCode).digest()),\n            compressedSize: compressed.length,\n            compressedChecksum: encoding_1.Encoding.toHex(new crypto_1.Sha256(compressed).digest()),\n            codeId: Number.parseInt(codeIdAttr.value, 10),\n            logs: result.logs,\n            transactionHash: result.transactionHash,\n        };\n    }\n    async instantiate(codeId, initMsg, label, memo = \"\", transferAmount, fee = this.fees.init, contractCodeHash) {\n        var _a;\n        if (!contractCodeHash) {\n            contractCodeHash = await this.restClient.getCodeHashByCodeId(codeId);\n        }\n        else {\n            this.restClient.codeHashCache.set(codeId, contractCodeHash);\n        }\n        if (!memo) {\n            memo = \"\";\n        }\n        const instantiateMsg = {\n            type: \"wasm/MsgInstantiateContract\",\n            value: {\n                sender: this.senderAddress,\n                code_id: codeId.toString(),\n                label: label,\n                callback_code_hash: \"\",\n                init_msg: encoding_1.Encoding.toBase64(await this.restClient.enigmautils.encrypt(contractCodeHash, initMsg)),\n                init_funds: (transferAmount !== null && transferAmount !== void 0 ? transferAmount : []),\n                callback_sig: null,\n            },\n        };\n        const { accountNumber, sequence } = await this.getNonce();\n        const chainId = await this.getChainId();\n        const signedTx = await this.signAdapter([instantiateMsg], fee, chainId, memo, accountNumber, sequence);\n        const nonce = encoding_1.Encoding.fromBase64(instantiateMsg.value.init_msg).slice(0, 32);\n        let result;\n        try {\n            result = await this.postTx(signedTx);\n        }\n        catch (err) {\n            try {\n                const errorMessageRgx = /contract failed: encrypted: (.+?): failed to execute message; message index: 0/g;\n                const rgxMatches = errorMessageRgx.exec(err.message);\n                if (rgxMatches == null || rgxMatches.length != 2) {\n                    throw err;\n                }\n                const errorCipherB64 = rgxMatches[1];\n                const errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n                const errorPlainBz = await this.restClient.enigmautils.decrypt(errorCipherBz, nonce);\n                err.message = err.message.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n            }\n            catch (decryptionError) {\n                throw new Error(`Failed to decrypt the following error message: ${err.message}. Decryption error of the error message: ${decryptionError.message}`);\n            }\n            throw err;\n        }\n        let contractAddress = \"\";\n        if (this.restClient.broadcastMode == restclient_1.BroadcastMode.Block) {\n            contractAddress = (_a = logs_1.findAttribute(result.logs, \"message\", \"contract_address\")) === null || _a === void 0 ? void 0 : _a.value;\n        }\n        const logs = await this.restClient.decryptLogs(result.logs, [nonce]);\n        return {\n            contractAddress,\n            logs: logs,\n            transactionHash: result.transactionHash,\n            data: result.data,\n        };\n    }\n    async multiExecute(inputMsgs, memo = \"\", totalFee) {\n        var _a;\n        if (!memo) {\n            memo = \"\";\n        }\n        const msgs = [];\n        for (const inputMsg of inputMsgs) {\n            let { contractCodeHash } = inputMsg;\n            if (!contractCodeHash) {\n                contractCodeHash = await this.restClient.getCodeHashByContractAddr(inputMsg.contractAddress);\n            }\n            else {\n                this.restClient.codeHashCache.set(inputMsg.contractAddress, contractCodeHash);\n            }\n            const msg = {\n                type: \"wasm/MsgExecuteContract\",\n                value: {\n                    sender: this.senderAddress,\n                    contract: inputMsg.contractAddress,\n                    callback_code_hash: \"\",\n                    msg: encoding_1.Encoding.toBase64(await this.restClient.enigmautils.encrypt(contractCodeHash, inputMsg.handleMsg)),\n                    sent_funds: (_a = inputMsg.transferAmount, (_a !== null && _a !== void 0 ? _a : [])),\n                    callback_sig: null,\n                },\n            };\n            msgs.push(msg);\n        }\n        const { accountNumber, sequence } = await this.getNonce();\n        const fee = (totalFee !== null && totalFee !== void 0 ? totalFee : {\n            gas: String(Number(this.fees.exec.gas) * inputMsgs.length),\n            amount: this.fees.exec.amount,\n        });\n        const chainId = await this.getChainId();\n        const signedTx = await this.signAdapter(msgs, fee, chainId, memo, accountNumber, sequence);\n        let result;\n        try {\n            result = await this.postTx(signedTx);\n        }\n        catch (err) {\n            try {\n                const errorMessageRgx = /contract failed: encrypted: (.+?): failed to execute message; message index: (\\d+)/g;\n                const rgxMatches = errorMessageRgx.exec(err.message);\n                if (rgxMatches == null || rgxMatches.length != 3) {\n                    throw err;\n                }\n                const errorCipherB64 = rgxMatches[1];\n                const errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n                const msgIndex = Number(rgxMatches[2]);\n                const nonce = encoding_1.Encoding.fromBase64(msgs[msgIndex].value.msg).slice(0, 32);\n                const errorPlainBz = await this.restClient.enigmautils.decrypt(errorCipherBz, nonce);\n                err.message = err.message.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n            }\n            catch (decryptionError) {\n                throw new Error(`Failed to decrypt the following error message: ${err.message}. Decryption error of the error message: ${decryptionError.message}`);\n            }\n            throw err;\n        }\n        const nonces = msgs.map((msg) => encoding_1.Encoding.fromBase64(msg.value.msg).slice(0, 32));\n        const data = await this.restClient.decryptDataField(result.data, nonces);\n        const logs = await this.restClient.decryptLogs(result.logs, nonces);\n        return {\n            logs: logs,\n            transactionHash: result.transactionHash,\n            data: data,\n        };\n    }\n    async execute(contractAddress, handleMsg, memo = \"\", transferAmount, fee = this.fees.exec, contractCodeHash) {\n        if (!contractCodeHash) {\n            contractCodeHash = await this.restClient.getCodeHashByContractAddr(contractAddress);\n        }\n        else {\n            this.restClient.codeHashCache.set(contractAddress, contractCodeHash);\n        }\n        if (!memo) {\n            memo = \"\";\n        }\n        const executeMsg = {\n            type: \"wasm/MsgExecuteContract\",\n            value: {\n                sender: this.senderAddress,\n                contract: contractAddress,\n                callback_code_hash: \"\",\n                msg: encoding_1.Encoding.toBase64(await this.restClient.enigmautils.encrypt(contractCodeHash, handleMsg)),\n                sent_funds: (transferAmount !== null && transferAmount !== void 0 ? transferAmount : []),\n                callback_sig: null,\n            },\n        };\n        const { accountNumber, sequence } = await this.getNonce();\n        const chainId = await this.getChainId();\n        const signedTx = await this.signAdapter([executeMsg], fee, chainId, memo, accountNumber, sequence);\n        const nonce = encoding_1.Encoding.fromBase64(executeMsg.value.msg).slice(0, 32);\n        let result;\n        try {\n            result = await this.postTx(signedTx);\n        }\n        catch (err) {\n            try {\n                const errorMessageRgx = /contract failed: encrypted: (.+?): failed to execute message; message index: 0/g;\n                const rgxMatches = errorMessageRgx.exec(err.message);\n                if (rgxMatches == null || rgxMatches.length != 2) {\n                    throw err;\n                }\n                const errorCipherB64 = rgxMatches[1];\n                const errorCipherBz = encoding_1.Encoding.fromBase64(errorCipherB64);\n                const errorPlainBz = await this.restClient.enigmautils.decrypt(errorCipherBz, nonce);\n                err.message = err.message.replace(errorCipherB64, encoding_1.Encoding.fromUtf8(errorPlainBz));\n            }\n            catch (decryptionError) {\n                throw new Error(`Failed to decrypt the following error message: ${err.message}. Decryption error of the error message: ${decryptionError.message}`);\n            }\n            throw err;\n        }\n        const data = await this.restClient.decryptDataField(result.data, [nonce]);\n        const logs = await this.restClient.decryptLogs(result.logs, [nonce]);\n        return {\n            logs: logs,\n            transactionHash: result.transactionHash,\n            data: data,\n        };\n    }\n    async sendTokens(recipientAddress, transferAmount, memo = \"\", fee = this.fees.send) {\n        const sendMsg = {\n            type: \"cosmos-sdk/MsgSend\",\n            value: {\n                // eslint-disable-next-line @typescript-eslint/camelcase\n                from_address: this.senderAddress,\n                // eslint-disable-next-line @typescript-eslint/camelcase\n                to_address: recipientAddress,\n                amount: transferAmount,\n            },\n        };\n        if (!memo) {\n            memo = \"\";\n        }\n        const { accountNumber, sequence } = await this.getNonce();\n        const chainId = await this.getChainId();\n        const signedTx = await this.signAdapter([sendMsg], fee, chainId, memo, accountNumber, sequence);\n        return this.postTx(signedTx);\n    }\n}\nexports.SigningCosmWasmClient = SigningCosmWasmClient;\n//# sourceMappingURL=signingcosmwasmclient.js.map"]},"metadata":{},"sourceType":"script"}