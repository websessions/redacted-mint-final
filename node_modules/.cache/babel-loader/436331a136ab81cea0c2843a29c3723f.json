{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar encoding_1 = require(\"./encoding\");\n\nvar typechecks_1 = require(\"./typechecks\");\n\nvar prefixes = {\n  string: \"string:\",\n  bytes: \"bytes:\"\n};\n/**\n * Encodes non-circular JavaScript objects and primitives into JSON.\n * Used for encoding/decoding transactions but works for kind of data consisting of the supported types.\n *\n * Supported types:\n * - boolean\n * - number\n * - null\n * - object\n * - Array\n * - string\n * - Uint8Array\n */\n\nvar TransactionEncoder = /*#__PURE__*/function () {\n  function TransactionEncoder() {\n    _classCallCheck(this, TransactionEncoder);\n  }\n\n  _createClass(TransactionEncoder, null, [{\n    key: \"toJson\",\n    value: function toJson(data) {\n      if (typeof data === \"number\" || typeof data === \"boolean\") {\n        return data;\n      }\n\n      if (data === null) {\n        return null;\n      }\n\n      if (typeof data === \"string\") {\n        return \"\".concat(prefixes.string).concat(data);\n      }\n\n      if (typechecks_1.isUint8Array(data)) {\n        return \"\".concat(prefixes.bytes).concat(encoding_1.Encoding.toHex(data));\n      }\n\n      if (Array.isArray(data)) {\n        return data.map(TransactionEncoder.toJson);\n      } // Exclude special kind of objects like Array, Date or Uint8Array\n      // Object.prototype.toString() returns a specified value:\n      // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n\n\n      if (typeof data === \"object\" && data !== null && Object.prototype.toString.call(data) === \"[object Object]\") {\n        var out = {};\n\n        for (var _i = 0, _Object$keys = Object.keys(data); _i < _Object$keys.length; _i++) {\n          var key = _Object$keys[_i];\n          var value = data[key]; // Skip dictionary entries with value `undefined`, just like native JSON:\n          // > JSON.stringify({ foo: undefined })\n          // '{}'\n\n          if (value === undefined) continue; // tslint:disable-next-line: no-object-mutation\n\n          out[key] = TransactionEncoder.toJson(value);\n        }\n\n        return out;\n      }\n\n      throw new Error(\"Cannot encode type to JSON\");\n    }\n  }, {\n    key: \"fromJson\",\n    value: function fromJson(data) {\n      if (typeof data === \"number\" || typeof data === \"boolean\") {\n        return data;\n      }\n\n      if (data === null) {\n        return null;\n      }\n\n      if (typeof data === \"string\") {\n        if (data.startsWith(prefixes.string)) {\n          return data.slice(prefixes.string.length);\n        }\n\n        if (data.startsWith(prefixes.bytes)) {\n          return encoding_1.Encoding.fromHex(data.slice(prefixes.bytes.length));\n        }\n\n        throw new Error(\"Found string with unknown prefix\");\n      }\n\n      if (Array.isArray(data)) {\n        return data.map(TransactionEncoder.fromJson);\n      } // Exclude special kind of objects like Array, Date or Uint8Array\n      // Object.prototype.toString() returns a specified value:\n      // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n\n\n      if (typeof data === \"object\" && data !== null && Object.prototype.toString.call(data) === \"[object Object]\") {\n        var out = {};\n\n        for (var _i2 = 0, _Object$keys2 = Object.keys(data); _i2 < _Object$keys2.length; _i2++) {\n          var key = _Object$keys2[_i2];\n          // tslint:disable-next-line: no-object-mutation\n          out[key] = TransactionEncoder.fromJson(data[key]);\n        }\n\n        return out;\n      }\n\n      throw new Error(\"Cannot decode type from JSON\");\n    }\n  }]);\n\n  return TransactionEncoder;\n}();\n\nexports.TransactionEncoder = TransactionEncoder;","map":{"version":3,"sources":["../src/transactionencoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst encoding_1 = require(\"./encoding\");\nconst typechecks_1 = require(\"./typechecks\");\nconst prefixes = {\n    string: \"string:\",\n    bytes: \"bytes:\",\n};\n/**\n * Encodes non-circular JavaScript objects and primitives into JSON.\n * Used for encoding/decoding transactions but works for kind of data consisting of the supported types.\n *\n * Supported types:\n * - boolean\n * - number\n * - null\n * - object\n * - Array\n * - string\n * - Uint8Array\n */\nclass TransactionEncoder {\n    static toJson(data) {\n        if (typeof data === \"number\" || typeof data === \"boolean\") {\n            return data;\n        }\n        if (data === null) {\n            return null;\n        }\n        if (typeof data === \"string\") {\n            return `${prefixes.string}${data}`;\n        }\n        if (typechecks_1.isUint8Array(data)) {\n            return `${prefixes.bytes}${encoding_1.Encoding.toHex(data)}`;\n        }\n        if (Array.isArray(data)) {\n            return data.map(TransactionEncoder.toJson);\n        }\n        // Exclude special kind of objects like Array, Date or Uint8Array\n        // Object.prototype.toString() returns a specified value:\n        // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n        if (typeof data === \"object\" &&\n            data !== null &&\n            Object.prototype.toString.call(data) === \"[object Object]\") {\n            const out = {};\n            for (const key of Object.keys(data)) {\n                const value = data[key];\n                // Skip dictionary entries with value `undefined`, just like native JSON:\n                // > JSON.stringify({ foo: undefined })\n                // '{}'\n                if (value === undefined)\n                    continue;\n                // tslint:disable-next-line: no-object-mutation\n                out[key] = TransactionEncoder.toJson(value);\n            }\n            return out;\n        }\n        throw new Error(\"Cannot encode type to JSON\");\n    }\n    static fromJson(data) {\n        if (typeof data === \"number\" || typeof data === \"boolean\") {\n            return data;\n        }\n        if (data === null) {\n            return null;\n        }\n        if (typeof data === \"string\") {\n            if (data.startsWith(prefixes.string)) {\n                return data.slice(prefixes.string.length);\n            }\n            if (data.startsWith(prefixes.bytes)) {\n                return encoding_1.Encoding.fromHex(data.slice(prefixes.bytes.length));\n            }\n            throw new Error(\"Found string with unknown prefix\");\n        }\n        if (Array.isArray(data)) {\n            return data.map(TransactionEncoder.fromJson);\n        }\n        // Exclude special kind of objects like Array, Date or Uint8Array\n        // Object.prototype.toString() returns a specified value:\n        // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n        if (typeof data === \"object\" &&\n            data !== null &&\n            Object.prototype.toString.call(data) === \"[object Object]\") {\n            const out = {};\n            for (const key of Object.keys(data)) {\n                // tslint:disable-next-line: no-object-mutation\n                out[key] = TransactionEncoder.fromJson(data[key]);\n            }\n            return out;\n        }\n        throw new Error(\"Cannot decode type from JSON\");\n    }\n}\nexports.TransactionEncoder = TransactionEncoder;\n//# sourceMappingURL=transactionencoder.js.map"]},"metadata":{},"sourceType":"script"}