{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst exceptions_1 = require(\"../exceptions\");\n\nconst aes_1 = require(\"./webcrypto/aes\");\n\nconst aes_ctr_1 = require(\"./webcrypto/aes_ctr\");\n/** Placeholder backend for using pure JavaScript crypto implementations */\n\n\nclass WebCryptoProvider {\n  constructor(crypto = window.crypto) {\n    this.crypto = crypto;\n  }\n\n  importBlockCipherKey(keyData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return aes_1.default.importKey(this.crypto, keyData);\n    });\n  }\n\n  importCTRKey(keyData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield aes_ctr_1.default.importKey(this.crypto, keyData);\n      } catch (e) {\n        if (e.message.includes(\"unsupported\")) {\n          throw new exceptions_1.NotImplementedError(\"WebCryptoProvider: AES-CTR unsupported. Use PolyfillCryptoProvider.\");\n        } else {\n          throw e;\n        }\n      }\n    });\n  }\n\n}\n\nexports.WebCryptoProvider = WebCryptoProvider;","map":{"version":3,"sources":["/Users/aidansalzmann/redacted-mint/node_modules/miscreant/release/providers/webcrypto.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","exceptions_1","require","aes_1","aes_ctr_1","WebCryptoProvider","constructor","crypto","window","importBlockCipherKey","keyData","default","importKey","importCTRKey","message","includes","NotImplementedError"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,SAAO,KAAKD,CAAC,KAAKA,CAAC,GAAGE,OAAT,CAAN,EAAyB,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAE,UAAI;AAAEC,QAAAA,IAAI,CAACN,SAAS,CAACO,IAAV,CAAeF,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOG,CAAP,EAAU;AAAEL,QAAAA,MAAM,CAACK,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBJ,KAAlB,EAAyB;AAAE,UAAI;AAAEC,QAAAA,IAAI,CAACN,SAAS,CAAC,OAAD,CAAT,CAAmBK,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOG,CAAP,EAAU;AAAEL,QAAAA,MAAM,CAACK,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACL,KAAR,CAArB,GAAsC,IAAIN,CAAJ,CAAM,UAAUG,OAAV,EAAmB;AAAEA,QAAAA,OAAO,CAACQ,MAAM,CAACL,KAAR,CAAP;AAAwB,OAAnD,EAAqDO,IAArD,CAA0DR,SAA1D,EAAqEK,QAArE,CAAtC;AAAuH;;AAC/IH,IAAAA,IAAI,CAAC,CAACN,SAAS,GAAGA,SAAS,CAACa,KAAV,CAAgBhB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDS,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CAPD;;AAQAO,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEX,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMY,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,iBAAD,CAArB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAzB;AACA;;;AACA,MAAMG,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,MAAM,GAAGC,MAAM,CAACD,MAAjB,EAAyB;AAChC,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACDE,EAAAA,oBAAoB,CAACC,OAAD,EAAU;AAC1B,WAAO9B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,aAAOuB,KAAK,CAACQ,OAAN,CAAcC,SAAd,CAAwB,KAAKL,MAA7B,EAAqCG,OAArC,CAAP;AACH,KAFe,CAAhB;AAGH;;AACDG,EAAAA,YAAY,CAACH,OAAD,EAAU;AAClB,WAAO9B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,UAAI;AACA,eAAO,MAAMwB,SAAS,CAACO,OAAV,CAAkBC,SAAlB,CAA4B,KAAKL,MAAjC,EAAyCG,OAAzC,CAAb;AACH,OAFD,CAGA,OAAOlB,CAAP,EAAU;AACN,YAAIA,CAAC,CAACsB,OAAF,CAAUC,QAAV,CAAmB,aAAnB,CAAJ,EAAuC;AACnC,gBAAM,IAAId,YAAY,CAACe,mBAAjB,CAAqC,qEAArC,CAAN;AACH,SAFD,MAGK;AACD,gBAAMxB,CAAN;AACH;AACJ;AACJ,KAZe,CAAhB;AAaH;;AAvBmB;;AAyBxBQ,OAAO,CAACK,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst exceptions_1 = require(\"../exceptions\");\nconst aes_1 = require(\"./webcrypto/aes\");\nconst aes_ctr_1 = require(\"./webcrypto/aes_ctr\");\n/** Placeholder backend for using pure JavaScript crypto implementations */\nclass WebCryptoProvider {\n    constructor(crypto = window.crypto) {\n        this.crypto = crypto;\n    }\n    importBlockCipherKey(keyData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return aes_1.default.importKey(this.crypto, keyData);\n        });\n    }\n    importCTRKey(keyData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield aes_ctr_1.default.importKey(this.crypto, keyData);\n            }\n            catch (e) {\n                if (e.message.includes(\"unsupported\")) {\n                    throw new exceptions_1.NotImplementedError(\"WebCryptoProvider: AES-CTR unsupported. Use PolyfillCryptoProvider.\");\n                }\n                else {\n                    throw e;\n                }\n            }\n        });\n    }\n}\nexports.WebCryptoProvider = WebCryptoProvider;\n"]},"metadata":{},"sourceType":"script"}