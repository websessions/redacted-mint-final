{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * NOTE! Due to the inability to guarantee real constant time evaluation of\n * anything in JavaScript VM, this is module is the best effort.\n */\n\n/**\n * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.\n *\n * Supports only 32-bit integers, so resultIfOne or resultIfZero are not\n * integers, they'll be converted to them with bitwise operations.\n */\n\nfunction select(subject, resultIfOne, resultIfZero) {\n  return ~(subject - 1) & resultIfOne | subject - 1 & resultIfZero;\n}\n\nexports.select = select;\n/**\n * Returns 1 if a and b are of equal length and their contents\n * are equal, or 0 otherwise.\n *\n * Note that unlike in equal(), zero-length inputs are considered\n * the same, so this function will return 1.\n */\n\nfunction compare(a, b) {\n  if (a.length !== b.length) {\n    return 0;\n  }\n\n  var result = 0;\n\n  for (var i = 0; i < a.length; i++) {\n    result |= a[i] ^ b[i];\n  }\n\n  return 1 & result - 1 >>> 8;\n}\n\nexports.compare = compare;\n/**\n * Returns true if a and b are of equal non-zero length,\n * and their contents are equal, or false otherwise.\n *\n * Note that unlike in compare() zero-length inputs are considered\n * _not_ equal, so this function will return false.\n */\n\nfunction equal(a, b) {\n  if (a.length === 0 || b.length === 0) {\n    return false;\n  }\n\n  return compare(a, b) !== 0;\n}\n\nexports.equal = equal;","map":{"version":3,"sources":["/Users/aidansalzmann/redacted-mint/node_modules/miscreant/release/internals/constant-time.js"],"names":["Object","defineProperty","exports","value","select","subject","resultIfOne","resultIfZero","compare","a","b","length","result","i","equal"],"mappings":"AAAA,a,CACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,WAAzB,EAAsCC,YAAtC,EAAoD;AAChD,SAAQ,EAAEF,OAAO,GAAG,CAAZ,IAAiBC,WAAlB,GAAmCD,OAAO,GAAG,CAAX,GAAgBE,YAAzD;AACH;;AACDL,OAAO,CAACE,MAAR,GAAiBA,MAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASI,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACnB,MAAID,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAnB,EAA2B;AACvB,WAAO,CAAP;AACH;;AACD,MAAIC,MAAM,GAAG,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAAC,CAACE,MAAtB,EAA8BE,CAAC,EAA/B,EAAmC;AAC/BD,IAAAA,MAAM,IAAIH,CAAC,CAACI,CAAD,CAAD,GAAOH,CAAC,CAACG,CAAD,CAAlB;AACH;;AACD,SAAQ,IAAMD,MAAM,GAAG,CAAV,KAAiB,CAA9B;AACH;;AACDV,OAAO,CAACM,OAAR,GAAkBA,OAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASM,KAAT,CAAeL,CAAf,EAAkBC,CAAlB,EAAqB;AACjB,MAAID,CAAC,CAACE,MAAF,KAAa,CAAb,IAAkBD,CAAC,CAACC,MAAF,KAAa,CAAnC,EAAsC;AAClC,WAAO,KAAP;AACH;;AACD,SAAOH,OAAO,CAACC,CAAD,EAAIC,CAAJ,CAAP,KAAkB,CAAzB;AACH;;AACDR,OAAO,CAACY,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * NOTE! Due to the inability to guarantee real constant time evaluation of\n * anything in JavaScript VM, this is module is the best effort.\n */\n/**\n * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.\n *\n * Supports only 32-bit integers, so resultIfOne or resultIfZero are not\n * integers, they'll be converted to them with bitwise operations.\n */\nfunction select(subject, resultIfOne, resultIfZero) {\n    return (~(subject - 1) & resultIfOne) | ((subject - 1) & resultIfZero);\n}\nexports.select = select;\n/**\n * Returns 1 if a and b are of equal length and their contents\n * are equal, or 0 otherwise.\n *\n * Note that unlike in equal(), zero-length inputs are considered\n * the same, so this function will return 1.\n */\nfunction compare(a, b) {\n    if (a.length !== b.length) {\n        return 0;\n    }\n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n        result |= a[i] ^ b[i];\n    }\n    return (1 & ((result - 1) >>> 8));\n}\nexports.compare = compare;\n/**\n * Returns true if a and b are of equal non-zero length,\n * and their contents are equal, or false otherwise.\n *\n * Note that unlike in compare() zero-length inputs are considered\n * _not_ equal, so this function will return false.\n */\nfunction equal(a, b) {\n    if (a.length === 0 || b.length === 0) {\n        return false;\n    }\n    return compare(a, b) !== 0;\n}\nexports.equal = equal;\n"]},"metadata":{},"sourceType":"script"}