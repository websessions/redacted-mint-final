{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * AES-CTR using a WebCrypto (or similar) API\n */\n\nvar WebCryptoAesCtr = /*#__PURE__*/function () {\n  function WebCryptoAesCtr(key, crypto) {\n    _classCallCheck(this, WebCryptoAesCtr);\n\n    this.key = key;\n    this.crypto = crypto;\n  }\n\n  _createClass(WebCryptoAesCtr, [{\n    key: \"encryptCtr\",\n    value: function encryptCtr(iv, plaintext) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var ciphertext;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.crypto.subtle.encrypt({\n                  name: \"AES-CTR\",\n                  counter: iv,\n                  length: 16\n                }, this.key, plaintext);\n\n              case 2:\n                ciphertext = _context.sent;\n                return _context.abrupt(\"return\", new Uint8Array(ciphertext));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      // TODO: actually clear something. Do we need to?\n      return this;\n    }\n  }], [{\n    key: \"importKey\",\n    value: function importKey(crypto, keyData) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var key;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(keyData.length !== 16 && keyData.length !== 32)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Miscreant: invalid key length: \".concat(keyData.length, \" (expected 16 or 32 bytes)\"));\n\n              case 2:\n                _context2.next = 4;\n                return crypto.subtle.importKey(\"raw\", keyData, \"AES-CTR\", false, [\"encrypt\"]);\n\n              case 4:\n                key = _context2.sent;\n                return _context2.abrupt(\"return\", new WebCryptoAesCtr(key, crypto));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }\n  }]);\n\n  return WebCryptoAesCtr;\n}();\n\nexports.default = WebCryptoAesCtr;","map":{"version":3,"sources":["/Users/aidansalzmann/redacted-mint/node_modules/miscreant/release/providers/webcrypto/aes_ctr.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","WebCryptoAesCtr","key","crypto","iv","plaintext","subtle","encrypt","name","counter","length","ciphertext","Uint8Array","keyData","Error","importKey","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * AES-CTR using a WebCrypto (or similar) API\n */\nclass WebCryptoAesCtr {\n    constructor(key, crypto) {\n        this.key = key;\n        this.crypto = crypto;\n    }\n    static importKey(crypto, keyData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Only AES-128 and AES-256 supported. AES-192 is not.\n            if (keyData.length !== 16 && keyData.length !== 32) {\n                throw new Error(`Miscreant: invalid key length: ${keyData.length} (expected 16 or 32 bytes)`);\n            }\n            const key = yield crypto.subtle.importKey(\"raw\", keyData, \"AES-CTR\", false, [\"encrypt\"]);\n            return new WebCryptoAesCtr(key, crypto);\n        });\n    }\n    encryptCtr(iv, plaintext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ciphertext = yield this.crypto.subtle.encrypt({ name: \"AES-CTR\", counter: iv, length: 16 }, this.key, plaintext);\n            return new Uint8Array(ciphertext);\n        });\n    }\n    clear() {\n        // TODO: actually clear something. Do we need to?\n        return this;\n    }\n}\nexports.default = WebCryptoAesCtr;\n"]},"metadata":{},"sourceType":"script"}