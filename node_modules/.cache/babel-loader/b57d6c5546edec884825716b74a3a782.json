{"ast":null,"code":"\"use strict\"; // Keep all classes requiring libsodium-js in one file as having multiple\n// requiring of the libsodium-wrappers module currently crashes browsers\n//\n// libsodium.js API: https://gist.github.com/webmaster128/b2dbe6d54d36dd168c9fabf441b9b09c\n\nvar _toConsumableArray = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aidansalzmann/redacted-mint/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar libsodium_wrappers_1 = __importDefault(require(\"libsodium-wrappers\"));\n\nvar Argon2id = /*#__PURE__*/function () {\n  function Argon2id() {\n    _classCallCheck(this, Argon2id);\n  }\n\n  _createClass(Argon2id, null, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(password, salt, options) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return libsodium_wrappers_1.default.ready;\n\n              case 2:\n                return _context.abrupt(\"return\", libsodium_wrappers_1.default.crypto_pwhash(options.outputLength, password, salt, // libsodium only supports 16 byte salts and will throw when you don't respect that\n                options.opsLimit, options.memLimitKib * 1024, libsodium_wrappers_1.default.crypto_pwhash_ALG_ARGON2ID13));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function execute(_x, _x2, _x3) {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }]);\n\n  return Argon2id;\n}();\n\nexports.Argon2id = Argon2id;\n\nvar Ed25519Keypair = /*#__PURE__*/function () {\n  function Ed25519Keypair(privkey, pubkey) {\n    _classCallCheck(this, Ed25519Keypair);\n\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  } // a libsodium privkey has the format `<ed25519 privkey> + <ed25519 pubkey>`\n\n\n  _createClass(Ed25519Keypair, [{\n    key: \"toLibsodiumPrivkey\",\n    value: function toLibsodiumPrivkey() {\n      return new Uint8Array([].concat(_toConsumableArray(this.privkey), _toConsumableArray(this.pubkey)));\n    }\n  }], [{\n    key: \"fromLibsodiumPrivkey\",\n    value: function fromLibsodiumPrivkey(libsodiumPrivkey) {\n      if (libsodiumPrivkey.length !== 64) {\n        throw new Error(\"Unexpected key length \".concat(libsodiumPrivkey.length, \". Must be 64.\"));\n      }\n\n      return new Ed25519Keypair(libsodiumPrivkey.slice(0, 32), libsodiumPrivkey.slice(32, 64));\n    }\n  }]);\n\n  return Ed25519Keypair;\n}();\n\nexports.Ed25519Keypair = Ed25519Keypair;\n\nvar Ed25519 = /*#__PURE__*/function () {\n  function Ed25519() {\n    _classCallCheck(this, Ed25519);\n  }\n\n  _createClass(Ed25519, null, [{\n    key: \"makeKeypair\",\n    value:\n    /**\n     * Generates a keypair deterministically from a given 32 bytes seed.\n     *\n     * This seed equals the Ed25519 private key.\n     * For implementation details see crypto_sign_seed_keypair in\n     * https://download.libsodium.org/doc/public-key_cryptography/public-key_signatures.html\n     * and diagram on https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n     */\n    function () {\n      var _makeKeypair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(seed) {\n        var keypair;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return libsodium_wrappers_1.default.ready;\n\n              case 2:\n                keypair = libsodium_wrappers_1.default.crypto_sign_seed_keypair(seed);\n                return _context2.abrupt(\"return\", Ed25519Keypair.fromLibsodiumPrivkey(keypair.privateKey));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function makeKeypair(_x4) {\n        return _makeKeypair.apply(this, arguments);\n      }\n\n      return makeKeypair;\n    }()\n  }, {\n    key: \"createSignature\",\n    value: function () {\n      var _createSignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(message, keyPair) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return libsodium_wrappers_1.default.ready;\n\n              case 2:\n                return _context3.abrupt(\"return\", libsodium_wrappers_1.default.crypto_sign_detached(message, keyPair.toLibsodiumPrivkey()));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function createSignature(_x5, _x6) {\n        return _createSignature.apply(this, arguments);\n      }\n\n      return createSignature;\n    }()\n  }, {\n    key: \"verifySignature\",\n    value: function () {\n      var _verifySignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(signature, message, pubkey) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return libsodium_wrappers_1.default.ready;\n\n              case 2:\n                return _context4.abrupt(\"return\", libsodium_wrappers_1.default.crypto_sign_verify_detached(signature, message, pubkey));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function verifySignature(_x7, _x8, _x9) {\n        return _verifySignature.apply(this, arguments);\n      }\n\n      return verifySignature;\n    }()\n  }]);\n\n  return Ed25519;\n}();\n\nexports.Ed25519 = Ed25519;\n\nvar Xchacha20poly1305Ietf = /*#__PURE__*/function () {\n  function Xchacha20poly1305Ietf() {\n    _classCallCheck(this, Xchacha20poly1305Ietf);\n  }\n\n  _createClass(Xchacha20poly1305Ietf, null, [{\n    key: \"encrypt\",\n    value: function () {\n      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(message, key, nonce) {\n        var additionalData;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return libsodium_wrappers_1.default.ready;\n\n              case 2:\n                additionalData = null;\n                return _context5.abrupt(\"return\", libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_encrypt(message, additionalData, null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n                nonce, key));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function encrypt(_x10, _x11, _x12) {\n        return _encrypt.apply(this, arguments);\n      }\n\n      return encrypt;\n    }()\n  }, {\n    key: \"decrypt\",\n    value: function () {\n      var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(ciphertext, key, nonce) {\n        var additionalData;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return libsodium_wrappers_1.default.ready;\n\n              case 2:\n                additionalData = null;\n                return _context6.abrupt(\"return\", libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_decrypt(null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n                ciphertext, additionalData, nonce, key));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function decrypt(_x13, _x14, _x15) {\n        return _decrypt.apply(this, arguments);\n      }\n\n      return decrypt;\n    }()\n  }]);\n\n  return Xchacha20poly1305Ietf;\n}();\n\nexports.Xchacha20poly1305Ietf = Xchacha20poly1305Ietf;","map":{"version":3,"sources":["../src/libsodium.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Keep all classes requiring libsodium-js in one file as having multiple\n// requiring of the libsodium-wrappers module currently crashes browsers\n//\n// libsodium.js API: https://gist.github.com/webmaster128/b2dbe6d54d36dd168c9fabf441b9b09c\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst libsodium_wrappers_1 = __importDefault(require(\"libsodium-wrappers\"));\nclass Argon2id {\n    static async execute(password, salt, options) {\n        await libsodium_wrappers_1.default.ready;\n        return libsodium_wrappers_1.default.crypto_pwhash(options.outputLength, password, salt, // libsodium only supports 16 byte salts and will throw when you don't respect that\n        options.opsLimit, options.memLimitKib * 1024, libsodium_wrappers_1.default.crypto_pwhash_ALG_ARGON2ID13);\n    }\n}\nexports.Argon2id = Argon2id;\nclass Ed25519Keypair {\n    constructor(privkey, pubkey) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n    }\n    // a libsodium privkey has the format `<ed25519 privkey> + <ed25519 pubkey>`\n    static fromLibsodiumPrivkey(libsodiumPrivkey) {\n        if (libsodiumPrivkey.length !== 64) {\n            throw new Error(`Unexpected key length ${libsodiumPrivkey.length}. Must be 64.`);\n        }\n        return new Ed25519Keypair(libsodiumPrivkey.slice(0, 32), libsodiumPrivkey.slice(32, 64));\n    }\n    toLibsodiumPrivkey() {\n        return new Uint8Array([...this.privkey, ...this.pubkey]);\n    }\n}\nexports.Ed25519Keypair = Ed25519Keypair;\nclass Ed25519 {\n    /**\n     * Generates a keypair deterministically from a given 32 bytes seed.\n     *\n     * This seed equals the Ed25519 private key.\n     * For implementation details see crypto_sign_seed_keypair in\n     * https://download.libsodium.org/doc/public-key_cryptography/public-key_signatures.html\n     * and diagram on https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n     */\n    static async makeKeypair(seed) {\n        await libsodium_wrappers_1.default.ready;\n        const keypair = libsodium_wrappers_1.default.crypto_sign_seed_keypair(seed);\n        return Ed25519Keypair.fromLibsodiumPrivkey(keypair.privateKey);\n    }\n    static async createSignature(message, keyPair) {\n        await libsodium_wrappers_1.default.ready;\n        return libsodium_wrappers_1.default.crypto_sign_detached(message, keyPair.toLibsodiumPrivkey());\n    }\n    static async verifySignature(signature, message, pubkey) {\n        await libsodium_wrappers_1.default.ready;\n        return libsodium_wrappers_1.default.crypto_sign_verify_detached(signature, message, pubkey);\n    }\n}\nexports.Ed25519 = Ed25519;\nclass Xchacha20poly1305Ietf {\n    static async encrypt(message, key, nonce) {\n        await libsodium_wrappers_1.default.ready;\n        const additionalData = null;\n        return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_encrypt(message, additionalData, null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n        nonce, key);\n    }\n    static async decrypt(ciphertext, key, nonce) {\n        await libsodium_wrappers_1.default.ready;\n        const additionalData = null;\n        return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_decrypt(null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n        ciphertext, additionalData, nonce, key);\n    }\n}\nexports.Xchacha20poly1305Ietf = Xchacha20poly1305Ietf;\n//# sourceMappingURL=libsodium.js.map"]},"metadata":{},"sourceType":"script"}